#
#
#
#
#   A REALLY IMPORTANT DETAIL FOR COMPILING FOR WINDOWS
#   is the runtime library that is used for the various libraries
#
#   Use MT  - Multithreading, static link
#

##################################################
#
# 1) Install cygwin
#
#

##################################################
#
# 2) Install Visual Studio
#
#


##################################################
#
# 3) Install glut
#
# RUNTIME-LIBRARY: I have no idea!!! But it works when I use /MD for cando
#
#
#OpenGL libraries comes with Visual Studio.
# So all we have to do is install GLUT. Here is a step by step procedure :
#
#The latest version (3.7) of GLUT windows binaries can be found at 
#http://www.xmission.com/~nate/glut.html or from a million other places
#on the web. Name of the zip file is: glut-3.7.6-bin.zip 
# 1) Extract the zipfile to some temporary folder. 
# 2) Copy glut32.dll file to you your windows System folder.
#     On Win2000/XP its C:\winnt\system. On Win98 its C:\windows\system. 
# 3) Copy glut32.lib to <visual studio .NET path>\Vc7\Lib folder.
#     Normally this would be 
#	C:\Program Files\Microsoft Visual Studio .NET\Vc7\Lib. 
#     NOTE: Schafmeister used:
#	C:\Program Files\Microsoft Visual Studio .NET\Vc7\PlatformSDK\Lib. 
# 4) Copy glut.h to <visual studio .NET path>\Vc7\Include\GL.
#     Normally this would be 
#        C:\Program Files\Microsoft Visual Studio .NET\Vc7\Include\GL 
#     NOTE: Schafmeister used:
#	C:\Program Files\Microsoft Visual Studio .NET\Vc7\PlatformSDK\Include\GL
#After this you should be all set to do your OpenGL/GLUT proramming.
# While creating a new project, you do not have to do anything special.
# Just create a new Win32 console application like you always do
# (by starting with an empty project). 
#


##################################################
#
# 4) Edit .bash_profile and add to the bottom
#

export CANDO_HOME=$HOME/Development/cando
export CANDO_APP_ROOT=$HOME/Development/cando/build/Windows_NT/cando
source $CANDO_HOME/targets/setup.cygwin



##################################################
#
# 5) Download and install 
#	- Python2.6
#
# RUNTIME-LIBRARY: I have no idea
#
# NOT USED ANYMORE	- PyOpenGL
# NOT USED ANYMORE	- wxPython



##################################################
#
#
# 6) Install expat  from the web
#
#
# last version expat-2win32-bin-2.0.1.exe
#
# install into c:\Expat201
#
#
# Open the expat_static in VisualStudio
#     set it to Release build
#	set Configuration_Properties-C/C++/Code_Generation 
#		to Multi-threaded DLL(/MD)
#	and build the project
# 


##################################################
#
#
# 7) Install wxWidgets for Windows and compile it
#
# RUNTIME-LIBRARY: MD (Multithreaded DLL)
#
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!
# USE A FRESH INSTALL!!!!!!!!!!!!!!!!!!

# To enable wxGLCanvas support under Windows, edit the file below
# and set wxUSE_GLCANVAS to 1

include/wx/msw/setup.h



# You may also need to add opengl32.lib to the list of libraries your 
# program is linked with. 
#
# Compile wxWidgets with 
#
### In a Windows shell...
#

cd \wxWidgets-2.8.10\build\msw
nmake -f makefile.vc USE_OPENGL=1 BUILD=release



#
# if you want to try some samples go into the samples directory
# and make it with the same options as above
#
# eg:
cd \wxWidgets-2.8.10\samples\opengl
nmake -f makefile.vc USE_OPENGL=1 BUILD=release MONOLITHIC=1 USE_THREADS=0

#
# now go into cube\vc_msw
#
cube.exe      # should show a cube YAY!





##################################################
#
# 8) From a cygwin shell
#
#       Go into Development/cando
#

make bundleDirectories


#
#    Go into Development/cando/externals/src
#
# 

#
# Build boost
# for description of name see: http://www.boost.org/doc/libs/1_38_0/more/getting_started/windows.html#expected-build-output
#
# RUNTIME-LIBRARY: All of them but use:
#		XXXX-vc71-mt.lib
#
#
make subClean
make sa
make sb


