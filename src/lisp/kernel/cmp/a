diff --git a/src/lisp/kernel/cmp/compiler.lsp b/src/lisp/kernel/cmp/compiler.lsp
index 6781937..6dadabd 100644
--- a/src/lisp/kernel/cmp/compiler.lsp
+++ b/src/lisp/kernel/cmp/compiler.lsp
@@ -625,32 +625,32 @@ jump to blocks within this tagbody."
     (irc-intrinsic "setParentOfActivationFrame" (irc-renv tagbody-env) (irc-renv env))
     (irc-low-level-trace :tagbody)
     (setf-metadata tagbody-env 'tagbody-function *current-function*)
-    (with-try tagbody-env
-      (mapl #'(lambda (cur)
-		(let* ((tag-begin (car cur))
-		       (tag-end (cadr cur))
-		       (section-block (cadr tag-begin))
-		       (section-next-block (cadr tag-end))
-		       (section (extract-section (caddr tag-begin) (caddr tag-end))))
-		  (irc-branch-if-no-terminator-inst section-block)
-		  (irc-begin-block section-block)
-		  (codegen-progn result section tagbody-env)
-		  (when section-next-block (irc-branch-if-no-terminator-inst section-next-block))
-		  ))
-	    enumerated-tag-blocks)
-      ((cleanup) (codegen-literal result nil env))
-      ((typeid-core-dynamic-go exception-ptr)
-       (let* ((go-index (irc-intrinsic "tagbodyDynamicGoIndexElseRethrow" (irc-renv tagbody-env) exception-ptr))
-	      (default-block (irc-basic-block-create "switch-default"))
-	      (sw (irc-switch go-index default-block (length enumerated-tag-blocks))))
-	 (mapc #'(lambda (one) (llvm-sys:add-case sw (jit-constant-i32 (car one))
-						  (cadr one))) enumerated-tag-blocks)
-	 (irc-begin-block default-block)
-	 (irc-intrinsic "throwIllegalSwitchValue"
-		   go-index (jit-constant-i32 (length enumerated-tag-blocks)))
-	 ))
-      )
-    ))
+    (let ((frame (irc-intrinsic "pushTagbodyFrame" (irc-renv tagbody-env))))
+      (with-try tagbody-env
+        (mapl #'(lambda (cur)
+                  (let* ((tag-begin (car cur))
+                         (tag-end (cadr cur))
+                         (section-block (cadr tag-begin))
+                         (section-next-block (cadr tag-end))
+                         (section (extract-section (caddr tag-begin) (caddr tag-end))))
+                    (irc-branch-if-no-terminator-inst section-block)
+                    (irc-begin-block section-block)
+                    (codegen-progn result section tagbody-env)
+                    (when section-next-block (irc-branch-if-no-terminator-inst section-next-block))
+                    ))
+              enumerated-tag-blocks)
+        ((cleanup) (codegen-literal result nil env))
+        ((typeid-core-dynamic-go exception-ptr)
+         (let* ((go-index (irc-intrinsic "tagbodyDynamicGoIndexElseRethrow" exception-ptr frame))
+                (default-block (irc-basic-block-create "switch-default"))
+                (sw (irc-switch go-index default-block (length enumerated-tag-blocks))))
+           (mapc #'(lambda (one) (llvm-sys:add-case sw (jit-constant-i32 (car one))
+                                                    (cadr one))) enumerated-tag-blocks)
+           (irc-begin-block default-block)
+           (irc-intrinsic "throwIllegalSwitchValue"
+                          go-index (jit-constant-i32 (length enumerated-tag-blocks))))))
+      (irc-intrinsic "exceptionStackUnwind" frame)
+      )))
 
 
 
@@ -659,10 +659,10 @@ jump to blocks within this tagbody."
   (let* ((tag (car rest))
 	 (classified-tag (classify-tag env tag)))
     (if (and classified-tag (eq (car classified-tag) 'dynamic-go))
-	(let ((depth (cadr classified-tag))
+	(let ((tagbody-id (irc-renv (cadr classified-tag)))
 	      (index (cddr classified-tag)))
 	  (irc-low-level-trace :go)
-	  (irc-intrinsic "throw_DynamicGo" (jit-constant-i32 depth) (jit-constant-i32 index) (irc-renv env)))
+	  (irc-intrinsic "throwDynamicGo" tagbody-id (jit-constant-i32 index)))
 	(error "go to unknown classified tag ~a ~a" tag classified-tag))))
 
 
@@ -674,26 +674,27 @@ jump to blocks within this tagbody."
 
 (defun codegen-block (result rest env)
   "codegen-block using the try macro"
-  (let ((block-symbol (car rest))
-	(body (cdr rest)))
+  (let* ((block-symbol (car rest))
+         (body (cdr rest)))
     (with-dbg-lexical-block (env body)
-      (let ((block-env (irc-new-block-environment env :name block-symbol))
-	    traceid)
+      (let* ((block-env (irc-new-block-environment env :name block-symbol))
+             traceid)
 	(let ((block-start (irc-basic-block-create
 			    (bformat nil "block-%s-start" (symbol-name block-symbol)))))
 	  (irc-br block-start)
-	  (irc-begin-block block-start))
-	(with-try block-env
-	  (progn
-	    (setq traceid (trace-enter-block-scope block-env `(block ,block-symbol ,body)))
-	    (codegen-progn result body block-env))
-	  ((cleanup)
-	   (trace-exit-block-scope block-env traceid)
-	   (irc-unwind-environment block-env))
-	  ((typeid-core-return-from exception-ptr)
-	   (irc-intrinsic "blockHandleReturnFrom" result exception-ptr))
-	  )
-	))))
+	  (irc-begin-block block-start)
+          (let* ((frame (irc-intrinsic "pushBlockFrame" (irc-global-symbol block-symbol block-env))))
+            (with-try block-env
+              (progn
+                (setq traceid (trace-enter-block-scope block-env `(block ,block-symbol ,body)))
+                (codegen-progn result body block-env))
+              ((cleanup)
+               (trace-exit-block-scope block-env traceid)
+               (irc-unwind-environment block-env))
+              ((typeid-core-return-from exception-ptr)
+               (irc-intrinsic "blockHandleReturnFrom" result exception-ptr frame))
+              )
+            (irc-intrinsic "exceptionStackUnwind" frame)))))))
 
 
 
@@ -706,10 +707,11 @@ jump to blocks within this tagbody."
 	 (return-form (cadr rest))
 	 (recognizes-block-symbol (recognizes-block-symbol env block-symbol)))
     (if recognizes-block-symbol
-	(let ((block-depth (calculate-block-depth env block-symbol)))
-	  (codegen temp-mv-result return-form env)
+        (progn
+          (codegen temp-mv-result return-form env)
+          (irc-intrinsic "saveToMultipleValue0" temp-mv-result)
 	  (irc-low-level-trace)
-	  (irc-intrinsic "throwReturnFrom" (jit-constant-i32 block-depth) temp-mv-result))
+	  (irc-intrinsic "throwReturnFrom" (irc-global-symbol block-symbol env)))
 	(error "Unrecognized block symbol ~a" block-symbol))))
 
 
@@ -868,9 +870,11 @@ jump to blocks within this tagbody."
 	(progn
 	  (irc-branch-to-and-begin-block (irc-basic-block-create "unwind-protect-start"))
 	  (codegen temp-mv-result protected-form up-env)
-	  (irc-intrinsic "saveValues" saved-values temp-mv-result)
+          (irc-intrinsic "saveToMultipleValue0" temp-mv-result)
+          #|(irc-intrinsic "saveValues" saved-values temp-mv-result)|# ;; saveValues was here
 	  )
 	((cleanup)
+         (irc-intrinsic "saveValues" saved-values temp-mv-result) ;; moved saveValues here
 	 (let ((temp-val (irc-alloca-tsp up-env :label "temp")))
 	   (codegen temp-val unwind-form up-env))
 	 (irc-intrinsic "loadValues" temp-mv-result saved-values)
@@ -882,15 +886,6 @@ jump to blocks within this tagbody."
 
 
 
-(defun codegen-throw (result rest env)
-  (let ((tag (car rest))
-	(result-form (cadr rest)))
-    (let ((tag-store (irc-alloca-tsp env :label "tag-store"))
-	  (result-mv-form-store (irc-alloca-tmv env :label "result-mv-form-store")))
-      (codegen tag-store tag env)
-      (codegen result-mv-form-store result-form env)
-      (irc-low-level-trace)
-      (irc-intrinsic "throwCatchThrow" tag-store result-mv-form-store))))
 
 
 (defun codegen-catch (result rest env)
@@ -899,27 +894,44 @@ jump to blocks within this tagbody."
 	   (tag (car rest))
 	   (body (cdr rest))
 	   (tag-store (irc-alloca-tsp catch-env :label "tag-store"))
-	   (tag-unwind-store (irc-alloca-tsp catch-env :label "tag-unwind-store"))
+	   (catch-frame-index (irc-alloca-i32-no-init catch-env :label "catch-frame-index"))
 	   traceid)
       (codegen tag-store tag catch-env)
-      (irc-intrinsic "catchStoreTag" tag-unwind-store tag-store)
-      (with-try catch-env
-	(progn
-	  (setq traceid (trace-enter-catch-scope catch-env rest))
-	  (codegen-progn result body catch-env)
-	  )
-	((cleanup)
-	 (trace-exit-catch-scope catch-env traceid)
-	 (irc-unwind-environment catch-env))
-	((typeid-core-catch-throw exception-ptr)
-	 (irc-intrinsic "catchIfTagMatchesStoreResultElseRethrow"
-		   result tag-store exception-ptr))
-	((all-other-exceptions)
-	 (progn
-	   (irc-intrinsic "catchUnwind" tag-unwind-store)
-	   (irc-rethrow catch-env)
-	   ))
-	))))
+      (let ((frame (irc-intrinsic "pushCatchFrame" tag-store)))
+        (with-try catch-env
+          (progn
+            (setq traceid (trace-enter-catch-scope catch-env rest))
+            (codegen-progn result body catch-env)
+            )
+          ((cleanup)
+           (trace-exit-catch-scope catch-env traceid)
+           (irc-unwind-environment catch-env))
+          ((typeid-core-catch-throw exception-ptr)
+           (irc-intrinsic "ifCatchFrameMatchesStoreResultElseRethrow"
+                          result frame exception-ptr))
+          ((all-other-exceptions)
+           (progn
+             (irc-rethrow catch-env)
+             ))
+          )
+        (irc-intrinsic "exceptionStackUnwind" frame)
+        ))))
+
+
+(defun codegen-throw (result rest env)
+  (let ((tag (car rest))
+	(result-form (cadr rest)))
+    (let ((tag-store (irc-alloca-tsp env :label "tag-store"))
+	  (result-mv-form-store (irc-alloca-tmv env :label "result-mv-form-store")))
+      (codegen tag-store tag env)
+      (codegen result-mv-form-store result-form env)
+      (irc-intrinsic "saveToMultipleValue0" result-mv-form-store)
+      (irc-low-level-trace)
+      (irc-intrinsic "throwCatchThrow" tag-store))))
+
+
+
+
 
 
 (defun codegen-load-time-value (result rest env)
@@ -1198,6 +1210,7 @@ be wrapped with to make a closure"
 (defun disassemble (desig)
   (multiple-value-bind (func-or-lambda name)
       (cond
+        ((null desig) (error "No function provided"))
 	((symbolp desig) (if (fboundp desig)
 			     (values (fdefinition desig) desig)
 			     (error "No function bound to ~A" desig)))
