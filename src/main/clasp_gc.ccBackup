#ifdef DECLARE_FORWARDS
 namespace core {
    class Environment_O;
    class CatchEnvironment_O;
    class Real_O;
    class FunctionValueEnvironment_O;
    class RequiredArgument;
    class SourceFileInfo_O;
    class SymbolSet_O;
    class TagbodyEnvironment_O;
    class Cons_O;
    class Array_O;
    class Complex_O;
    class TagbodyFrame_O;
    class SymbolMacroletEnvironment_O;
    class ValueEnvironment_O;
    class CompiledFunction_O;
    class ValueFrame_O;
    class StandardObject_O;
    class CandoException_O;
    class String_O;
    class DoubleFloat_O;
    class Metaobject_O;
    class SequenceStepper;
    class Number_O;
    class Fixnum_O;
    class Integer_O;
    class KeywordArgument;
    class SourcePosInfo_O;
    class SourceManager_O;
    class MacroClosure;
    class Symbol_O;
    class Class_O;
    class Ratio_O;
    class LongFloat_O;
    class GlueEnvironment_O;
    class AuxArgument;
    class UnwindProtectEnvironment_O;
    class Rational_O;
    class OptionalArgument;
    class SymbolToEnumConverter_O;
    class Float_O;
    class FunctionFrame_O;
    class Function_O;
    class CacheRecord;
    class Package_O;
    class Bignum_O;
    class ExceptionEntry;
    class RuntimeVisibleEnvironment_O;
    class DynamicBinding;
    class LexicalEnvironment_O;
    class LambdaListHandler_O;
    class BlockEnvironment_O;
    class Sequence_O;
    class Vector_O;
    class Pointer_O;
    class CompileTimeEnvironment_O;
    class SingleFloat_O;
    class ShortFloat_O;
    class Specializer_O;
    class HashTableEq_O;
    class FunctionContainerEnvironment_O;
    class Str_O;
    class MacroletEnvironment_O;
    class List_O;
    class VectorObjects_O;
    class Iterator_O;
 };
#endif // DECLARE_FORWARDS
#if defined(GC_ENUM)
enum { KIND_null = 0, 
KIND_LISPALLOC_core__Iterator_O = 1,
KIND_LISPALLOC_core__VectorObjects_O = 2,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ = 74,
KIND_LISPALLOC_core__List_O = 3,
KIND_GCSTRING_gctools__GCString_moveable_char_ = 75,
KIND_LISPALLOC_core__MacroletEnvironment_O = 4,
KIND_BOOTSTRAP_core__Str_O = 5,
KIND_LISPALLOC_core__FunctionContainerEnvironment_O = 6,
KIND_LISPALLOC_core__HashTableEq_O = 8,
KIND_BOOTSTRAP_core__Specializer_O = 7,
KIND_LISPALLOC_core__ShortFloat_O = 9,
KIND_LISPALLOC_core__SingleFloat_O = 10,
KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_ = 77,
KIND_LISPALLOC_core__CompileTimeEnvironment_O = 11,
KIND_LISPALLOC_core__Pointer_O = 12,
KIND_LISPALLOC_core__Vector_O = 13,
KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_ = 76,
KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_ = 67,
KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_ = 64,
KIND_LISPALLOC_core__Sequence_O = 14,
KIND_LISPALLOC_core__BlockEnvironment_O = 16,
KIND_LISPALLOC_core__LambdaListHandler_O = 15,
KIND_LISPALLOC_core__LexicalEnvironment_O = 17,
KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure = 78,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ = 66,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_ = 59,
KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O = 18,
KIND_LISPALLOC_core__Bignum_O = 19,
KIND_LISPALLOC_core__Package_O = 20,
KIND_LISPALLOC_core__Function_O = 21,
KIND_LISPALLOC_core__FunctionFrame_O = 22,
KIND_LISPALLOC_core__Float_O = 23,
KIND_LISPALLOC_core__SymbolToEnumConverter_O = 24,
KIND_LISPALLOC_core__Rational_O = 25,
KIND_LISPALLOC_core__UnwindProtectEnvironment_O = 26,
KIND_LISPALLOC_core__GlueEnvironment_O = 27,
KIND_LISPALLOC_core__LongFloat_O = 28,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_ = 71,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_ = 70,
KIND_LISPALLOC_core__Ratio_O = 29,
KIND_BOOTSTRAP_core__Class_O = 30,
KIND_CLASSALLOC_core__MacroClosure = 80,
KIND_BOOTSTRAP_core__Symbol_O = 31,
KIND_LISPALLOC_core__SourceManager_O = 33,
KIND_LISPALLOC_core__SourcePosInfo_O = 32,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_ = 57,
KIND_LISPALLOC_core__Integer_O = 36,
KIND_LISPALLOC_core__Fixnum_O = 35,
KIND_LISPALLOC_core__Number_O = 34,
KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_ = 73,
KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_ = 61,
KIND_BOOTSTRAP_core__Metaobject_O = 37,
KIND_LISPALLOC_core__DoubleFloat_O = 38,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_ = 62,
KIND_LISPALLOC_core__String_O = 39,
KIND_LISPALLOC_core__CandoException_O = 40,
KIND_BOOTSTRAP_core__StandardObject_O = 41,
KIND_LISPALLOC_core__ValueFrame_O = 42,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_ = 72,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_ = 69,
KIND_LISPALLOC_core__CompiledFunction_O = 43,
KIND_LISPALLOC_core__ValueEnvironment_O = 44,
KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ = 65,
KIND_LISPALLOC_core__SymbolMacroletEnvironment_O = 45,
KIND_LISPALLOC_core__TagbodyFrame_O = 46,
KIND_LISPALLOC_core__Complex_O = 47,
KIND_LISPALLOC_core__Array_O = 48,
KIND_LISPALLOC_core__Cons_O = 49,
KIND_LISPALLOC_core__TagbodyEnvironment_O = 50,
KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_ = 68,
KIND_LISPALLOC_core__SymbolSet_O = 51,
KIND_LISPALLOC_core__SourceFileInfo_O = 52,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_ = 58,
KIND_LISPALLOC_core__FunctionValueEnvironment_O = 53,
KIND_LISPALLOC_core__Real_O = 54,
KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_ = 60,
KIND_LISPALLOC_core__CatchEnvironment_O = 55,
KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_ = 63,
KIND_LISPALLOC_core__Environment_O = 56,
KIND_TEMPLATED_CLASSALLOC_core__Creator = 79,
  KIND_max = 80
}
#endif // defined(GC_ENUM)
#if defined(GC_KIND_NAME_MAP)
   case KIND_LISPALLOC_core__Iterator_O: return "KIND_LISPALLOC_core__Iterator_O";
   case KIND_LISPALLOC_core__VectorObjects_O: return "KIND_LISPALLOC_core__VectorObjects_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__";
   case KIND_LISPALLOC_core__List_O: return "KIND_LISPALLOC_core__List_O";
   case KIND_GCSTRING_gctools__GCString_moveable_char_: return "KIND_GCSTRING_gctools__GCString_moveable_char_";
   case KIND_LISPALLOC_core__MacroletEnvironment_O: return "KIND_LISPALLOC_core__MacroletEnvironment_O";
   case KIND_BOOTSTRAP_core__Str_O: return "KIND_BOOTSTRAP_core__Str_O";
   case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: return "KIND_LISPALLOC_core__FunctionContainerEnvironment_O";
   case KIND_LISPALLOC_core__HashTableEq_O: return "KIND_LISPALLOC_core__HashTableEq_O";
   case KIND_BOOTSTRAP_core__Specializer_O: return "KIND_BOOTSTRAP_core__Specializer_O";
   case KIND_LISPALLOC_core__ShortFloat_O: return "KIND_LISPALLOC_core__ShortFloat_O";
   case KIND_LISPALLOC_core__SingleFloat_O: return "KIND_LISPALLOC_core__SingleFloat_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_";
   case KIND_LISPALLOC_core__CompileTimeEnvironment_O: return "KIND_LISPALLOC_core__CompileTimeEnvironment_O";
   case KIND_LISPALLOC_core__Pointer_O: return "KIND_LISPALLOC_core__Pointer_O";
   case KIND_LISPALLOC_core__Vector_O: return "KIND_LISPALLOC_core__Vector_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_";
   case KIND_LISPALLOC_core__Sequence_O: return "KIND_LISPALLOC_core__Sequence_O";
   case KIND_LISPALLOC_core__BlockEnvironment_O: return "KIND_LISPALLOC_core__BlockEnvironment_O";
   case KIND_LISPALLOC_core__LambdaListHandler_O: return "KIND_LISPALLOC_core__LambdaListHandler_O";
   case KIND_LISPALLOC_core__LexicalEnvironment_O: return "KIND_LISPALLOC_core__LexicalEnvironment_O";
   case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: return "KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_";
   case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: return "KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O";
   case KIND_LISPALLOC_core__Bignum_O: return "KIND_LISPALLOC_core__Bignum_O";
   case KIND_LISPALLOC_core__Package_O: return "KIND_LISPALLOC_core__Package_O";
   case KIND_LISPALLOC_core__Function_O: return "KIND_LISPALLOC_core__Function_O";
   case KIND_LISPALLOC_core__FunctionFrame_O: return "KIND_LISPALLOC_core__FunctionFrame_O";
   case KIND_LISPALLOC_core__Float_O: return "KIND_LISPALLOC_core__Float_O";
   case KIND_LISPALLOC_core__SymbolToEnumConverter_O: return "KIND_LISPALLOC_core__SymbolToEnumConverter_O";
   case KIND_LISPALLOC_core__Rational_O: return "KIND_LISPALLOC_core__Rational_O";
   case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: return "KIND_LISPALLOC_core__UnwindProtectEnvironment_O";
   case KIND_LISPALLOC_core__GlueEnvironment_O: return "KIND_LISPALLOC_core__GlueEnvironment_O";
   case KIND_LISPALLOC_core__LongFloat_O: return "KIND_LISPALLOC_core__LongFloat_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_";
   case KIND_LISPALLOC_core__Ratio_O: return "KIND_LISPALLOC_core__Ratio_O";
   case KIND_BOOTSTRAP_core__Class_O: return "KIND_BOOTSTRAP_core__Class_O";
   case KIND_CLASSALLOC_core__MacroClosure: return "KIND_CLASSALLOC_core__MacroClosure";
   case KIND_BOOTSTRAP_core__Symbol_O: return "KIND_BOOTSTRAP_core__Symbol_O";
   case KIND_LISPALLOC_core__SourceManager_O: return "KIND_LISPALLOC_core__SourceManager_O";
   case KIND_LISPALLOC_core__SourcePosInfo_O: return "KIND_LISPALLOC_core__SourcePosInfo_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_";
   case KIND_LISPALLOC_core__Integer_O: return "KIND_LISPALLOC_core__Integer_O";
   case KIND_LISPALLOC_core__Fixnum_O: return "KIND_LISPALLOC_core__Fixnum_O";
   case KIND_LISPALLOC_core__Number_O: return "KIND_LISPALLOC_core__Number_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_";
   case KIND_BOOTSTRAP_core__Metaobject_O: return "KIND_BOOTSTRAP_core__Metaobject_O";
   case KIND_LISPALLOC_core__DoubleFloat_O: return "KIND_LISPALLOC_core__DoubleFloat_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_";
   case KIND_LISPALLOC_core__String_O: return "KIND_LISPALLOC_core__String_O";
   case KIND_LISPALLOC_core__CandoException_O: return "KIND_LISPALLOC_core__CandoException_O";
   case KIND_BOOTSTRAP_core__StandardObject_O: return "KIND_BOOTSTRAP_core__StandardObject_O";
   case KIND_LISPALLOC_core__ValueFrame_O: return "KIND_LISPALLOC_core__ValueFrame_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_";
   case KIND_LISPALLOC_core__CompiledFunction_O: return "KIND_LISPALLOC_core__CompiledFunction_O";
   case KIND_LISPALLOC_core__ValueEnvironment_O: return "KIND_LISPALLOC_core__ValueEnvironment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: return "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__";
   case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: return "KIND_LISPALLOC_core__SymbolMacroletEnvironment_O";
   case KIND_LISPALLOC_core__TagbodyFrame_O: return "KIND_LISPALLOC_core__TagbodyFrame_O";
   case KIND_LISPALLOC_core__Complex_O: return "KIND_LISPALLOC_core__Complex_O";
   case KIND_LISPALLOC_core__Array_O: return "KIND_LISPALLOC_core__Array_O";
   case KIND_LISPALLOC_core__Cons_O: return "KIND_LISPALLOC_core__Cons_O";
   case KIND_LISPALLOC_core__TagbodyEnvironment_O: return "KIND_LISPALLOC_core__TagbodyEnvironment_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_";
   case KIND_LISPALLOC_core__SymbolSet_O: return "KIND_LISPALLOC_core__SymbolSet_O";
   case KIND_LISPALLOC_core__SourceFileInfo_O: return "KIND_LISPALLOC_core__SourceFileInfo_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_";
   case KIND_LISPALLOC_core__FunctionValueEnvironment_O: return "KIND_LISPALLOC_core__FunctionValueEnvironment_O";
   case KIND_LISPALLOC_core__Real_O: return "KIND_LISPALLOC_core__Real_O";
   case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: return "KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_";
   case KIND_LISPALLOC_core__CatchEnvironment_O: return "KIND_LISPALLOC_core__CatchEnvironment_O";
   case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: return "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_";
   case KIND_LISPALLOC_core__Environment_O: return "KIND_LISPALLOC_core__Environment_O";
   case KIND_TEMPLATED_CLASSALLOC_core__Creator: return "KIND_TEMPLATED_CLASSALLOC_core__Creator";
#endif // defined(GC_KIND_NAME_MAP)
#if defined(GC_KIND_SELECTORS)
//GCKind for #S(SIMPLE-ENUM :KEY "core::Iterator_O" :NAME "KIND_LISPALLOC_core__Iterator_O" :VALUE 1 :CCLASS #S(CCLASS :KEY "core::Iterator_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/iterator.h:15:1" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "currentObject" "notDone" "isDone" "next" "first" "templatedSizeof" "eql" "NO-NAME" "NO-NAME" "step" "unsafeElement" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Iterator_O" :NAME "Iterator_O" :LOCATION "/Users/meister/Development/clasp/src/core/iterator.h:15:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Iterator_O" :NAME "Iterator_O")))
template <> class gctools::GCKind<core::Iterator_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Iterator_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::VectorObjects_O" :NAME "KIND_LISPALLOC_core__VectorObjects_O" :VALUE 2 :CCLASS #S(CCLASS :KEY "core::VectorObjects_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/vectorObjects.h:20:5" :BASES ("core::Vector_O") :VBASES ("core::T_O") :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Values" :LOCATION "/Users/meister/Development/clasp/src/core/vectorObjects.h:38:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Adjustable" :LOCATION "/Users/meister/Development/clasp/src/core/vectorObjects.h:37:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ElementType" :LOCATION "/Users/meister/Development/clasp/src/core/vectorObjects.h:36:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "setf_subseq" "subseq" "__repr__" "length" "fillArrayWithElt" "setf_svref" "svref" "setf_elt" "elt" "setf_aref" "aref" "swap" "swapElements" "NO-NAME" "arrayRowMajorIndex" "rowMajorAref" "rowMajorAset" "dimension" "adjustableArrayP" "elementType" "setElementType" "adjust" "setup" "create" "make" "create" "end" "begin" "fillInitialContents" "NO-NAME" "NO-NAME" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::VectorObjects_O" :NAME "VectorObjects_O" :LOCATION "/Users/meister/Development/clasp/src/core/vectorObjects.h:20:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::VectorObjects_O" :NAME "VectorObjects_O")))
template <> class gctools::GCKind<core::VectorObjects_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__VectorObjects_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__" :VALUE 74 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::List_O" :NAME "KIND_LISPALLOC_core__List_O" :VALUE 3 :CCLASS #S(CCLASS :KEY "core::List_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/lispList.h:12:1" :BASES ("core::Sequence_O") :VBASES ("core::T_O") :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "last" "onthcdr" "onth" "copyList" "nreconc" "revappend" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::List_O" :NAME "List_O" :LOCATION "/Users/meister/Development/clasp/src/core/lispList.h:12:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::List_O" :NAME "List_O")))
template <> class gctools::GCKind<core::List_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__List_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCString_moveable<char>" :NAME "KIND_GCSTRING_gctools__GCString_moveable_char_" :VALUE 75 :CCLASS #S(CCLASS :KEY "gctools::GCString_moveable<char>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:27:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(UNCLASSIFIED-CTYPE :KEY "char"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:26:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:25:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCSTRING :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SKIPPER-FOR-GCSTRING :SKIP SKIPPER-FOR-GCSTRING :FINALIZE FINALIZER-FOR-GCSTRING :CORE:INDEX 5) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char"))))))
template <> class gctools::GCKind<gctools::GCString_moveable<char>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCSTRING_gctools__GCString_moveable_char_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::MacroletEnvironment_O" :NAME "KIND_LISPALLOC_core__MacroletEnvironment_O" :VALUE 4 :CCLASS #S(CCLASS :KEY "core::MacroletEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:760:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Macros" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:774:9" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "summaryOfContents" "_findMacro" "addMacro" "make" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::MacroletEnvironment_O" :NAME "MacroletEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:760:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::MacroletEnvironment_O" :NAME "MacroletEnvironment_O")))
template <> class gctools::GCKind<core::MacroletEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__MacroletEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Str_O" :NAME "KIND_BOOTSTRAP_core__Str_O" :VALUE 5 :CCLASS #S(CCLASS :KEY "core::Str_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/str.h:14:5" :BASES ("core::String_O") :VBASES ("core::T_O") :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Contents" :LOCATION "/Users/meister/Development/clasp/src/core/str.h:27:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))))))))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "fillInitialContents" "elementSizeInBytes" "addressOfBuffer" "fillArrayWithElt" "setf_subseq" "subseq" "setf_svref" "svref" "setf_elt" "elt" "__write__" "setf_aref" "aref" "string_not_lessp" "string_not_greaterp" "string_greaterp" "string_lessp" "string_not_equal" "string_equal" "string_GE_" "string_LE_" "string_GT_" "string_LT_" "string_NE_" "string_EQ_" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "eql" "equalp" "equal" "elementType" "length" "find" "scharSet" "schar" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "sxhash" "substr" "right" "left" "asKeywordSymbol" "asSymbol" "asReal" "parseInteger" "asInt" "NO-NAME" "NO-NAME" "split" "splitAtWhiteSpace" "countOccurances" "__repr__" "contents" "asetUnsafe" "setFromChars" "setFromChars" "set" "get" "__str__" "c_str" "size" "adjustableArrayP" "stringToBignum" "create" "create" "create" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::Str_O" :NAME "Str_O" :LOCATION "/Users/meister/Development/clasp/src/core/str.h:14:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Str_O" :NAME "Str_O")))
template <> class gctools::GCKind<core::Str_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Str_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::FunctionContainerEnvironment_O" :NAME "KIND_LISPALLOC_core__FunctionContainerEnvironment_O" :VALUE 6 :CCLASS #S(CCLASS :KEY "core::FunctionContainerEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:656:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "countFunctionContainerEnvironments" "find_current_code_environment" "summaryOfContents" "make" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::FunctionContainerEnvironment_O" :NAME "FunctionContainerEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:656:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::FunctionContainerEnvironment_O" :NAME "FunctionContainerEnvironment_O")))
template <> class gctools::GCKind<core::FunctionContainerEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionContainerEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::HashTableEq_O" :NAME "KIND_LISPALLOC_core__HashTableEq_O" :VALUE 8 :CCLASS #S(CCLASS :KEY "core::HashTableEq_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/hashTableEq.h:14:5" :BASES ("core::HashTable_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "sxhashKey" "keyTest" "hashTableTest" "sxhash_eq" "create_default" "create" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::HashTableEq_O" :NAME "HashTableEq_O" :LOCATION "/Users/meister/Development/clasp/src/core/hashTableEq.h:14:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::HashTableEq_O" :NAME "HashTableEq_O")))
template <> class gctools::GCKind<core::HashTableEq_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__HashTableEq_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Specializer_O" :NAME "KIND_BOOTSTRAP_core__Specializer_O" :VALUE 7 :CCLASS #S(CCLASS :KEY "core::Specializer_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/specializer.h:21:5" :BASES ("core::Metaobject_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::Specializer_O" :NAME "Specializer_O" :LOCATION "/Users/meister/Development/clasp/src/core/specializer.h:21:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Specializer_O" :NAME "Specializer_O")))
template <> class gctools::GCKind<core::Specializer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Specializer_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::ShortFloat_O" :NAME "KIND_LISPALLOC_core__ShortFloat_O" :VALUE 9 :CCLASS #S(CCLASS :KEY "core::ShortFloat_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:354:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:366:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "float"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "castToInteger" "as_long_float" "as_double" "as_float" "minusp" "plusp" "oneMinus" "onePlus" "negate" "zerop" "reciprocal" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "__repr__" "signum" "copy" "sxhash" "get" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::ShortFloat_O" :NAME "ShortFloat_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:354:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ShortFloat_O" :NAME "ShortFloat_O")))
template <> class gctools::GCKind<core::ShortFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ShortFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SingleFloat_O" :NAME "KIND_LISPALLOC_core__SingleFloat_O" :VALUE 10 :CCLASS #S(CCLASS :KEY "core::SingleFloat_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:419:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:431:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "float"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "castToInteger" "as_long_float" "as_double" "as_float" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "oneMinus" "onePlus" "sqrt" "log1p" "log1" "minusp" "plusp" "negate" "zerop" "reciprocal" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "copy" "__repr__" "get" "sxhash" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SingleFloat_O" :NAME "SingleFloat_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:419:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SingleFloat_O" :NAME "SingleFloat_O")))
template <> class gctools::GCKind<core::SingleFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SingleFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_" :VALUE 77 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::OptionalArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::CompileTimeEnvironment_O" :NAME "KIND_LISPALLOC_core__CompileTimeEnvironment_O" :VALUE 11 :CCLASS #S(CCLASS :KEY "core::CompileTimeEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:496:5" :BASES ("core::LexicalEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "_findValue" "currentVisibleEnvironment" "getActivationFrame" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::CompileTimeEnvironment_O" :NAME "CompileTimeEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:496:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CompileTimeEnvironment_O" :NAME "CompileTimeEnvironment_O")))
template <> class gctools::GCKind<core::CompileTimeEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CompileTimeEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Pointer_O" :NAME "KIND_LISPALLOC_core__Pointer_O" :VALUE 12 :CCLASS #S(CCLASS :KEY "core::Pointer_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/pointer.h:10:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Pointer" :LOCATION "/Users/meister/Development/clasp/src/core/pointer.h:25:2" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(UNCLASSIFIED-CTYPE :KEY "void")))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "__repr__" "eql" "ptr" "createForT_sp" "create" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Pointer_O" :NAME "Pointer_O" :LOCATION "/Users/meister/Development/clasp/src/core/pointer.h:10:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Pointer_O" :NAME "Pointer_O")))
template <> class gctools::GCKind<core::Pointer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Pointer_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Vector_O" :NAME "KIND_LISPALLOC_core__Vector_O" :VALUE 13 :CCLASS #S(CCLASS :KEY "core::Vector_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/lispVector.h:17:1" :BASES ("core::Sequence_O" "core::Array_O") :VBASES ("core::T_O") :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "addressOfBuffer" "setFillPointer" "vectorPushExtend" "vectorPush" "arrayTotalSize" "arrayDimensions" "arrayDimension" "rank" "elementType" "elementSizeInBytes" "swapElements" "NO-NAME" "nreverse" "reverse" "length" "dimension" "vector_length" "adjustableArrayP" "initialize" "NO-NAME" "NO-NAME" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Vector_O" :NAME "Vector_O" :LOCATION "/Users/meister/Development/clasp/src/core/lispVector.h:17:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Vector_O" :NAME "Vector_O")))
template <> class gctools::GCKind<core::Vector_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Vector_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_" :VALUE 76 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::RequiredArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_" :VALUE 67 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::AuxArgument>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::AuxArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_" :VALUE 64 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper")))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper")))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::SequenceStepper *>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Sequence_O" :NAME "KIND_LISPALLOC_core__Sequence_O" :VALUE 14 :CCLASS #S(CCLASS :KEY "core::Sequence_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/sequence.h:15:5" :BASES ("core::T_O") :VBASES ("core::T_O") :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "setf_subseq" "subseq" "setf_elt" "elt" "length" "nreverse" "reverse" "NO-NAME" "NO-NAME" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Sequence_O" :NAME "Sequence_O" :LOCATION "/Users/meister/Development/clasp/src/core/sequence.h:15:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Sequence_O" :NAME "Sequence_O")))
template <> class gctools::GCKind<core::Sequence_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Sequence_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::BlockEnvironment_O" :NAME "KIND_LISPALLOC_core__BlockEnvironment_O" :VALUE 16 :CCLASS #S(CCLASS :KEY "core::BlockEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:576:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_BlockSymbol" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:586:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :CORE:SPECIALIZER "class core::Symbol_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "find_block_named_environment" "recognizesBlockSymbol" "setBlockSymbol" "getBlockSymbol" "summaryOfContents" "make" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::BlockEnvironment_O" :NAME "BlockEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:576:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::BlockEnvironment_O" :NAME "BlockEnvironment_O")))
template <> class gctools::GCKind<core::BlockEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__BlockEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::LambdaListHandler_O" :NAME "KIND_LISPALLOC_core__LambdaListHandler_O" :VALUE 15 :CCLASS #S(CCLASS :KEY "core::LambdaListHandler_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:76:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_LexicalVariableNamesForDebugging" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:103:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::VectorObjects_O>" :CORE:SPECIALIZER "class core::VectorObjects_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_NumberOfLexicalVariables" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:102:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "int")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Comment" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:100:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char"))))))))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_AuxArguments" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:99:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::AuxArgument>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_AllowOtherKeys" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:98:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_KeywordArguments" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:97:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::KeywordArgument>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_RestArgument" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:96:2" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RestArgument" :NAME "RestArgument")) #S(INSTANCE-VARIABLE :FIELD-NAME "_OptionalArguments" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:95:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::OptionalArgument>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_RequiredArguments" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:94:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::RequiredArgument>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_DeclareSpecifierList" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:93:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_SpecialSymbolSet" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:92:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SymbolSet_O>" :CORE:SPECIALIZER "class core::SymbolSet_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ClassifiedSymbolList" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:91:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_LambdaList" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:90:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_CreatesBindings" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:89:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "partsAsString" "__repr__" "processLambdaListHandler" "calculateNamesOfLexicalVariablesForDebugging" "namesOfLexicalVariablesForDebugging" "namesOfLexicalVariables" "classifiedSymbols" "numberOfLexicalVariables" "allowOtherKeys" "numberOfAuxArguments" "numberOfKeyArguments" "numberOfRestArguments" "numberOfOptionalArguments" "numberOfRequiredArguments" "requiredLexicalArgumentsOnlyP" "lambdaListParts" "createBindingsInScope_argArray_TPtr" "createBindingsInScope_argArray" "createBindingsInScope_af" "parse_lambda_list_declares" "single_dispatch_on_argument" "create_required_arguments" "recursively_build_handlers_count_arguments" "classifyTarget" "identifySpecialSymbols" "classifySymbols" "classifyOneSymbol" "process_declares" "getComment" "setComment" "create" "create" "createRecursive" "process_macro_lambda_list" "process_single_dispatch_lambda_list" "makeLambdaListHandler" "endRequiredArguments" "beginRequiredArguments" "endRequiredArguments" "beginRequiredArguments" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::LambdaListHandler_O" :NAME "LambdaListHandler_O" :LOCATION "/Users/meister/Development/clasp/src/core/lambdaListHandler.h:76:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::LambdaListHandler_O" :NAME "LambdaListHandler_O")))
template <> class gctools::GCKind<core::LambdaListHandler_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LambdaListHandler_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::LexicalEnvironment_O" :NAME "KIND_LISPALLOC_core__LexicalEnvironment_O" :VALUE 17 :CCLASS #S(CCLASS :KEY "core::LexicalEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:216:5" :BASES ("core::Environment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Metadata" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:225:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ParentEnvironment" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:222:6" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Environment_O>" :CORE:SPECIALIZER "class core::Environment_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "lookupMetadata" "localMetadata" "push_metadata" "gather_metadata" "setf_metadata" "summaryOfContents" "getParentEnvironment" "setupParent" "NO-NAME" "NO-NAME" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::LexicalEnvironment_O" :NAME "LexicalEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:216:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::LexicalEnvironment_O" :NAME "LexicalEnvironment_O")))
template <> class gctools::GCKind<core::LexicalEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LexicalEnvironment_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :KEY "core::BuiltinClosure" :NAME "KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure" :VALUE 78 :CCLASS #S(CCLASS :KEY "core::BuiltinClosure" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:153:5" :BASES ("core::FunctionClosure") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_lambdaListHandler" :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:156:9" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O>" :CORE:SPECIALIZER "class core::LambdaListHandler_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "lambdaListHandler" "builtinP" "invoke" "describe" "templatedSizeof" "finishSetup" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :TEMPLATED-CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :CORE:INDEX 8) :ALL-ALLOCS (#S(CLASSALLOC :KEY "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:4690:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::multiple_values<core::T_O> (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:3116:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O> (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:3116:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::smart_ptr<core::T_O> (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:1502:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "void (core::Function_O::*)(gctools::smart_ptr<core::Symbol_O>)"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:3116:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::smart_ptr<core::Environment_O> (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicFunctoid<void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)>" :NAME "VariadicFunctoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_functoids.h:1464:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicFunctoid<void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "void (gctools::smart_ptr<core::Function_O>, gctools::smart_ptr<core::Symbol_O>)"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,_Bool (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:3116:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,_Bool (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (void)>" :NAME "VariadicFunctoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_functoids.h:759:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicFunctoid<gctools::smart_ptr<core::T_O> (void)>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::smart_ptr<core::T_O> (void)"))))) #S(CLASSALLOC :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const>" :NAME "VariadicMethoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_methoids.h:3116:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicMethoid<0,gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE NIL) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O> (core::Function_O::*)(void) const"))))) #S(CLASSALLOC :KEY "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)>" :NAME "VariadicFunctoid" :LOCATION "/Users/meister/Development/clasp/src/core/bin/mps-prep/clang-darwin-4.2.1/release/link-static/wrappers_functoids.h:2288:1" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::VariadicFunctoid<gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Function_O>)")))))))
template <> class gctools::GCKind<core::BuiltinClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__" :VALUE 66 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_" :VALUE 59 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::RuntimeVisibleEnvironment_O" :NAME "KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O" :VALUE 18 :CCLASS #S(CCLASS :KEY "core::RuntimeVisibleEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:270:5" :BASES ("core::LexicalEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_RuntimeEnvironment" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:275:9" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "currentVisibleEnvironment" "_findTag" "_findFunction" "_findValue" "runtimeEnvironment" "setRuntimeEnvironment" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::RuntimeVisibleEnvironment_O" :NAME "RuntimeVisibleEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:270:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RuntimeVisibleEnvironment_O" :NAME "RuntimeVisibleEnvironment_O")))
template <> class gctools::GCKind<core::RuntimeVisibleEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Bignum_O" :NAME "KIND_LISPALLOC_core__Bignum_O" :VALUE 19 :CCLASS #S(CCLASS :KEY "core::Bignum_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/bignum.h:29:5" :BASES ("core::Integer_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_value" :LOCATION "/Users/meister/Development/clasp/src/core/bignum.h:44:2" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "__gmp_expr<__mpz_[1],__mpz_[1]>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "(anonymous)" :NAME ""))) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "(anonymous)" :NAME ""))))))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "log1" "oddp" "evenp" "sxhash" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint64_string" "as_uint64" "as_int" "setFromString" "valueAsString" "eql" "eqn" "shift" "bit_length" "onePlus" "oneMinus" "minusp" "plusp" "zerop" "sign" "increment" "abs" "get_or_if_nil_default" "get" "set" "description" "copy" "decrement" "increment" "fits_sint_p" "__repr__" "ref" "number_type" "create" "create" "make" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Bignum_O" :NAME "Bignum_O" :LOCATION "/Users/meister/Development/clasp/src/core/bignum.h:29:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Bignum_O" :NAME "Bignum_O")))
template <> class gctools::GCKind<core::Bignum_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Bignum_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Package_O" :NAME "KIND_LISPALLOC_core__Package_O" :VALUE 20 :CCLASS #S(CCLASS :KEY "core::Package_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/package.h:22:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Nicknames" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:42:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_AmpPackage" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:41:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_KeywordPackage" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:40:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_PackagesUsedBy" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:39:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_UsingPackages" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:38:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_ShadowingSymbols" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:37:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :CORE:SPECIALIZER "class core::HashTableEqual_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ExternalSymbols" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:36:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :CORE:SPECIALIZER "class core::HashTableEql_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_InternalSymbols" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:35:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :CORE:SPECIALIZER "class core::HashTableEql_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Name" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:34:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))))))))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "mapInternals" "mapExternals" "hashTables" "dumpSymbols" "usingPackageP" "unusePackage" "usePackage" "shadowingSymbols" "shadowingImport" "import" "packageUsedByList" "packageUseList" "unintern" "intern" "findSymbol" "findSymbol" "findSymbolDirectlyContained" "_export" "isExported" "setName" "getName" "shadow" "shadow" "allSymbols" "isKeywordPackage" "setKeywordPackage" "getNicknames" "setNicknames" "packageHashTables" "packageName" "add_symbol_to_package" "create" "__repr__" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Package_O" :NAME "Package_O" :LOCATION "/Users/meister/Development/clasp/src/core/package.h:22:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Package_O" :NAME "Package_O")))
template <> class gctools::GCKind<core::Package_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Package_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Function_O" :NAME "KIND_LISPALLOC_core__Function_O" :VALUE 21 :CCLASS #S(CCLASS :KEY "core::Function_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:72:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "closure" :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:81:9" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::Closure" :NAME "Closure")))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "functionFile" "functionName" "closedEnvironment" "functionLambdaListHandler" "functionKind" "setKind" "macroP" "description" "__repr__" "make" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Function_O" :NAME "Function_O" :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:72:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Function_O" :NAME "Function_O")))
template <> class gctools::GCKind<core::Function_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Function_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::FunctionFrame_O" :NAME "KIND_LISPALLOC_core__FunctionFrame_O" :VALUE 22 :CCLASS #S(CCLASS :KEY "core::FunctionFrame_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:301:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Objects" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:307:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Frame0<gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_ParentFrame" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:306:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :CORE:SPECIALIZER "class core::ActivationFrame_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "_lookupFunction" "summaryOfContents" "asString" "entryReference" "entry" "set_entry" "boundp_entry" "length" "parentFrame" "parentFrameRef" "NO-NAME" "NO-NAME" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::FunctionFrame_O" :NAME "FunctionFrame_O" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:301:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::FunctionFrame_O" :NAME "FunctionFrame_O")))
template <> class gctools::GCKind<core::FunctionFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Float_O" :NAME "KIND_LISPALLOC_core__Float_O" :VALUE 23 :CCLASS #S(CCLASS :KEY "core::Float_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:334:5" :BASES ("core::Real_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "castToInteger" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Float_O" :NAME "Float_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:334:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Float_O" :NAME "Float_O")))
template <> class gctools::GCKind<core::Float_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Float_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SymbolToEnumConverter_O" :NAME "KIND_LISPALLOC_core__SymbolToEnumConverter_O" :VALUE 24 :CCLASS #S(CCLASS :KEY "core::SymbolToEnumConverter_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:19:1" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_SymbolToEnum" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:37:5" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_EnumToArchiveSymbol" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:36:5" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :CORE:SPECIALIZER "class core::HashTableEql_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ArchiveSymbolToEnum" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:35:5" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_EnumToSymbol" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:34:5" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :CORE:SPECIALIZER "class core::HashTableEql_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_WhatTheEnumsRepresent" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:33:5" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))))))))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "__repr__" "recognizesSymbol" "recognizesEnumIndex" "throwIfUnrecognizedEnumIndex" "legalEnumValuesAndSymbols" "symbolForEnumIndex" "enumIndexForSymbol" "addSymbolEnumPair" "setWhatTheEnumsRepresent" "initialize" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SymbolToEnumConverter_O" :NAME "SymbolToEnumConverter_O" :LOCATION "/Users/meister/Development/clasp/src/core/symbolToEnumConverter.h:19:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SymbolToEnumConverter_O" :NAME "SymbolToEnumConverter_O")))
template <> class gctools::GCKind<core::SymbolToEnumConverter_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolToEnumConverter_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Rational_O" :NAME "KIND_LISPALLOC_core__Rational_O" :VALUE 25 :CCLASS #S(CCLASS :KEY "core::Rational_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:150:5" :BASES ("core::Real_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "sqrt" "log1p" "log1" "as_int" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Rational_O" :NAME "Rational_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:150:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Rational_O" :NAME "Rational_O")))
template <> class gctools::GCKind<core::Rational_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Rational_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::UnwindProtectEnvironment_O" :NAME "KIND_LISPALLOC_core__UnwindProtectEnvironment_O" :VALUE 26 :CCLASS #S(CCLASS :KEY "core::UnwindProtectEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:528:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "find_unwindable_environment" "NO-NAME" "NO-NAME" "summaryOfContents" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::UnwindProtectEnvironment_O" :NAME "UnwindProtectEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:528:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::UnwindProtectEnvironment_O" :NAME "UnwindProtectEnvironment_O")))
template <> class gctools::GCKind<core::UnwindProtectEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__UnwindProtectEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::GlueEnvironment_O" :NAME "KIND_LISPALLOC_core__GlueEnvironment_O" :VALUE 27 :CCLASS #S(CCLASS :KEY "core::GlueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:862:5" :BASES ("core::Environment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Args" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:870:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Map" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:869:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "args" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::GlueEnvironment_O" :NAME "GlueEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:862:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::GlueEnvironment_O" :NAME "GlueEnvironment_O")))
template <> class gctools::GCKind<core::GlueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__GlueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::LongFloat_O" :NAME "KIND_LISPALLOC_core__LongFloat_O" :VALUE 28 :CCLASS #S(CCLASS :KEY "core::LongFloat_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:582:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:594:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "double"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "castToInteger" "as_long_float" "as_double" "as_float" "oneMinus" "onePlus" "sqrt" "reciprocal" "minusp" "plusp" "negate" "zerop" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "copy" "__repr__" "ref" "get" "sxhash" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::LongFloat_O" :NAME "LongFloat_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:582:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::LongFloat_O" :NAME "LongFloat_O")))
template <> class gctools::GCKind<core::LongFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__LongFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_" :VALUE 71 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_" :VALUE 70 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Ratio_O" :NAME "KIND_LISPALLOC_core__Ratio_O" :VALUE 29 :CCLASS #S(CCLASS :KEY "core::Ratio_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:759:5" :BASES ("core::Rational_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_denominator" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:772:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :CORE:SPECIALIZER "class core::Integer_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_numerator" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:771:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :CORE:SPECIALIZER "class core::Integer_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "minusp" "plusp" "as_long_float" "as_double" "as_float" "oneMinus" "onePlus" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "__repr__" "copy" "sxhash" "denominator_as_mpz" "numerator_as_mpz" "den" "num" "denominator" "numerator" "number_type" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Ratio_O" :NAME "Ratio_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:759:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Ratio_O" :NAME "Ratio_O")))
template <> class gctools::GCKind<core::Ratio_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Ratio_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Class_O" :NAME "KIND_BOOTSTRAP_core__Class_O" :VALUE 30 :CCLASS #S(CCLASS :KEY "core::Class_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/metaClass.h:45:3" :BASES ("core::Specializer_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_MetaClassSlots" :LOCATION "/Users/meister/Development/clasp/src/core/metaClass.h:112:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_creator" :LOCATION "/Users/meister/Development/clasp/src/core/metaClass.h:111:2" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::Creator" :NAME "Creator"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Signature_ClassSlots" :LOCATION "/Users/meister/Development/clasp/src/core/metaClass.h:109:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "primaryCxxDerivableClassP" "cxxDerivableClassP" "cxxClassP" "describe" "appendDirectSuperclassAndResetClassPrecedenceList" "directSuperclasses" "make_instance" "allocate_newNil" "__repr__" "addInstanceBaseClass" "addInstanceBaseClassDoNotCalculateClassPrecedenceList" "setInstanceBaseClasses" "isSubClassOf" "getPackageName" "dumpInfo" "getPackagedName" "instanceClassName" "instanceClassName" "classNameAsString" "className" "name" "setName" "hasCreator" "getCreator" "setCreator" "inheritDefaultAllocator" "slots" "instanceSig" "instanceSigSet" "instanceSet" "instanceRef" "instanceClassSet" "_instanceClass" "initializeSlots" "lowLevel_calculateClassPrecedenceList" "__setupStage3NameAndCalculateClassPrecedenceList" "__setup_stage2_with_classSymbol" "__setup_stage1_with_sharedPtr_lisp_sid" "allocateRawClass" "accumulateSuperClasses" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA (:METADATA_GC_DO_NOT_MOVE :METADATA_BOOTSTRAP_CLASS)) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::Class_O" :NAME "Class_O" :LOCATION "/Users/meister/Development/clasp/src/core/metaClass.h:45:3" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Class_O" :NAME "Class_O")))
template <> class gctools::GCKind<core::Class_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Class_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::MacroClosure" :NAME "KIND_CLASSALLOC_core__MacroClosure" :VALUE 80 :CCLASS #S(CCLASS :KEY "core::MacroClosure" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/wrappers.h:101:5" :BASES ("core::BuiltinClosure") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "mptr" :LOCATION "/Users/meister/Development/clasp/src/core/wrappers.h:104:2" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(UNCLASSIFIED-CTYPE :KEY "gctools::multiple_values<core::T_O> (gctools::smart_ptr<core::Cons_O>, gctools::smart_ptr<core::T_O>)")))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "invoke" "getKind" "templatedSizeof" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "describe") :METADATA NIL) :SPECIES #S(SPECIES :NAME :CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 6) :ALLOC #S(CLASSALLOC :KEY "core::MacroClosure" :NAME "MacroClosure" :LOCATION "/Users/meister/Development/clasp/src/core/wrappers.h:101:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::MacroClosure" :NAME "MacroClosure")))
template <> class gctools::GCKind<core::MacroClosure> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_CLASSALLOC_core__MacroClosure ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Symbol_O" :NAME "KIND_BOOTSTRAP_core__Symbol_O" :VALUE 31 :CCLASS #S(CCLASS :KEY "core::Symbol_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:29:5" :BASES ("core::T_O") :VBASES ("core::T_O") :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_PropertyList" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:41:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_ReadOnlyFunction" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:40:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_IsConstant" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:39:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_IsSpecial" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:38:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Function" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:37:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :CORE:SPECIALIZER "class core::Function_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:36:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_HomePackage" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:35:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Name" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:34:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Str_O>" :CORE:SPECIALIZER "class core::Str_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "finish_setup" "NO-NAME" "__str__" "__repr__" "dump" "exportYourself" "fullName" "currentName" "setPackage" "homePackage" "getPackage" "identifierName" "symbolName" "symbolNameAsString" "permanentName" "fboundp" "symbolFunction" "setf_symbolFunction" "isConstant" "setf_symbolValueReadOnlyOverRide" "setf_symbolValue" "defconstant" "defparameter" "makunbound" "boundP" "makeConstant" "makeSpecial" "symbolValueUnsafe" "symbolValue" "isExported" "copy_symbol" "specialP" "getReadOnlyFunction" "setReadOnlyFunction" "getReadOnly" "setReadOnly" "valueReference" "amp_symbol_p" "asKeywordSymbol" "isKeywordSymbol" "sxhash" "funcall" "apply" "formattedName" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA (:METADATA_GC_DO_NOT_MOVE :METADATA_BOOTSTRAP_CLASS)) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::Symbol_O" :NAME "Symbol_O" :LOCATION "/Users/meister/Development/clasp/src/core/symbol.h:29:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Symbol_O" :NAME "Symbol_O")))
template <> class gctools::GCKind<core::Symbol_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Symbol_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SourceManager_O" :NAME "KIND_LISPALLOC_core__SourceManager_O" :VALUE 33 :CCLASS #S(CCLASS :KEY "core::SourceManager_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:96:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_SourcePosInfo" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:108:9" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "lookupSourcePosInfo" "lookupSourceInfo" "duplicateSourceInfoForMacroExpansion" "duplicateSourceInfo" "searchForSourceInfoAndDuplicateIt" "registerSourceInfoFromStream" "registerSourceInfo" "availablep" "NO-NAME" "NO-NAME" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SourceManager_O" :NAME "SourceManager_O" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:96:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SourceManager_O" :NAME "SourceManager_O")))
template <> class gctools::GCKind<core::SourceManager_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourceManager_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SourcePosInfo_O" :NAME "KIND_LISPALLOC_core__SourcePosInfo_O" :VALUE 32 :CCLASS #S(CCLASS :KEY "core::SourcePosInfo_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:47:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Column" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:82:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned int")) #S(INSTANCE-VARIABLE :FIELD-NAME "_LineNumber" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:81:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned int")) #S(INSTANCE-VARIABLE :FIELD-NAME "_FileId" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:80:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned int"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "column" "lineNumber" "sourceFileInfo" "create" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SourcePosInfo_O" :NAME "SourcePosInfo_O" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:47:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SourcePosInfo_O" :NAME "SourcePosInfo_O")))
template <> class gctools::GCKind<core::SourcePosInfo_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourcePosInfo_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_" :VALUE 57 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Integer_O" :NAME "KIND_LISPALLOC_core__Integer_O" :VALUE 36 :CCLASS #S(CCLASS :KEY "core::Integer_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:181:5" :BASES ("core::Rational_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "__write__" "as_uint64" "shift" "bit_length" "oddp" "evenp" "createLongFloat" "create" "create" "create" "create" "create" "create" "create" "create" "create" "makeIntegerType" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Integer_O" :NAME "Integer_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:181:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Integer_O" :NAME "Integer_O")))
template <> class gctools::GCKind<core::Integer_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Integer_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Fixnum_O" :NAME "KIND_LISPALLOC_core__Fixnum_O" :VALUE 35 :CCLASS #S(CCLASS :KEY "core::Fixnum_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:227:5" :BASES ("core::Integer_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:250:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "int"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "sxhash" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint64" "as_int" "asChar" "shift" "bit_length" "setFromString" "valueAsString" "oneMinus" "onePlus" "eql" "eqn" "oddp" "evenp" "minusp" "plusp" "negate" "zerop" "signum" "abs" "get" "set" "__repr__" "copy" "ref" "number_type" "number_of_bits" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Fixnum_O" :NAME "Fixnum_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:227:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Fixnum_O" :NAME "Fixnum_O")))
template <> class gctools::GCKind<core::Fixnum_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Fixnum_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Number_O" :NAME "KIND_LISPALLOC_core__Number_O" :VALUE 34 :CCLASS #S(CCLASS :KEY "core::Number_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:57:5" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "sxhash" "tanh" "cosh" "sinh" "tan" "cos" "sin" "conjugate" "as_long_float" "as_double" "as_float" "as_LongLongInt" "as_mpz" "as_uint" "as_int" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "exp" "negate" "zerop" "oneMinus" "onePlus" "sqrt" "log1p" "log1" "equal" "ffloor" "floor" "abs" "reciprocal" "signum" "shallowCopy" "deepCopy" "copy" "valueAsString" "number_type_int" "number_type" "create" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Number_O" :NAME "Number_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:57:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Number_O" :NAME "Number_O")))
template <> class gctools::GCKind<core::Number_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Number_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_" :VALUE 73 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::ExceptionEntry>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_" :VALUE 61 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::CacheRecord>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::CacheRecord>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Metaobject_O" :NAME "KIND_BOOTSTRAP_core__Metaobject_O" :VALUE 37 :CCLASS #S(CCLASS :KEY "core::Metaobject_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/metaobject.h:24:1" :BASES ("core::StandardObject_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::Metaobject_O" :NAME "Metaobject_O" :LOCATION "/Users/meister/Development/clasp/src/core/metaobject.h:24:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Metaobject_O" :NAME "Metaobject_O")))
template <> class gctools::GCKind<core::Metaobject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__Metaobject_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::DoubleFloat_O" :NAME "KIND_LISPALLOC_core__DoubleFloat_O" :VALUE 38 :CCLASS #S(CCLASS :KEY "core::DoubleFloat_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:499:5" :BASES ("core::Float_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Value" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:511:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "double"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "castToInteger" "as_long_float" "as_double" "as_float" "log1p" "log1" "oneMinus" "onePlus" "sqrt" "minusp" "plusp" "negate" "zerop" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "get" "set" "__repr__" "copy" "sxhash" "number_type" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::DoubleFloat_O" :NAME "DoubleFloat_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:499:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DoubleFloat_O" :NAME "DoubleFloat_O")))
template <> class gctools::GCKind<core::DoubleFloat_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__DoubleFloat_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_" :VALUE 62 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::String_O" :NAME "KIND_LISPALLOC_core__String_O" :VALUE 39 :CCLASS #S(CCLASS :KEY "core::String_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/lispString.h:12:1" :BASES ("core::Vector_O") :VBASES ("core::T_O") :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::String_O" :NAME "String_O" :LOCATION "/Users/meister/Development/clasp/src/core/lispString.h:12:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::String_O" :NAME "String_O")))
template <> class gctools::GCKind<core::String_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__String_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::CandoException_O" :NAME "KIND_LISPALLOC_core__CandoException_O" :VALUE 40 :CCLASS #S(CCLASS :KEY "core::CandoException_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/conditions.h:22:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_message" :LOCATION "/Users/meister/Development/clasp/src/core/conditions.h:38:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCString<char,gctools::GCStringAllocator<gctools::GCString_moveable<char>>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCStringAllocator<gctools::GCString_moveable<char>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))))))))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "message" "setMessage" "create" "create" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::CandoException_O" :NAME "CandoException_O" :LOCATION "/Users/meister/Development/clasp/src/core/conditions.h:22:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CandoException_O" :NAME "CandoException_O")))
template <> class gctools::GCKind<core::CandoException_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CandoException_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::StandardObject_O" :NAME "KIND_BOOTSTRAP_core__StandardObject_O" :VALUE 41 :CCLASS #S(CCLASS :KEY "core::StandardObject_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/standardObject.h:23:1" :BASES ("core::T_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "__repr__" "create" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :BOOTSTRAP :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 0) :ALLOC #S(LISPALLOC :KEY "core::StandardObject_O" :NAME "StandardObject_O" :LOCATION "/Users/meister/Development/clasp/src/core/standardObject.h:23:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::StandardObject_O" :NAME "StandardObject_O")))
template <> class gctools::GCKind<core::StandardObject_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_BOOTSTRAP_core__StandardObject_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::ValueFrame_O" :NAME "KIND_LISPALLOC_core__ValueFrame_O" :VALUE 42 :CCLASS #S(CCLASS :KEY "core::ValueFrame_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:122:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_DebuggingInfo" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:130:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Objects" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:128:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Frame0<gctools::smart_ptr<core::T_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_ParentFrame" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:127:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :CORE:SPECIALIZER "class core::ActivationFrame_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "asString" "summaryOfContents" "fillRestOfEntries" "entry" "set_entry" "boundp_entry" "_findValue" "_updateValue" "lookupValueReference" "_lookupValue" "length" "argArray" "NO-NAME" "NO-NAME" "debuggingInfo" "attachDebuggingInfo" "parentFrame" "parentFrameRef" "NO-NAME" "NO-NAME" "createForLambdaListHandler" "createFromReversedCons" "create" "create" "create" "createForArgArray" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::ValueFrame_O" :NAME "ValueFrame_O" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:122:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ValueFrame_O" :NAME "ValueFrame_O")))
template <> class gctools::GCKind<core::ValueFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ValueFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_" :VALUE 72 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_" :VALUE 69 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::CompiledFunction_O" :NAME "KIND_LISPALLOC_core__CompiledFunction_O" :VALUE 43 :CCLASS #S(CCLASS :KEY "core::CompiledFunction_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:186:5" :BASES ("core::Function_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "make" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::CompiledFunction_O" :NAME "CompiledFunction_O" :LOCATION "/Users/meister/Development/clasp/src/core/executables.h:186:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CompiledFunction_O" :NAME "CompiledFunction_O")))
template <> class gctools::GCKind<core::CompiledFunction_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CompiledFunction_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::ValueEnvironment_O" :NAME "KIND_LISPALLOC_core__ValueEnvironment_O" :VALUE 44 :CCLASS #S(CCLASS :KEY "core::ValueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:321:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ActivationFrame" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:329:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :CORE:SPECIALIZER "class core::ActivationFrame_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_SymbolIndex" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:328:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "activationFrameElementBoundP" "getActivationFrame" "new_binding" "_updateValue" "lexicalSpecialP" "_findSymbolMacro" "_findValue" "defineSpecialBinding" "defineLexicalBinding" "allLocalNamesAsCons" "allLocalNames" "summaryOfContents" "_lookupValue" "setupForLambdaListHandler" "createForLocallySpecialEntries" "createForNumberOfEntries" "createForLambdaListHandler" "createSingleTopLevelEnvironment" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::ValueEnvironment_O" :NAME "ValueEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:321:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ValueEnvironment_O" :NAME "ValueEnvironment_O")))
template <> class gctools::GCKind<core::ValueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__ValueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__" :VALUE 65 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SymbolMacroletEnvironment_O" :NAME "KIND_LISPALLOC_core__SymbolMacroletEnvironment_O" :VALUE 45 :CCLASS #S(CCLASS :KEY "core::SymbolMacroletEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:806:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Macros" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:820:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "summaryOfContents" "throwErrorIfSymbolMacrosDeclaredSpecial" "_findSymbolMacro" "addSymbolMacro" "make" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SymbolMacroletEnvironment_O" :NAME "SymbolMacroletEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:806:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SymbolMacroletEnvironment_O" :NAME "SymbolMacroletEnvironment_O")))
template <> class gctools::GCKind<core::SymbolMacroletEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolMacroletEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::TagbodyFrame_O" :NAME "KIND_LISPALLOC_core__TagbodyFrame_O" :VALUE 46 :CCLASS #S(CCLASS :KEY "core::TagbodyFrame_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:415:5" :BASES ("core::ActivationFrame_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ParentFrame" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:420:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :CORE:SPECIALIZER "class core::ActivationFrame_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "asString" "NO-NAME" "NO-NAME" "_lookupTagbodyId" "summaryOfContents" "parentFrame" "parentFrameRef" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::TagbodyFrame_O" :NAME "TagbodyFrame_O" :LOCATION "/Users/meister/Development/clasp/src/core/activationFrame.h:415:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::TagbodyFrame_O" :NAME "TagbodyFrame_O")))
template <> class gctools::GCKind<core::TagbodyFrame_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__TagbodyFrame_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Complex_O" :NAME "KIND_LISPALLOC_core__Complex_O" :VALUE 47 :CCLASS #S(CCLASS :KEY "core::Complex_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:670:5" :BASES ("core::Number_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_imaginary" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:683:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Real_O>" :CORE:SPECIALIZER "class core::Real_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_real" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:682:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Real_O>" :CORE:SPECIALIZER "class core::Real_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "conjugate" "tanh" "cosh" "sinh" "tan" "cos" "sin" "exp" "sqrt" "oneMinus" "onePlus" "log1p" "log1" "negate" "zerop" "eql" "eqn" "setFromString" "valueAsString" "isnan" "abs" "signum" "__repr__" "copy" "sxhash" "imaginary" "real" "number_type" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Complex_O" :NAME "Complex_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:670:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Complex_O" :NAME "Complex_O")))
template <> class gctools::GCKind<core::Complex_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Complex_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Array_O" :NAME "KIND_LISPALLOC_core__Array_O" :VALUE 48 :CCLASS #S(CCLASS :KEY "core::Array_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/array.h:13:1" :BASES ("core::T_O") :VBASES ("core::T_O") :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "__repr__" "fillArrayWithElt" "arrayFill" "setf_svref" "svref" "setf_aref" "aref" "multiplyByScalar" "arrayDimensions" "arrayDimension" "element_type_as_symbol" "elementType" "index" "index_val" "index_vector_int" "rank" "setDimensions" "array_has_fill_pointer_p" "_displaced_array_p" "adjustable_array_p" "arrayRowMajorIndex" "rowMajorAref" "rowMajorAset" "arrayTotalSize" "arrayHasFillPointerP" "asetUnsafe" "equalp" "checkedIndex" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Array_O" :NAME "Array_O" :LOCATION "/Users/meister/Development/clasp/src/core/array.h:13:1" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Array_O" :NAME "Array_O")))
template <> class gctools::GCKind<core::Array_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Array_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Cons_O" :NAME "KIND_LISPALLOC_core__Cons_O" :VALUE 49 :CCLASS #S(CCLASS :KEY "core::Cons_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/cons.h:101:5" :BASES ("core::List_O") :VBASES ("core::T_O") :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Cdr" :LOCATION "/Users/meister/Development/clasp/src/core/cons.h:124:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Car" :LOCATION "/Users/meister/Development/clasp/src/core/cons.h:123:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "getf" "setf_subseq" "subseq" "booleanAnd" "booleanOr" "min" "max" "product" "column" "lineNumber" "sourceFileInfo" "getParsePosColumn" "getParsePosLineNumber" "getParsePos" "hasParsePos" "__write__" "__repr__" "exactlyMatches" "assoc" "member" "member1" "memberEql" "memberEq" "olookupKeyObjectDefault" "olookupKeyObject" "olistrefArgument" "olistref" "length" "copyTreeCar" "copyTree" "copyListCar" "copyList" "last" "setf_cdr" "setOCdr" "setCdr" "nreconc" "revappend" "nreverse" "reverse" "extend" "filterOutNil" "setf_nth" "functoid" "equalp" "equal" "setf_car" "setCar" "cddddr" "cdddr" "cddr" "cdr" "ocaddr" "ocadr" "ocar" "cdrPtr" "setf_elt" "elt" "onthcdr" "onth" "rplacd" "rplaca" "walkToFindParsePos" "sxhash" "append" "appendInto" "create" "create" "createList" "createList" "createList" "createList" "createList" "createList" "createList" "createList" "createFrom_va_list" "archiveBase" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Cons_O" :NAME "Cons_O" :LOCATION "/Users/meister/Development/clasp/src/core/cons.h:101:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O")))
template <> class gctools::GCKind<core::Cons_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Cons_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::TagbodyEnvironment_O" :NAME "KIND_LISPALLOC_core__TagbodyEnvironment_O" :VALUE 50 :CCLASS #S(CCLASS :KEY "core::TagbodyEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:693:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_ActivationFrame" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:709:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :CORE:SPECIALIZER "class core::ActivationFrame_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_TagCode" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:708:9" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Cons_O>>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O"))))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Tags" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:707:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "find_tagbody_tag_environment" "tagsAsString" "find" "addTag" "summaryOfContents" "_findTag" "codePos" "getActivationFrame" "make" "initialize" "NO-NAME" "NO-NAME" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::TagbodyEnvironment_O" :NAME "TagbodyEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:693:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::TagbodyEnvironment_O" :NAME "TagbodyEnvironment_O")))
template <> class gctools::GCKind<core::TagbodyEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__TagbodyEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_" :VALUE 68 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::DynamicBinding>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SymbolSet_O" :NAME "KIND_LISPALLOC_core__SymbolSet_O" :VALUE 51 :CCLASS #S(CCLASS :KEY "core::SymbolSet_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/symbolSet.h:40:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Symbols" :LOCATION "/Users/meister/Development/clasp/src/core/symbolSet.h:51:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :CORE:SPECIALIZER "class core::HashTableEq_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "map" "map" "NO-NAME" "__repr__" "dumpToStream" "asString" "cartesianProductWrapped" "cartesianProduct" "removeAll" "relativeComplement" "intersection" "setUnion" "equal" "asCons" "clear" "insertVector" "insertVectorStrings" "insertConsSymbols" "insertSymbolList" "insertSymbolSet" "insert" "containsSubset" "contains" "remove" "size" "copy" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SymbolSet_O" :NAME "SymbolSet_O" :LOCATION "/Users/meister/Development/clasp/src/core/symbolSet.h:40:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SymbolSet_O" :NAME "SymbolSet_O")))
template <> class gctools::GCKind<core::SymbolSet_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SymbolSet_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::SourceFileInfo_O" :NAME "KIND_LISPALLOC_core__SourceFileInfo_O" :VALUE 52 :CCLASS #S(CCLASS :KEY "core::SourceFileInfo_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:13:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_PermanentFileName" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:30:2" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(UNCLASSIFIED-CTYPE :KEY "char"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_PermanentPathName" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:29:2" :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(UNCLASSIFIED-CTYPE :KEY "char"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_pathname" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:27:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Pathname_O>" :CORE:SPECIALIZER "class core::Pathname_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "__repr__" "permanentFileName" "permanentPathName" "pathname" "namestring" "parentPathName" "fileName" "initialize" "NO-NAME" "NO-NAME" "create" "create" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::SourceFileInfo_O" :NAME "SourceFileInfo_O" :LOCATION "/Users/meister/Development/clasp/src/core/sourceFileInfo.h:13:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::SourceFileInfo_O" :NAME "SourceFileInfo_O")))
template <> class gctools::GCKind<core::SourceFileInfo_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__SourceFileInfo_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_" :VALUE 58 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::FunctionValueEnvironment_O" :NAME "KIND_LISPALLOC_core__FunctionValueEnvironment_O" :VALUE 53 :CCLASS #S(CCLASS :KEY "core::FunctionValueEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:422:5" :BASES ("core::RuntimeVisibleEnvironment_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_FunctionFrame" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:435:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FunctionFrame_O>" :CORE:SPECIALIZER "class core::FunctionFrame_O")) #S(INSTANCE-VARIABLE :FIELD-NAME "_FunctionIndices" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:434:2" :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :CORE:SPECIALIZER "class core::HashTableEqual_O"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "_findFunction" "bind_function" "summaryOfContents" "getActivationFrame" "createForEntries" "createEmpty" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::FunctionValueEnvironment_O" :NAME "FunctionValueEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:422:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::FunctionValueEnvironment_O" :NAME "FunctionValueEnvironment_O")))
template <> class gctools::GCKind<core::FunctionValueEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__FunctionValueEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Real_O" :NAME "KIND_LISPALLOC_core__Real_O" :VALUE 54 :CCLASS #S(CCLASS :KEY "core::Real_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:131:5" :BASES ("core::Number_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "conjugate" "minusp" "plusp" "as_double" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Real_O" :NAME "Real_O" :LOCATION "/Users/meister/Development/clasp/src/core/numbers.h:131:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Real_O" :NAME "Real_O")))
template <> class gctools::GCKind<core::Real_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Real_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_" :VALUE 60 :CCLASS #S(CCLASS :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:22:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_End" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:21:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:20:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "capacity" "size" "data" "NO-NAME" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCVECTOR :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 3) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument"))))))
template <> class gctools::GCKind<gctools::GCVector_moveable<core::KeywordArgument>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::CatchEnvironment_O" :NAME "KIND_LISPALLOC_core__CatchEnvironment_O" :VALUE 55 :CCLASS #S(CCLASS :KEY "core::CatchEnvironment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:624:5" :BASES ("core::CompileTimeEnvironment_O") :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "summaryOfContents" "make" "initialize" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::CatchEnvironment_O" :NAME "CatchEnvironment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:624:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CatchEnvironment_O" :NAME "CatchEnvironment_O")))
template <> class gctools::GCKind<core::CatchEnvironment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__CatchEnvironment_O ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_" :VALUE 63 :CCLASS #S(CCLASS :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :TEMPLATE-SPECIALIZER COMMON-LISP:T :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :BASES ("gctools::GCContainer") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_Data" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:29:9" :CTYPE #S(CONSTANT-ARRAY-CTYPE :KEY NIL :ELEMENT-TYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O"))) #S(INSTANCE-VARIABLE :FIELD-NAME "_Alive" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:28:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "_Bool")) #S(INSTANCE-VARIABLE :FIELD-NAME "_Capacity" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:27:9" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned long"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "end" "begin" "end" "begin" "NO-NAME" "NO-NAME" "data" "capacity" "NO-NAME" "NO-NAME") :METADATA NIL) :SPECIES #S(SPECIES :NAME :GCARRAY :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-GCCONTAINER :SKIP SKIPPER-FOR-GCCONTAINER :FINALIZE FINALIZER-FOR-GCCONTAINER :CORE:INDEX 4) :ALLOC #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL)))))
template <> class gctools::GCKind<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_ ;
};
//GCKind for #S(SIMPLE-ENUM :KEY "core::Environment_O" :NAME "KIND_LISPALLOC_core__Environment_O" :VALUE 56 :CCLASS #S(CCLASS :KEY "core::Environment_O" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:29:5" :BASES ("core::T_O") :VBASES NIL :FIELDS (#S(INSTANCE-VARIABLE :FIELD-NAME "_EnvId" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:35:2" :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "unsigned int"))) :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "countFunctionContainerEnvironments" "findTag" "_findTag" "getBlockSymbolFrame" "recognizesBlockSymbol" "find_current_code_environment" "find_unwindable_environment" "find_block_named_environment" "find_tagbody_tag_environment" "__repr__" "lookupSymbolMacro" "classifyTag" "classifyFunctionLookup" "_updateValue" "classifyLookup" "findSymbolMacro" "_findSymbolMacro" "findMacro" "_findMacro" "findFunction" "_findFunction" "currentVisibleEnvironment" "findValue" "_findValue" "environmentStackAsString" "_lookupTagbodyId" "_lookupFunction" "_lookupValue" "classifyValue" "getActivationFrame" "_environmentStackFill" "summaryOfContents" "lookupMetadata" "localMetadata" "push_metadata" "gather_metadata" "setf_metadata" "lexicalSpecialP" "runtimeEnvironment" "setRuntimeEnvironment" "getParentEnvironment" "setupParent" "catchEnvironmentP" "unwindProtectEnvironmentP" "functionContainerEnvironmentP" "lexicalEnvironmentP" "setEnvironmentId" "environmentId" "clasp_summaryOfContents" "clasp_gather_metadata" "clasp_environmentStackFill" "clasp_lookupTagbodyId" "clasp_lookupFunction" "clasp_lookupValue" "clasp_lexicalSpecialP" "clasp_findMacro" "clasp_findSymbolMacro" "clasp_findTag" "clasp_findFunction" "clasp_findValue" "clasp_countFunctionContainerEnvironments" "clasp_getActivationFrame" "clasp_currentVisibleEnvironment" "create" "exposePython" "exposeCando" "Pkg" "Package" "__class" "virtual_classSymbol" "static_classSymbol" "static_className" "static_packageName" "___set_static_creator" "___set_static_ClassSymbol" "asSmartPtr" "asSmartPtr") :METADATA NIL) :SPECIES #S(SPECIES :NAME :LISPALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-LISPALLOCS :SKIP SKIPPER-FOR-LISPALLOCS :FINALIZE FINALIZER-FOR-LISPALLOCS :CORE:INDEX 1) :ALLOC #S(LISPALLOC :KEY "core::Environment_O" :NAME "Environment_O" :LOCATION "/Users/meister/Development/clasp/src/core/environment.h:29:5" :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Environment_O" :NAME "Environment_O")))
template <> class gctools::GCKind<core::Environment_O> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_LISPALLOC_core__Environment_O ;
};
//GCTemplatedKind for #S(TEMPLATED-ENUM :KEY "core::Creator" :NAME "KIND_TEMPLATED_CLASSALLOC_core__Creator" :VALUE 79 :CCLASS #S(CCLASS :KEY "core::Creator" :TEMPLATE-SPECIALIZER NIL :LOCATION "/Users/meister/Development/clasp/src/core/foundation.h:916:5" :BASES NIL :VBASES NIL :FIELDS NIL :METHOD-NAMES ("NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "NO-NAME" "allocate" "describe" "duplicateForClassName" "templatedSizeof" "duplicationLevel" "allocates") :METADATA (:METADATA_ALWAYS_FIX_POINTERS_TO_DERIVED_CLASSES)) :SPECIES #S(SPECIES :NAME :TEMPLATED-CLASSALLOC :PREPROCESSOR-GUARD NIL :DISCRIMINATOR #<COMMON-LISP:COMPILED-FUNCTION COMMON-LISP:LAMBDA> :SCAN SCANNER-FOR-TEMPLATED-LISPALLOCS :SKIP SKIPPER-FOR-TEMPLATED-LISPALLOCS :FINALIZE FINALIZER-FOR-TEMPLATED-LISPALLOCS :CORE:INDEX 8) :ALL-ALLOCS (#S(CLASSALLOC :KEY "core::LispObjectCreator<core::CompiledFunction_O>" :NAME "LispObjectCreator" :LOCATION "/Users/meister/Development/clasp/src/core/object.h:796:5" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::LispObjectCreator<core::CompiledFunction_O>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CompiledFunction_O" :NAME "CompiledFunction_O"))))) #S(CLASSALLOC :KEY "core::LispObjectCreator<core::Function_O>" :NAME "LispObjectCreator" :LOCATION "/Users/meister/Development/clasp/src/core/object.h:796:5" :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "core::LispObjectCreator<core::Function_O>" :NAME NIL :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::Function_O" :NAME "Function_O")))))))
template <> class gctools::GCKind<core::Creator> {
public:
  static gctools::GCKindEnum const Kind = gctools::KIND_TEMPLATED_CLASSALLOC_core__Creator ;
};
#endif // defined(GC_KIND_SELECTORS)
#if defined(GC_OBJ_SCAN)
case KIND_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    typedef core::Iterator_O type_KIND_LISPALLOC_core__Iterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Iterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ElementType);
    POINTER_FIX(obj_gc_safe->_Values._Vector._Contents);
    typedef core::VectorObjects_O type_KIND_LISPALLOC_core__VectorObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__List_O: {
    core::List_O* obj_gc_safe = reinterpret_cast<core::List_O*>(client);
    typedef core::List_O type_KIND_LISPALLOC_core__List_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__List_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_Macros);
    typedef core::MacroletEnvironment_O type_KIND_LISPALLOC_core__MacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    POINTER_FIX(obj_gc_safe->_Contents._Contents);
    typedef core::Str_O type_KIND_BOOTSTRAP_core__Str_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Str_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::FunctionContainerEnvironment_O type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    core::Specializer_O* obj_gc_safe = reinterpret_cast<core::Specializer_O*>(client);
    typedef core::Specializer_O type_KIND_BOOTSTRAP_core__Specializer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Specializer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_RehashSize);
    SMART_PTR_FIX(obj_gc_safe->_HashTable);
    typedef core::HashTableEq_O type_KIND_LISPALLOC_core__HashTableEq_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEq_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    typedef core::ShortFloat_O type_KIND_LISPALLOC_core__ShortFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ShortFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    core::SingleFloat_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_O*>(client);
    typedef core::SingleFloat_O type_KIND_LISPALLOC_core__SingleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::CompileTimeEnvironment_O type_KIND_LISPALLOC_core__CompileTimeEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompileTimeEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    typedef core::Pointer_O type_KIND_LISPALLOC_core__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    core::Vector_O* obj_gc_safe = reinterpret_cast<core::Vector_O*>(client);
    typedef core::Vector_O type_KIND_LISPALLOC_core__Vector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Vector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Sequence_O: {
    core::Sequence_O* obj_gc_safe = reinterpret_cast<core::Sequence_O*>(client);
    typedef core::Sequence_O type_KIND_LISPALLOC_core__Sequence_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Sequence_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_LambdaList);
    SMART_PTR_FIX(obj_gc_safe->_ClassifiedSymbolList);
    SMART_PTR_FIX(obj_gc_safe->_SpecialSymbolSet);
    SMART_PTR_FIX(obj_gc_safe->_DeclareSpecifierList);
    POINTER_FIX(obj_gc_safe->_RequiredArguments._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_OptionalArguments._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_RestArgument._ArgTarget);
    POINTER_FIX(obj_gc_safe->_KeywordArguments._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_AllowOtherKeys);
    POINTER_FIX(obj_gc_safe->_AuxArguments._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_Comment._Contents);
    SMART_PTR_FIX(obj_gc_safe->_LexicalVariableNamesForDebugging);
    typedef core::LambdaListHandler_O type_KIND_LISPALLOC_core__LambdaListHandler_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LambdaListHandler_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_BlockSymbol);
    typedef core::BlockEnvironment_O type_KIND_LISPALLOC_core__BlockEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BlockEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::LexicalEnvironment_O type_KIND_LISPALLOC_core__LexicalEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LexicalEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    typedef core::RuntimeVisibleEnvironment_O type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    typedef core::Bignum_O type_KIND_LISPALLOC_core__Bignum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Bignum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    POINTER_FIX(obj_gc_safe->_Name._Contents);
    SMART_PTR_FIX(obj_gc_safe->_InternalSymbols);
    SMART_PTR_FIX(obj_gc_safe->_ExternalSymbols);
    SMART_PTR_FIX(obj_gc_safe->_ShadowingSymbols);
    POINTER_FIX(obj_gc_safe->_UsingPackages._Vector._Contents);
    POINTER_FIX(obj_gc_safe->_PackagesUsedBy._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_Nicknames);
    typedef core::Package_O type_KIND_LISPALLOC_core__Package_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Package_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    typedef core::Function_O type_KIND_LISPALLOC_core__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    POINTER_FIX(obj_gc_safe->_Objects._Array._Contents);
    typedef core::FunctionFrame_O type_KIND_LISPALLOC_core__FunctionFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Float_O: {
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    typedef core::Float_O type_KIND_LISPALLOC_core__Float_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Float_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    POINTER_FIX(obj_gc_safe->_WhatTheEnumsRepresent._Contents);
    SMART_PTR_FIX(obj_gc_safe->_EnumToSymbol);
    SMART_PTR_FIX(obj_gc_safe->_ArchiveSymbolToEnum);
    SMART_PTR_FIX(obj_gc_safe->_EnumToArchiveSymbol);
    SMART_PTR_FIX(obj_gc_safe->_SymbolToEnum);
    typedef core::SymbolToEnumConverter_O type_KIND_LISPALLOC_core__SymbolToEnumConverter_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolToEnumConverter_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    typedef core::Rational_O type_KIND_LISPALLOC_core__Rational_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Rational_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::UnwindProtectEnvironment_O type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Map);
    SMART_PTR_FIX(obj_gc_safe->_Args);
    typedef core::GlueEnvironment_O type_KIND_LISPALLOC_core__GlueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__GlueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LongFloat_O: {
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    typedef core::LongFloat_O type_KIND_LISPALLOC_core__LongFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LongFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_numerator);
    SMART_PTR_FIX(obj_gc_safe->_denominator);
    typedef core::Ratio_O type_KIND_LISPALLOC_core__Ratio_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Ratio_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Signature_ClassSlots);
    POINTER_FIX(obj_gc_safe->_creator);
    POINTER_FIX(obj_gc_safe->_MetaClassSlots._Vector._Contents);
    typedef core::Class_O type_KIND_BOOTSTRAP_core__Class_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Class_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Name);
    SMART_PTR_FIX(obj_gc_safe->_HomePackage);
    SMART_PTR_FIX(obj_gc_safe->_Value);
    SMART_PTR_FIX(obj_gc_safe->_Function);
    SMART_PTR_FIX(obj_gc_safe->_PropertyList);
    typedef core::Symbol_O type_KIND_BOOTSTRAP_core__Symbol_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Symbol_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    typedef core::SourcePosInfo_O type_KIND_LISPALLOC_core__SourcePosInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourcePosInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    typedef core::SourceManager_O type_KIND_LISPALLOC_core__SourceManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Number_O: {
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    typedef core::Number_O type_KIND_LISPALLOC_core__Number_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Number_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    core::Fixnum_O* obj_gc_safe = reinterpret_cast<core::Fixnum_O*>(client);
    typedef core::Fixnum_O type_KIND_LISPALLOC_core__Fixnum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Fixnum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    typedef core::Integer_O type_KIND_LISPALLOC_core__Integer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Integer_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    core::Metaobject_O* obj_gc_safe = reinterpret_cast<core::Metaobject_O*>(client);
    typedef core::Metaobject_O type_KIND_BOOTSTRAP_core__Metaobject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Metaobject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    typedef core::DoubleFloat_O type_KIND_LISPALLOC_core__DoubleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DoubleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__String_O: {
    core::String_O* obj_gc_safe = reinterpret_cast<core::String_O*>(client);
    typedef core::String_O type_KIND_LISPALLOC_core__String_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__String_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    POINTER_FIX(obj_gc_safe->_message._Contents);
    typedef core::CandoException_O type_KIND_LISPALLOC_core__CandoException_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CandoException_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    core::StandardObject_O* obj_gc_safe = reinterpret_cast<core::StandardObject_O*>(client);
    typedef core::StandardObject_O type_KIND_BOOTSTRAP_core__StandardObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    POINTER_FIX(obj_gc_safe->_Objects._Array._Contents);
    SMART_PTR_FIX(obj_gc_safe->_DebuggingInfo);
    typedef core::ValueFrame_O type_KIND_LISPALLOC_core__ValueFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    POINTER_FIX(obj_gc_safe->closure);
    typedef core::CompiledFunction_O type_KIND_LISPALLOC_core__CompiledFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompiledFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SymbolIndex);
    SMART_PTR_FIX(obj_gc_safe->_ActivationFrame);
    typedef core::ValueEnvironment_O type_KIND_LISPALLOC_core__ValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_Macros);
    typedef core::SymbolMacroletEnvironment_O type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentFrame);
    typedef core::TagbodyFrame_O type_KIND_LISPALLOC_core__TagbodyFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_real);
    SMART_PTR_FIX(obj_gc_safe->_imaginary);
    typedef core::Complex_O type_KIND_LISPALLOC_core__Complex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Complex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Array_O: {
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    typedef core::Array_O type_KIND_LISPALLOC_core__Array_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Array_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Car);
    SMART_PTR_FIX(obj_gc_safe->_Cdr);
    typedef core::Cons_O type_KIND_LISPALLOC_core__Cons_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Cons_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Tags);
    POINTER_FIX(obj_gc_safe->_TagCode._Vector._Contents);
    SMART_PTR_FIX(obj_gc_safe->_ActivationFrame);
    typedef core::TagbodyEnvironment_O type_KIND_LISPALLOC_core__TagbodyEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_Symbols);
    typedef core::SymbolSet_O type_KIND_LISPALLOC_core__SymbolSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_pathname);
    typedef core::SourceFileInfo_O type_KIND_LISPALLOC_core__SourceFileInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceFileInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    SMART_PTR_FIX(obj_gc_safe->_RuntimeEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_FunctionIndices);
    SMART_PTR_FIX(obj_gc_safe->_FunctionFrame);
    typedef core::FunctionValueEnvironment_O type_KIND_LISPALLOC_core__FunctionValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Real_O: {
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    typedef core::Real_O type_KIND_LISPALLOC_core__Real_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Real_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    SMART_PTR_FIX(obj_gc_safe->_ParentEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_Metadata);
    typedef core::CatchEnvironment_O type_KIND_LISPALLOC_core__CatchEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CatchEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    typedef core::Environment_O type_KIND_LISPALLOC_core__Environment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Environment_O)) + global_alignup_sizeof_header;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    gctools::GCVector_moveable<core::KeywordArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::KeywordArgument>*>(client);
    for (gctools::GCVector_moveable<core::KeywordArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Default);
    SMART_PTR_FIX(it->_Keyword);
    SMART_PTR_FIX(it->_Sensor._ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::KeywordArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    gctools::GCVector_moveable<core::CacheRecord>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::CacheRecord>*>(client);
    for (gctools::GCVector_moveable<core::CacheRecord>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    SMART_PTR_FIX(it->_key);
    SMART_PTR_FIX(it->_value);
    }
    typedef typename gctools::GCVector_moveable<core::CacheRecord> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))
    gctools::GCVector_moveable<core::SequenceStepper *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SequenceStepper *>*>(client);
    for (gctools::GCVector_moveable<core::SequenceStepper *>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))
          POINTER_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<core::SequenceStepper *> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    gctools::GCVector_moveable<core::AuxArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::AuxArgument>*>(client);
    for (gctools::GCVector_moveable<core::AuxArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Expression);
    }
    typedef typename gctools::GCVector_moveable<core::AuxArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    gctools::GCVector_moveable<core::DynamicBinding>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::DynamicBinding>*>(client);
    for (gctools::GCVector_moveable<core::DynamicBinding>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    SMART_PTR_FIX(it->_Var);
    SMART_PTR_FIX(it->_Val);
    }
    typedef typename gctools::GCVector_moveable<core::DynamicBinding> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>*>(client);
    for (gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    gctools::GCVector_moveable<core::ExceptionEntry>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::ExceptionEntry>*>(client);
    for (gctools::GCVector_moveable<core::ExceptionEntry>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    SMART_PTR_FIX(it->_Key);
    }
    typedef typename gctools::GCVector_moveable<core::ExceptionEntry> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*>(client);
    for (gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
          SMART_PTR_FIX(*it);
    }
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    gctools::GCString_moveable<char>* obj_gc_safe = reinterpret_cast<gctools::GCString_moveable<char>*>(client);
    typedef typename gctools::GCString_moveable<char> type_KIND_GCSTRING_gctools__GCString_moveable_char_;
    size_t header_and_gcstring_size = AlignUp(sizeof_container<type_KIND_GCSTRING_gctools__GCString_moveable_char_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + Align(header_and_gcstring_size);
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    gctools::GCVector_moveable<core::RequiredArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::RequiredArgument>*>(client);
    for (gctools::GCVector_moveable<core::RequiredArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::RequiredArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    gctools::GCVector_moveable<core::OptionalArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::OptionalArgument>*>(client);
    for (gctools::GCVector_moveable<core::OptionalArgument>::iterator it = obj_gc_safe->begin(); it!=obj_gc_safe->end(); ++it) {
        // A scanner for #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    SMART_PTR_FIX(it->_ArgTarget);
    SMART_PTR_FIX(it->_Default);
    SMART_PTR_FIX(it->_Sensor._ArgTarget);
    }
    typedef typename gctools::GCVector_moveable<core::OptionalArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    typedef core::BuiltinClosure type_KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    typedef core::Creator type_KIND_TEMPLATED_CLASSALLOC_core__Creator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    SMART_PTR_FIX(obj_gc_safe->name);
    SMART_PTR_FIX(obj_gc_safe->closedEnvironment);
    SMART_PTR_FIX(obj_gc_safe->_SourcePosInfo);
    SMART_PTR_FIX(obj_gc_safe->kind);
    SMART_PTR_FIX(obj_gc_safe->_lambdaListHandler);
    typedef core::MacroClosure type_KIND_CLASSALLOC_core__MacroClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__MacroClosure)) + global_alignup_sizeof_header;
} break;
#endif // defined(GC_OBJ_SCAN)
#if defined(GC_OBJ_SKIP)
case KIND_LISPALLOC_core__Iterator_O: {
    typedef core::Iterator_O type_KIND_LISPALLOC_core__Iterator_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Iterator_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    typedef core::VectorObjects_O type_KIND_LISPALLOC_core__VectorObjects_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__VectorObjects_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__List_O: {
    typedef core::List_O type_KIND_LISPALLOC_core__List_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__List_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    typedef core::MacroletEnvironment_O type_KIND_LISPALLOC_core__MacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__MacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    typedef core::Str_O type_KIND_BOOTSTRAP_core__Str_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Str_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    typedef core::FunctionContainerEnvironment_O type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionContainerEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    typedef core::Specializer_O type_KIND_BOOTSTRAP_core__Specializer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Specializer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    typedef core::HashTableEq_O type_KIND_LISPALLOC_core__HashTableEq_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__HashTableEq_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    typedef core::ShortFloat_O type_KIND_LISPALLOC_core__ShortFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ShortFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    typedef core::SingleFloat_O type_KIND_LISPALLOC_core__SingleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SingleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    typedef core::CompileTimeEnvironment_O type_KIND_LISPALLOC_core__CompileTimeEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompileTimeEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    typedef core::Pointer_O type_KIND_LISPALLOC_core__Pointer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Pointer_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    typedef core::Vector_O type_KIND_LISPALLOC_core__Vector_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Vector_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Sequence_O: {
    typedef core::Sequence_O type_KIND_LISPALLOC_core__Sequence_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Sequence_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    typedef core::LambdaListHandler_O type_KIND_LISPALLOC_core__LambdaListHandler_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LambdaListHandler_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    typedef core::BlockEnvironment_O type_KIND_LISPALLOC_core__BlockEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__BlockEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    typedef core::LexicalEnvironment_O type_KIND_LISPALLOC_core__LexicalEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LexicalEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    typedef core::RuntimeVisibleEnvironment_O type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    typedef core::Bignum_O type_KIND_LISPALLOC_core__Bignum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Bignum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Package_O: {
    typedef core::Package_O type_KIND_LISPALLOC_core__Package_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Package_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Function_O: {
    typedef core::Function_O type_KIND_LISPALLOC_core__Function_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Function_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    typedef core::FunctionFrame_O type_KIND_LISPALLOC_core__FunctionFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Float_O: {
    typedef core::Float_O type_KIND_LISPALLOC_core__Float_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Float_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    typedef core::SymbolToEnumConverter_O type_KIND_LISPALLOC_core__SymbolToEnumConverter_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolToEnumConverter_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    typedef core::Rational_O type_KIND_LISPALLOC_core__Rational_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Rational_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    typedef core::UnwindProtectEnvironment_O type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__UnwindProtectEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    typedef core::GlueEnvironment_O type_KIND_LISPALLOC_core__GlueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__GlueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__LongFloat_O: {
    typedef core::LongFloat_O type_KIND_LISPALLOC_core__LongFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__LongFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    typedef core::Ratio_O type_KIND_LISPALLOC_core__Ratio_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Ratio_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    typedef core::Class_O type_KIND_BOOTSTRAP_core__Class_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Class_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    typedef core::Symbol_O type_KIND_BOOTSTRAP_core__Symbol_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Symbol_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    typedef core::SourcePosInfo_O type_KIND_LISPALLOC_core__SourcePosInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourcePosInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    typedef core::SourceManager_O type_KIND_LISPALLOC_core__SourceManager_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceManager_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Number_O: {
    typedef core::Number_O type_KIND_LISPALLOC_core__Number_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Number_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    typedef core::Fixnum_O type_KIND_LISPALLOC_core__Fixnum_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Fixnum_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    typedef core::Integer_O type_KIND_LISPALLOC_core__Integer_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Integer_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    typedef core::Metaobject_O type_KIND_BOOTSTRAP_core__Metaobject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__Metaobject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    typedef core::DoubleFloat_O type_KIND_LISPALLOC_core__DoubleFloat_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__DoubleFloat_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__String_O: {
    typedef core::String_O type_KIND_LISPALLOC_core__String_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__String_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    typedef core::CandoException_O type_KIND_LISPALLOC_core__CandoException_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CandoException_O)) + global_alignup_sizeof_header;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    typedef core::StandardObject_O type_KIND_BOOTSTRAP_core__StandardObject_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_BOOTSTRAP_core__StandardObject_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    typedef core::ValueFrame_O type_KIND_LISPALLOC_core__ValueFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    typedef core::CompiledFunction_O type_KIND_LISPALLOC_core__CompiledFunction_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CompiledFunction_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    typedef core::ValueEnvironment_O type_KIND_LISPALLOC_core__ValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__ValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    typedef core::SymbolMacroletEnvironment_O type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolMacroletEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    typedef core::TagbodyFrame_O type_KIND_LISPALLOC_core__TagbodyFrame_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyFrame_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    typedef core::Complex_O type_KIND_LISPALLOC_core__Complex_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Complex_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Array_O: {
    typedef core::Array_O type_KIND_LISPALLOC_core__Array_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Array_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    typedef core::Cons_O type_KIND_LISPALLOC_core__Cons_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Cons_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    typedef core::TagbodyEnvironment_O type_KIND_LISPALLOC_core__TagbodyEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__TagbodyEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    typedef core::SymbolSet_O type_KIND_LISPALLOC_core__SymbolSet_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SymbolSet_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    typedef core::SourceFileInfo_O type_KIND_LISPALLOC_core__SourceFileInfo_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__SourceFileInfo_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    typedef core::FunctionValueEnvironment_O type_KIND_LISPALLOC_core__FunctionValueEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__FunctionValueEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Real_O: {
    typedef core::Real_O type_KIND_LISPALLOC_core__Real_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Real_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    typedef core::CatchEnvironment_O type_KIND_LISPALLOC_core__CatchEnvironment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__CatchEnvironment_O)) + global_alignup_sizeof_header;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    typedef core::Environment_O type_KIND_LISPALLOC_core__Environment_O;
    client = (char*)client + AlignUp(sizeof(type_KIND_LISPALLOC_core__Environment_O)) + global_alignup_sizeof_header;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    gctools::GCVector_moveable<core::KeywordArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::KeywordArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::KeywordArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    gctools::GCVector_moveable<core::CacheRecord>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::CacheRecord>*>(client);
    typedef typename gctools::GCVector_moveable<core::CacheRecord> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))
    gctools::GCVector_moveable<core::SequenceStepper *>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::SequenceStepper *>*>(client);
    typedef typename gctools::GCVector_moveable<core::SequenceStepper *> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    gctools::GCVector_moveable<core::AuxArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::AuxArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::AuxArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    gctools::GCVector_moveable<core::DynamicBinding>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::DynamicBinding>*>(client);
    typedef typename gctools::GCVector_moveable<core::DynamicBinding> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>* obj_gc_safe = reinterpret_cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>*>(client);
    typedef typename gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1> type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    gctools::GCVector_moveable<core::ExceptionEntry>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::ExceptionEntry>*>(client);
    typedef typename gctools::GCVector_moveable<core::ExceptionEntry> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*>(client);
    typedef typename gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    gctools::GCString_moveable<char>* obj_gc_safe = reinterpret_cast<gctools::GCString_moveable<char>*>(client);
    typedef typename gctools::GCString_moveable<char> type_KIND_GCSTRING_gctools__GCString_moveable_char_;
    size_t header_and_gcstring_size = AlignUp(sizeof_container<type_KIND_GCSTRING_gctools__GCString_moveable_char_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + Align(header_and_gcstring_size);
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    gctools::GCVector_moveable<core::RequiredArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::RequiredArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::RequiredArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    gctools::GCVector_moveable<core::OptionalArgument>* obj_gc_safe = reinterpret_cast<gctools::GCVector_moveable<core::OptionalArgument>*>(client);
    typedef typename gctools::GCVector_moveable<core::OptionalArgument> type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_;
    size_t header_and_gccontainer_size = AlignUp(sizeof_container<type_KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_>(obj_gc_safe->capacity()))+AlignUp(sizeof(gctools::Header_s));
    client = (char*)client + header_and_gccontainer_size;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    typedef core::BuiltinClosure type_KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    typedef core::Creator type_KIND_TEMPLATED_CLASSALLOC_core__Creator;
    client = (char*)client + AlignUp(obj_gc_safe->templatedSizeof()) + global_alignup_sizeof_header;
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    typedef core::MacroClosure type_KIND_CLASSALLOC_core__MacroClosure;
    client = (char*)client + AlignUp(sizeof(type_KIND_CLASSALLOC_core__MacroClosure)) + global_alignup_sizeof_header;
} break;
#endif // defined(GC_OBJ_SKIP)
#if defined(GC_OBJ_FINALIZE)
case KIND_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    obj_gc_safe->~VectorObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__List_O: {
    core::List_O* obj_gc_safe = reinterpret_cast<core::List_O*>(client);
    obj_gc_safe->~List_O();
    return;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    obj_gc_safe->~Str_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    core::Specializer_O* obj_gc_safe = reinterpret_cast<core::Specializer_O*>(client);
    obj_gc_safe->~Specializer_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    return;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    core::SingleFloat_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_O*>(client);
    obj_gc_safe->~SingleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    core::Vector_O* obj_gc_safe = reinterpret_cast<core::Vector_O*>(client);
    obj_gc_safe->~Vector_O();
    return;
} break;
case KIND_LISPALLOC_core__Sequence_O: {
    core::Sequence_O* obj_gc_safe = reinterpret_cast<core::Sequence_O*>(client);
    obj_gc_safe->~Sequence_O();
    return;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    return;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    return;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    return;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__Float_O: {
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    return;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    return;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LongFloat_O: {
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    obj_gc_safe->~LongFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    obj_gc_safe->~Class_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    return;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    obj_gc_safe->~SourceManager_O();
    return;
} break;
case KIND_LISPALLOC_core__Number_O: {
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    return;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    core::Fixnum_O* obj_gc_safe = reinterpret_cast<core::Fixnum_O*>(client);
    obj_gc_safe->~Fixnum_O();
    return;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    core::Metaobject_O* obj_gc_safe = reinterpret_cast<core::Metaobject_O*>(client);
    obj_gc_safe->~Metaobject_O();
    return;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__String_O: {
    core::String_O* obj_gc_safe = reinterpret_cast<core::String_O*>(client);
    obj_gc_safe->~String_O();
    return;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    obj_gc_safe->~CandoException_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    core::StandardObject_O* obj_gc_safe = reinterpret_cast<core::StandardObject_O*>(client);
    obj_gc_safe->~StandardObject_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    obj_gc_safe->~CompiledFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    obj_gc_safe->~TagbodyFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    return;
} break;
case KIND_LISPALLOC_core__Array_O: {
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    return;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    obj_gc_safe->~SymbolSet_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    obj_gc_safe->~SourceFileInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Real_O: {
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    return;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    return;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SequenceStepper *>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::DynamicBinding>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::ExceptionEntry>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    THROW_HARD_ERROR(BF("Should never finalize gcstrings gctools::GCString_moveable<char>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    obj_gc_safe->~BuiltinClosure();
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    obj_gc_safe->~Creator();
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    obj_gc_safe->~MacroClosure();
    return;
} break;
#endif // defined(GC_OBJ_FINALIZE)
#if defined(GC_OBJ_USES_FINALIZE)
case KIND_LISPALLOC_core__Iterator_O: {
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
    return;
} break;
case KIND_LISPALLOC_core__VectorObjects_O: {
    core::VectorObjects_O* obj_gc_safe = reinterpret_cast<core::VectorObjects_O*>(client);
    obj_gc_safe->~VectorObjects_O();
    return;
} break;
case KIND_LISPALLOC_core__List_O: {
    core::List_O* obj_gc_safe = reinterpret_cast<core::List_O*>(client);
    obj_gc_safe->~List_O();
    return;
} break;
case KIND_LISPALLOC_core__MacroletEnvironment_O: {
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Str_O: {
    core::Str_O* obj_gc_safe = reinterpret_cast<core::Str_O*>(client);
    obj_gc_safe->~Str_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionContainerEnvironment_O: {
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Specializer_O: {
    core::Specializer_O* obj_gc_safe = reinterpret_cast<core::Specializer_O*>(client);
    obj_gc_safe->~Specializer_O();
    return;
} break;
case KIND_LISPALLOC_core__HashTableEq_O: {
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    return;
} break;
case KIND_LISPALLOC_core__ShortFloat_O: {
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__SingleFloat_O: {
    core::SingleFloat_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_O*>(client);
    obj_gc_safe->~SingleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__CompileTimeEnvironment_O: {
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Pointer_O: {
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    return;
} break;
case KIND_LISPALLOC_core__Vector_O: {
    core::Vector_O* obj_gc_safe = reinterpret_cast<core::Vector_O*>(client);
    obj_gc_safe->~Vector_O();
    return;
} break;
case KIND_LISPALLOC_core__Sequence_O: {
    core::Sequence_O* obj_gc_safe = reinterpret_cast<core::Sequence_O*>(client);
    obj_gc_safe->~Sequence_O();
    return;
} break;
case KIND_LISPALLOC_core__LambdaListHandler_O: {
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    return;
} break;
case KIND_LISPALLOC_core__BlockEnvironment_O: {
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LexicalEnvironment_O: {
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__RuntimeVisibleEnvironment_O: {
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Bignum_O: {
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    return;
} break;
case KIND_LISPALLOC_core__Package_O: {
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    return;
} break;
case KIND_LISPALLOC_core__Function_O: {
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionFrame_O: {
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__Float_O: {
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolToEnumConverter_O: {
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    return;
} break;
case KIND_LISPALLOC_core__Rational_O: {
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    return;
} break;
case KIND_LISPALLOC_core__UnwindProtectEnvironment_O: {
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__GlueEnvironment_O: {
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__LongFloat_O: {
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    obj_gc_safe->~LongFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__Ratio_O: {
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Class_O: {
    core::Class_O* obj_gc_safe = reinterpret_cast<core::Class_O*>(client);
    obj_gc_safe->~Class_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Symbol_O: {
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    return;
} break;
case KIND_LISPALLOC_core__SourcePosInfo_O: {
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceManager_O: {
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    obj_gc_safe->~SourceManager_O();
    return;
} break;
case KIND_LISPALLOC_core__Number_O: {
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    return;
} break;
case KIND_LISPALLOC_core__Fixnum_O: {
    core::Fixnum_O* obj_gc_safe = reinterpret_cast<core::Fixnum_O*>(client);
    obj_gc_safe->~Fixnum_O();
    return;
} break;
case KIND_LISPALLOC_core__Integer_O: {
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    return;
} break;
case KIND_BOOTSTRAP_core__Metaobject_O: {
    core::Metaobject_O* obj_gc_safe = reinterpret_cast<core::Metaobject_O*>(client);
    obj_gc_safe->~Metaobject_O();
    return;
} break;
case KIND_LISPALLOC_core__DoubleFloat_O: {
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    return;
} break;
case KIND_LISPALLOC_core__String_O: {
    core::String_O* obj_gc_safe = reinterpret_cast<core::String_O*>(client);
    obj_gc_safe->~String_O();
    return;
} break;
case KIND_LISPALLOC_core__CandoException_O: {
    core::CandoException_O* obj_gc_safe = reinterpret_cast<core::CandoException_O*>(client);
    obj_gc_safe->~CandoException_O();
    return;
} break;
case KIND_BOOTSTRAP_core__StandardObject_O: {
    core::StandardObject_O* obj_gc_safe = reinterpret_cast<core::StandardObject_O*>(client);
    obj_gc_safe->~StandardObject_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueFrame_O: {
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__CompiledFunction_O: {
    core::CompiledFunction_O* obj_gc_safe = reinterpret_cast<core::CompiledFunction_O*>(client);
    obj_gc_safe->~CompiledFunction_O();
    return;
} break;
case KIND_LISPALLOC_core__ValueEnvironment_O: {
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolMacroletEnvironment_O: {
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyFrame_O: {
    core::TagbodyFrame_O* obj_gc_safe = reinterpret_cast<core::TagbodyFrame_O*>(client);
    obj_gc_safe->~TagbodyFrame_O();
    return;
} break;
case KIND_LISPALLOC_core__Complex_O: {
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    return;
} break;
case KIND_LISPALLOC_core__Array_O: {
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    return;
} break;
case KIND_LISPALLOC_core__Cons_O: {
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    return;
} break;
case KIND_LISPALLOC_core__TagbodyEnvironment_O: {
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__SymbolSet_O: {
    core::SymbolSet_O* obj_gc_safe = reinterpret_cast<core::SymbolSet_O*>(client);
    obj_gc_safe->~SymbolSet_O();
    return;
} break;
case KIND_LISPALLOC_core__SourceFileInfo_O: {
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    obj_gc_safe->~SourceFileInfo_O();
    return;
} break;
case KIND_LISPALLOC_core__FunctionValueEnvironment_O: {
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Real_O: {
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    return;
} break;
case KIND_LISPALLOC_core__CatchEnvironment_O: {
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    return;
} break;
case KIND_LISPALLOC_core__Environment_O: {
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    return;
} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__6_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,6>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__4_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,4>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__5_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,5>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__KeywordArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__CacheRecord_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__2_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,2>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__3_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,3>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__SequenceStepper_P_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SequenceStepper *>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))))))
// parm0-ctype = #S(POINTER-CTYPE :KEY NIL :POINTEE #S(CXXRECORD-CTYPE :KEY "core::SequenceStepper" :NAME "SequenceStepper"))
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SequenceStepper *>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :CORE:SPECIALIZER "class core::Cons_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :CORE:SPECIALIZER "class core::Package_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__AuxArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__DynamicBinding_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::DynamicBinding>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::DynamicBinding" :NAME "DynamicBinding")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::DynamicBinding>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__8_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,8>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__7_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,7>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__0_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,0>"));} break;
case KIND_GCARRAY_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__1_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcarray.h:7:5" :CTYPE #S(GCARRAY-MOVEABLE-CTYPE :KEY "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>" :NAME "GCArray_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 1 :CTYPE NIL))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>,1>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__ExceptionEntry_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::ExceptionEntry>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::ExceptionEntry" :NAME "ExceptionEntry")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::ExceptionEntry>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")))))
// parm0-ctype = #S(SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :CORE:SPECIALIZER "class core::T_O")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));} break;
case KIND_GCSTRING_gctools__GCString_moveable_char_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcstring.h:14:5" :CTYPE #S(GCSTRING-MOVEABLE-CTYPE :KEY "gctools::GCString_moveable<char>" :NAME "GCString_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(UNCLASSIFIED-CTYPE :KEY "char")))))
// parm0-ctype = #S(UNCLASSIFIED-CTYPE :KEY "char")
    THROW_HARD_ERROR(BF("Should never finalize gcstrings gctools::GCString_moveable<char>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__RequiredArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));} break;
case KIND_GCVECTOR_gctools__GCVector_moveable_core__OptionalArgument_: {
// processing #S(CONTAINERALLOC :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :LOCATION "/Users/meister/Development/clasp/src/gctools/gcvector.h:8:5" :CTYPE #S(GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CORE:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")))))
// parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument")
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));} break;
case KIND_TEMPLATED_CLASSALLOC_core__BuiltinClosure: {
    core::BuiltinClosure* obj_gc_safe = reinterpret_cast<core::BuiltinClosure*>(client);
    obj_gc_safe->~BuiltinClosure();
} break;
case KIND_TEMPLATED_CLASSALLOC_core__Creator: {
    core::Creator* obj_gc_safe = reinterpret_cast<core::Creator*>(client);
    obj_gc_safe->~Creator();
} break;
case KIND_CLASSALLOC_core__MacroClosure: {
    core::MacroClosure* obj_gc_safe = reinterpret_cast<core::MacroClosure*>(client);
    obj_gc_safe->~MacroClosure();
    return;
} break;
#endif // defined(GC_OBJ_USES_FINALIZE)
#if defined(GC_GLOBALS)
 POINTER_FIX(core::Function_O::static_creator);
 SMART_PTR_FIX(core::CompiledFunction_O::___staticClass);
 POINTER_FIX(core::CompiledFunction_O::static_creator);
 SMART_PTR_FIX(core::Function_O::___staticClassSymbol);
 SMART_PTR_FIX(core::CompiledFunction_O::___staticClassSymbol);
 SMART_PTR_FIX(core::Function_O::___staticClass);
#endif // defined(GC_GLOBALS)
