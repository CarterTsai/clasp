
CL:T 
CORE>>> (compile-file "test.lsp")
Anonymous:0 About to start with-compilation-unit
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name UNDEFINED-BASIC_BLOCK!  >
Anonymous:0 with-dbg-compile-unit *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-compile-unit source-pathname: #P"/Users/meister/Development/cando/clasp/src/main/test.lsp"
Anonymous:0 with-dbg-compile-unit file-name: [test]
Anonymous:0 with-dbg-compile-unit dir-name: [/Users/meister/Development/cando/clasp/src/main/]
Anonymous:0 with-dbg-file-descriptor file-name: [test]
Anonymous:0 with-dbg-file-descriptor dir-name: [/Users/meister/Development/cando/clasp/src/main/]
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 0
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (COMPILER::IRC-INTRINSIC "makeNil" COMPILER::LTV-REF)
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 1
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (COMPILER::IRC-INTRINSIC "makeT" COMPILER::LTV-REF)
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 t1expr-> (CL:DEFUN TEST-DEBUG CL:NIL (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0 t1expr-> (CL:PROGN (FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))) CL:NIL 'TEST-DEBUG)
Anonymous:0 t1expr-> (FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")))
Anonymous:0 t1expr-> (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl >
Anonymous:0 with-dbg-function *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-function *dbg-current-function*: #<LLVM-SYS:DISUBPROGRAM @0x7fcbab866090) > 
Anonymous:0 with-dbg-function name: [repl]
Anonymous:0 with-dbg-function linkage-name: [repl]
Anonymous:0 with-dbg-lexical-block
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Creating repl function with name: repl
Anonymous:0 codegen stack-used[433368 bytes]
Anonymous:0 codegen evaluate-depth[101]  (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 About to codegen special-operator or application for: (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 About to codegen-application: (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 dbg-set-current-source-pos on form: (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 dbg-set-current-source-pos to test.lsp:2 for (*FSET 'TEST-DEBUG #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")) CL:NIL)
Anonymous:0 irc-alloca-tsp label:  for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 codegen stack-used[525144 bytes]
Anonymous:0 codegen evaluate-depth[123]  'TEST-DEBUG
Anonymous:0 About to codegen special-operator or application for: 'TEST-DEBUG
Anonymous:0 About to codegen-special-operator: CL:QUOTE (TEST-DEBUG)
Anonymous:0 entered codegen-special-operator head: CL:QUOTE rest: (TEST-DEBUG)
Anonymous:0 About to set source pos
Anonymous:0 dbg-set-current-source-pos on form: (TEST-DEBUG)
Anonymous:0 dbg-set-current-source-pos to no-file:0 for (TEST-DEBUG)
Anonymous:0 dbg-set-current-source-pos IGNORING
Anonymous:0 About to do case on head: CL:QUOTE
Anonymous:0 codegen-quote: (TEST-DEBUG)
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 2
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::SN (CL:SYMBOL-NAME CL:SYMBOL)) (COMPILER::SYM-PKG (CL:SYMBOL-PACKAGE CL:SYMBOL)) (COMPILER::SN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::SN (BFORMAT CL:NIL ":::symbol-name-%s" COMPILER::SN))) (COMPILER::SN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::SN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "sn"))) (CL:IF COMPILER::SYM-PKG (CL:LET* ((COMPILER::PN (CL:PACKAGE-NAME (CL:SYMBOL-PACKAGE CL:SYMBOL))) (COMPILER::PN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::PN (BFORMAT CL:NIL ":::package-name-%s" COMPILER::PN))) (COMPILER::PN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::PN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "pn"))) (COMPILER::IRC-INTRINSIC "internSymbol_tsp" COMPILER::LTV-TEMP COMPILER::SN-VALUE-PTR COMPILER::PN-VALUE-PTR)) (COMPILER::IRC-INTRINSIC "makeSymbol_tsp" COMPILER::LTV-TEMP COMPILER::SN-VALUE-PTR)))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 codegen stack-used[525144 bytes]
Anonymous:0 codegen evaluate-depth[123]  #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0 About to codegen special-operator or application for: #'(EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0 About to codegen-special-operator: CL:FUNCTION ((EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")))
Anonymous:0 entered codegen-special-operator head: CL:FUNCTION rest: ((EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")))
Anonymous:0 About to set source pos
Anonymous:0 dbg-set-current-source-pos on form: ((EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")))
Anonymous:0 dbg-set-current-source-pos to no-file:0 for ((EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done")))
Anonymous:0 dbg-set-current-source-pos IGNORING
Anonymous:0 About to do case on head: CL:FUNCTION
Anonymous:0 About to codegen-function for: (EXT:LAMBDA-BLOCK TEST-DEBUG CL:NIL (CL:DECLARE (C-GLOBAL)) (CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0 About to create lambda-list-handler
Anonymous:0 About to compile-lambda/lambda-block for lambda-list-handler: #<LAMBDA-LIST-HANDLER :ClassifiedSymbols UNDEFINED  :comment ""> 
Anonymous:0          compile-lambda/lambda-block code: ((CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0       compile-lambda/lambda-block env-around-lambda: --------------------------- FUNCTION-CONTAINER-ENVIRONMENT :id     0 -----
      ----Metadata follows ---
      :EXCEPTION-HANDLER-CLEANUP-BLOCK --> #<LLVM-SYS::BASIC-BLOCK 
func-ehcleanup:                                   ; Error: Block without parent!
>
      :FUNCTION --> #<LLVM-SYS::FUNCTION 
define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}* }, i32 3
  %gep = getelementptr inbounds { {}* }* %0, i32 0
  call void @newTsp({ {}* }* %gep)
  %gep1 = getelementptr inbounds { {}* }* %0, i32 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds { {}* }* %0, i32 2
  call void @newTsp({ {}* }* %gep2)
  br label %body

body:                                             ; preds = %entry
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  %arg-0 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %arg-0, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %arg-1 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
}
>
      :EXCEPTION-HANDLER-RESUME-BLOCK --> #<LLVM-SYS::BASIC-BLOCK 
func-ehresume:                                    ; Error: Block without parent!
>
      :TERMINATE-LANDING-PAD-BLOCK --> #<LLVM-SYS::BASIC-BLOCK 
func-terminate-lpad:                              ; Error: Block without parent!
>
      :CLEANUP-RETURN-BLOCK --> #<LLVM-SYS::BASIC-BLOCK 
func-cleanup-return-block:                        ; Error: Block without parent!
>
      :CLEANUP-LANDING-PAD-BLOCK --> #<LLVM-SYS::BASIC-BLOCK 
func-cleanup-landing-pad:                         ; Error: Block without parent!
>
      :CLEANUP --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}* }, i32 3>))
      :EXN.SLOT --> #<LLVM-SYS::ALLOCA-INST   %exn.slot = alloca i8*>
      :EHSELECTOR.SLOT --> #<LLVM-SYS::ALLOCA-INST   %ehselector.slot = alloca i32>
      -----Metadata done ----
       ]

Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function TEST-DEBUG >
Anonymous:0 with-dbg-function *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-function *dbg-current-function*: #<LLVM-SYS:DISUBPROGRAM @0x7fcbabbef7d0) > 
Anonymous:0 with-dbg-function name: [TEST-DEBUG]
Anonymous:0 with-dbg-function linkage-name: [TEST-DEBUG]
Anonymous:0 with-dbg-lexical-block
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 irc-alloca-afsp label: lambda-args-1- for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 compile-arguments closed-over-renv: #<LLVM-SYS::ARGUMENT { {}* }* %closed-af-ptr>
Anonymous:0 Returning non-nil renv
Anonymous:0 Returning non-nil renv
Anonymous:0 Returning non-nil renv
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: error1
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: continue
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: continue3
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 Returning non-nil renv
Anonymous:0 irc-alloca-tsp label: array-element-type for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 3
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::SN (CL:SYMBOL-NAME CL:SYMBOL)) (COMPILER::SYM-PKG (CL:SYMBOL-PACKAGE CL:SYMBOL)) (COMPILER::SN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::SN (BFORMAT CL:NIL ":::symbol-name-%s" COMPILER::SN))) (COMPILER::SN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::SN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "sn"))) (CL:IF COMPILER::SYM-PKG (CL:LET* ((COMPILER::PN (CL:PACKAGE-NAME (CL:SYMBOL-PACKAGE CL:SYMBOL))) (COMPILER::PN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::PN (BFORMAT CL:NIL ":::package-name-%s" COMPILER::PN))) (COMPILER::PN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::PN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "pn"))) (COMPILER::IRC-INTRINSIC "internSymbol_tsp" COMPILER::LTV-TEMP COMPILER::SN-VALUE-PTR COMPILER::PN-VALUE-PTR)) (COMPILER::IRC-INTRINSIC "makeSymbol_tsp" COMPILER::LTV-TEMP COMPILER::SN-VALUE-PTR)))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 ====>> In TRY0 --> parent-cleanup-block: #<LLVM-SYS::BASIC-BLOCK 
func-ehcleanup:                                   ; Error: Block without parent!
>
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to (TRY-0).landing-pad
Anonymous:0 with-dbg-lexical-block
Anonymous:0 ====>> In TRY0 --> parent-cleanup-block: #<LLVM-SYS::BASIC-BLOCK 
"(TRY-0).dispatch-header":                        ; Error: Block without parent!
>
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to (TRY-0).landing-pad
Anonymous:0 Returning non-nil renv
Anonymous:0 About to codegen-progn with forms: ((CL:PRINT "About to test debug") (CL:DEBUG "testing debug") (CL:PRINT "Done"))
Anonymous:0 irc-alloca-tsp label: temp for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 codegen stack-used[883640 bytes]
Anonymous:0 codegen evaluate-depth[209]  (CL:PRINT "About to test debug")
Anonymous:0 About to codegen special-operator or application for: (CL:PRINT "About to test debug")
Anonymous:0 About to codegen-application: (CL:PRINT "About to test debug")
Anonymous:0 dbg-set-current-source-pos on form: (CL:PRINT "About to test debug")
Anonymous:0 dbg-set-current-source-pos to test.lsp:2 for (CL:PRINT "About to test debug")
Anonymous:0 irc-alloca-tsp label:  for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 codegen stack-used[975416 bytes]
Anonymous:0 codegen evaluate-depth[231]  About to test debug
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 5
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::CONSTANT (LLVM-SYS:MAKE-STRING-GLOBAL COMPILER::*THE-MODULE* COMPILER::STR)) (COMPILER::PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::CONSTANT (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "ptr"))) (COMPILER::IRC-INTRINSIC "makeString" COMPILER::LTV-REF COMPILER::PTR))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 irc-alloca-Function_sp label: func for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 0
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::SN (CL:SYMBOL-NAME CL:SYMBOL)) (COMPILER::SYM-PKG (CL:SYMBOL-PACKAGE CL:SYMBOL)) (COMPILER::SN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::SN (BFORMAT CL:NIL ":::symbol-name-%s" COMPILER::SN))) (COMPILER::SN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::SN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "sn"))) (CL:IF COMPILER::SYM-PKG (CL:LET* ((COMPILER::PN (CL:PACKAGE-NAME (CL:SYMBOL-PACKAGE CL:SYMBOL))) (COMPILER::PN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::PN (BFORMAT CL:NIL ":::package-name-%s" COMPILER::PN))) (COMPILER::PN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::PN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "pn"))) (COMPILER::IRC-INTRINSIC "internSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR COMPILER::PN-VALUE-PTR)) (COMPILER::IRC-INTRINSIC "makeSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR)))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).top5
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 codegen stack-used[883640 bytes]
Anonymous:0 codegen evaluate-depth[209]  (CL:DEBUG "testing debug")
Anonymous:0 About to codegen special-operator or application for: (CL:DEBUG "testing debug")
Anonymous:0 About to codegen-application: (CL:DEBUG "testing debug")
Anonymous:0 dbg-set-current-source-pos on form: (CL:DEBUG "testing debug")
Anonymous:0 dbg-set-current-source-pos to test.lsp:3 for (CL:DEBUG "testing debug")
Anonymous:0 irc-alloca-tsp label:  for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 codegen stack-used[975416 bytes]
Anonymous:0 codegen evaluate-depth[231]  testing debug
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 6
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::CONSTANT (LLVM-SYS:MAKE-STRING-GLOBAL COMPILER::*THE-MODULE* COMPILER::STR)) (COMPILER::PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::CONSTANT (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "ptr"))) (COMPILER::IRC-INTRINSIC "makeString" COMPILER::LTV-REF COMPILER::PTR))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 irc-alloca-Function_sp label: func for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 1
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::SN (CL:SYMBOL-NAME CL:SYMBOL)) (COMPILER::SYM-PKG (CL:SYMBOL-PACKAGE CL:SYMBOL)) (COMPILER::SN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::SN (BFORMAT CL:NIL ":::symbol-name-%s" COMPILER::SN))) (COMPILER::SN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::SN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "sn"))) (CL:IF COMPILER::SYM-PKG (CL:LET* ((COMPILER::PN (CL:PACKAGE-NAME (CL:SYMBOL-PACKAGE CL:SYMBOL))) (COMPILER::PN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::PN (BFORMAT CL:NIL ":::package-name-%s" COMPILER::PN))) (COMPILER::PN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::PN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "pn"))) (COMPILER::IRC-INTRINSIC "internSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR COMPILER::PN-VALUE-PTR)) (COMPILER::IRC-INTRINSIC "makeSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR)))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest6
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest10
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 codegen stack-used[883640 bytes]
Anonymous:0 codegen evaluate-depth[209]  (CL:PRINT "Done")
Anonymous:0 About to codegen special-operator or application for: (CL:PRINT "Done")
Anonymous:0 About to codegen-application: (CL:PRINT "Done")
Anonymous:0 dbg-set-current-source-pos on form: (CL:PRINT "Done")
Anonymous:0 dbg-set-current-source-pos to test.lsp:4 for (CL:PRINT "Done")
Anonymous:0 irc-alloca-tsp label:  for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 codegen stack-used[975416 bytes]
Anonymous:0 codegen evaluate-depth[231]  Done
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 7
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::CONSTANT (LLVM-SYS:MAKE-STRING-GLOBAL COMPILER::*THE-MODULE* COMPILER::STR)) (COMPILER::PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::CONSTANT (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "ptr"))) (COMPILER::IRC-INTRINSIC "makeString" COMPILER::LTV-REF COMPILER::PTR))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 irc-alloca-Function_sp label: func for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function TEST-DEBUG >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 0
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest11
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest16
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to (TRY-0).landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).handler-block7485
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: (TRY-0).normal-dest18
Anonymous:0             Unwind dest: (TRY-0).landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func14 = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %2 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func9 = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %1 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %temp = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %lambda-args-1- = alloca { {}* }>))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func14 = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %2 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func9 = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %1 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %temp = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %lambda-args-1- = alloca { {}* }>))
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}* }, i32 3
  %gep = getelementptr inbounds { {}* }* %0, i32 0
  call void @newTsp({ {}* }* %gep)
  %gep1 = getelementptr inbounds { {}* }* %0, i32 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds { {}* }* %0, i32 2
  call void @newTsp({ {}* }* %gep2)
  br label %body

body:                                             ; preds = %entry
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  %arg-0 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %arg-0, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %arg-1 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %lambda-args-1- = alloca { {}* }
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }
  %gep = getelementptr inbounds { {}* }* %0, i32 0
  call void @newTsp({ {}* }* %gep)
  %func = alloca { i32* }
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }
  %gep7 = getelementptr inbounds { {}* }* %1, i32 0
  call void @newTsp({ {}* }* %gep7)
  %func9 = alloca { i32* }
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }
  %gep12 = getelementptr inbounds { {}* }* %2, i32 0
  call void @newTsp({ {}* }* %gep12)
  %func14 = alloca { i32* }
  call void @newFunction_sp({ i32* }* %func14)
  br label %body

body:                                             ; preds = %entry
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp ne i32 %num-varargs, 0
  br i1 %correct-num-args, label %error, label %continue3

error:                                            ; preds = %body
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i32 0, i32 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i32 0, i32 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %body
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 %num-varargs, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  br label %"(TRY-0).top"

"(TRY-0).top":                                    ; preds = %normal-dest4
  br label %"(TRY-0).block-TEST-DEBUG-start"

"(TRY-0).block-TEST-DEBUG-start":                 ; preds = %"(TRY-0).top"
  br label %"(TRY-0).top5"

"(TRY-0).top5":                                   ; preds = %"(TRY-0).block-TEST-DEBUG-start"
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  %arg-0 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %arg-0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %"(TRY-0).top5"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  %arg-08 = getelementptr inbounds { {}* }* %1, i32 0, !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %arg-08, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  %arg-013 = getelementptr inbounds { {}* }* %2, i32 0, !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %arg-013, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).normal-dest17" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest17":                          ; preds = %"(TRY-0).normal-dest16"
  br label %"(TRY-0).normal-cleanup", !dbg !21

"(TRY-0).normal-cleanup":                         ; preds = %"(TRY-0).normal-dest17"
  br label %"(TRY-0).try-cont", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %"(TRY-0).top5"
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, !dbg !21
  br label %"(TRY-0).dispatch-header", !dbg !21

"(TRY-0).dispatch-header":                        ; preds = %"(TRY-0).landing-pad"
  br label %"(TRY-0).dispatch-TYPEID-CORE-RETURN-FROM-7481", !dbg !21

"(TRY-0).dispatch-TYPEID-CORE-RETURN-FROM-7481":  ; preds = %"(TRY-0).dispatch-header"
  %ehselector-slot = load i32* %ehselector.slot, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %ehselector-slot, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %"(TRY-0).dispatch-header22", !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).dispatch-TYPEID-CORE-RETURN-FROM-7481"
  %exn = load i8** %exn.slot, !dbg !21
  %8 = call i8* @__cxa_begin_catch(i8* %exn), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).normal-dest19" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest19":                          ; preds = %"(TRY-0).normal-dest18"
  br label %"(TRY-0).try-cont", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest19", %"(TRY-0).normal-cleanup"
  br label %"(TRY-0).normal-cleanup20", !dbg !21

"(TRY-0).normal-cleanup20":                       ; preds = %"(TRY-0).try-cont"
  br label %"(TRY-0).try-cont23", !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, !dbg !21
  br label %"(TRY-0).dispatch-header22", !dbg !21

"(TRY-0).dispatch-header22":                      ; preds = %"(TRY-0).landing-pad21", %"(TRY-0).dispatch-TYPEID-CORE-RETURN-FROM-7481"
  br label %func-ehcleanup, !dbg !21

"(TRY-0).try-cont23":                             ; preds = %"(TRY-0).normal-cleanup20"
  br label %return-block, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad, %"(TRY-0).dispatch-header22"
  %gep24 = getelementptr inbounds { {}* }* %2, i32 0, !dbg !21
  %gep25 = getelementptr inbounds { {}* }* %1, i32 0, !dbg !21
  %gep26 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !21
  br label %func-ehresume, !dbg !21

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot, !dbg !21
  %sel = load i32* %ehselector.slot, !dbg !21
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21

func-terminate-lpad:                              ; No predecessors!
  %15 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null, !dbg !21
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 2, i32 3, i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i32 0, i32 0)), !dbg !21
  call void @unreachableError(), !dbg !21
  unreachable, !dbg !21

return-block:                                     ; preds = %"(TRY-0).try-cont23"
  %gep27 = getelementptr inbounds { {}* }* %2, i32 0, !dbg !21
  %gep28 = getelementptr inbounds { {}* }* %1, i32 0, !dbg !21
  %gep29 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !21
  ret void, !dbg !21
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function TEST-DEBUG >

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !7
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !7

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !7

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !16
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !16
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !16
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !16

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !16

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !17
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !17
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !17
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !17

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !17

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !17
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !17
  store i8* %4, i8** %exn.slot, align 8, !dbg !17
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !17
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !17
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !17
  %7 = icmp eq i32 %5, %6, !dbg !17
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !17

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !17
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !17

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !17

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !17

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !17
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !17
  store i8* %10, i8** %exn.slot, align 8, !dbg !17
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !17
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !17
  br label %func-ehcleanup, !dbg !17

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !17
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !17
  store i8* %13, i8** %exn.slot, align 8, !dbg !17
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !17
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !17
  br label %func-ehcleanup, !dbg !17

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !17
  call void @debugPrintI32(i32 90), !dbg !17
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !17
  call void @debugPrintI32(i32 91), !dbg !17
  resume { i8*, i32 } %lpad.val8, !dbg !17
}

Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}* }, i32 3
  %gep = getelementptr inbounds { {}* }* %0, i32 0
  call void @newTsp({ {}* }* %gep)
  %gep1 = getelementptr inbounds { {}* }* %0, i32 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds { {}* }* %0, i32 2
  call void @newTsp({ {}* }* %gep2)
  br label %body

body:                                             ; preds = %entry
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  %arg-0 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %arg-0, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %arg-1 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 0
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 2
Anonymous:0 Returning nil renv: #<LLVM-SYS::CALL-INST   %1 = call { {}* }* @activationFrameNil(), !dbg !7>
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: body
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 codegen stack-used[525144 bytes]
Anonymous:0 codegen evaluate-depth[123]  CL:NIL
Anonymous:0 About to codegen-var-lookup for CL:NIL - classified as: (EXT:SPECIAL-VAR)
Anonymous:0 About to codegen-special-var-lookup symbol[CL:NIL]
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 0
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 irc-alloca-Function_sp label: func for #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl >
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 new index: 2
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to generate code for load-time-value maker: (CL:LET* ((COMPILER::SN (CL:SYMBOL-NAME CL:SYMBOL)) (COMPILER::SYM-PKG (CL:SYMBOL-PACKAGE CL:SYMBOL)) (COMPILER::SN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::SN (BFORMAT CL:NIL ":::symbol-name-%s" COMPILER::SN))) (COMPILER::SN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::SN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "sn"))) (CL:IF COMPILER::SYM-PKG (CL:LET* ((COMPILER::PN (CL:PACKAGE-NAME (CL:SYMBOL-PACKAGE CL:SYMBOL))) (COMPILER::PN-GV (LLVM-SYS:GET-OR-CREATE-UNIQUED-STRING-GLOBAL-VARIABLE COMPILER::*THE-MODULE* COMPILER::PN (BFORMAT CL:NIL ":::package-name-%s" COMPILER::PN))) (COMPILER::PN-VALUE-PTR (LLVM-SYS:CREATE-IN-BOUNDS-GEP COMPILER::*IRBUILDER* COMPILER::PN-GV (CL:LIST (COMPILER::JIT-CONSTANT-I32 0) (COMPILER::JIT-CONSTANT-I32 0)) "pn"))) (COMPILER::IRC-INTRINSIC "internSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR COMPILER::PN-VALUE-PTR)) (COMPILER::IRC-INTRINSIC "makeSymbol_symsp" COMPILER::LTS-TEMP COMPILER::SN-VALUE-PTR)))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-cleanup-landing-pad
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: normal-dest
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: normal-dest3
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}* }, i32 3>))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %func = alloca { i32* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}* }, i32 3>))
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}* }, i32 3
  %gep = getelementptr inbounds { {}* }* %0, i32 0
  call void @newTsp({ {}* }* %gep)
  %gep1 = getelementptr inbounds { {}* }* %0, i32 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds { {}* }* %0, i32 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }
  call void @newFunction_sp({ i32* }* %func)
  br label %body

body:                                             ; preds = %entry
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  %arg-0 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %arg-0, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %arg-1 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %arg-1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %body
  %arg-2 = getelementptr inbounds { {}* }* %0, i32 2, !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %arg-2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %0)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  br label %return-block, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %body
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, !dbg !7
  br label %func-ehcleanup, !dbg !7

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad
  %gep5 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  %gep6 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
  %gep7 = getelementptr inbounds { {}* }* %0, i32 2, !dbg !7
  br label %func-ehresume, !dbg !7

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot, !dbg !7
  %sel = load i32* %ehselector.slot, !dbg !7
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %lpad.val8, !dbg !7

func-terminate-lpad:                              ; No predecessors!
  %5 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null, !dbg !7
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([5 x i8]* @":::global-str-repl", i32 0, i32 0)), !dbg !7
  call void @unreachableError(), !dbg !7
  unreachable, !dbg !7

return-block:                                     ; preds = %normal-dest4
  %gep8 = getelementptr inbounds { {}* }* %0, i32 0, !dbg !7
  %gep9 = getelementptr inbounds { {}* }* %0, i32 1, !dbg !7
  %gep10 = getelementptr inbounds { {}* }* %0, i32 2, !dbg !7
  ret void, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl >
Anonymous:0 Dumping the repl function

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Returning nil renv: #<LLVM-SYS::CALL-INST   %13 = call { {}* }* @activationFrameNil()>
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: body
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function ___loadTimeDataInitializer >
Anonymous:0 t1expr-> CL:NIL
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl4 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl4 >
Anonymous:0 with-dbg-function *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-function *dbg-current-function*: #<LLVM-SYS:DISUBPROGRAM @0x7fcbac2b95b0) > 
Anonymous:0 with-dbg-function name: [repl]
Anonymous:0 with-dbg-function linkage-name: [repl4]
Anonymous:0 with-dbg-lexical-block
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Creating repl function with name: repl4
Anonymous:0 codegen stack-used[410824 bytes]
Anonymous:0 codegen evaluate-depth[96]  CL:NIL
Anonymous:0 About to codegen-var-lookup for CL:NIL - classified as: (EXT:SPECIAL-VAR)
Anonymous:0 About to codegen-special-var-lookup symbol[CL:NIL]
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 0
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  br label %body

body:                                             ; preds = %entry
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  br label %return-block

func-cleanup-landing-pad:                         ; No predecessors!
  %0 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %1 = extractvalue { i8*, i32 } %0, 0
  store i8* %1, i8** %exn.slot
  %2 = extractvalue { i8*, i32 } %0, 1
  store i32 %2, i32* %ehselector.slot
  br label %func-ehcleanup

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad
  br label %func-ehresume

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0
  call void @debugPrintI32(i32 90)
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %lpad.val8

func-terminate-lpad:                              ; No predecessors!
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([6 x i8]* @":::global-str-repl4", i32 0, i32 0))
  call void @unreachableError()
  unreachable

return-block:                                     ; preds = %body
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl4 >
Anonymous:0 Dumping the repl function

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Returning nil renv: #<LLVM-SYS::CALL-INST   %14 = call { {}* }* @activationFrameNil()>
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: normal-dest
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest :function ___loadTimeDataInitializer >
Anonymous:0 t1expr-> 'TEST-DEBUG
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function repl5 >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl5 >
Anonymous:0 with-dbg-function *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-function *dbg-current-function*: #<LLVM-SYS:DISUBPROGRAM @0x7fcbac53a940) > 
Anonymous:0 with-dbg-function name: [repl]
Anonymous:0 with-dbg-function linkage-name: [repl5]
Anonymous:0 with-dbg-lexical-block
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Creating repl function with name: repl5
Anonymous:0 codegen stack-used[410824 bytes]
Anonymous:0 codegen evaluate-depth[96]  'TEST-DEBUG
Anonymous:0 About to codegen special-operator or application for: 'TEST-DEBUG
Anonymous:0 About to codegen-special-operator: CL:QUOTE (TEST-DEBUG)
Anonymous:0 entered codegen-special-operator head: CL:QUOTE rest: (TEST-DEBUG)
Anonymous:0 About to set source pos
Anonymous:0 dbg-set-current-source-pos on form: (TEST-DEBUG)
Anonymous:0 dbg-set-current-source-pos to no-file:0 for (TEST-DEBUG)
Anonymous:0 dbg-set-current-source-pos IGNORING
Anonymous:0 About to do case on head: CL:QUOTE
Anonymous:0 codegen-quote: (TEST-DEBUG)
Anonymous:0 with-coalesce-load-time-value index within coalesce-hash-table: 2
Anonymous:0 with-coalesce-load-time-value - setting up copy-value with function: copyLoadTimeValue
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"
@":::global-str-repl5" = internal unnamed_addr constant [6 x i8] c"repl5\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
  %14 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, { {}* }* %14)
          to label %normal-dest1 unwind label %func-cleanup-landing-pad

normal-dest1:                                     ; preds = %normal-dest
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  br label %body

body:                                             ; preds = %entry
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  br label %return-block

func-cleanup-landing-pad:                         ; No predecessors!
  %0 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %1 = extractvalue { i8*, i32 } %0, 0
  store i8* %1, i8** %exn.slot
  %2 = extractvalue { i8*, i32 } %0, 1
  store i32 %2, i32* %ehselector.slot
  br label %func-ehcleanup

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad
  br label %func-ehresume

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0
  call void @debugPrintI32(i32 90)
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %lpad.val8

func-terminate-lpad:                              ; No predecessors!
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([6 x i8]* @":::global-str-repl5", i32 0, i32 0))
  call void @unreachableError()
  unreachable

return-block:                                     ; preds = %body
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function repl5 >
Anonymous:0 Dumping the repl function

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  ret void
}

Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"
@":::global-str-repl5" = internal unnamed_addr constant [6 x i8] c"repl5\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
  %14 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, { {}* }* %14)
          to label %normal-dest1 unwind label %func-cleanup-landing-pad

normal-dest1:                                     ; preds = %normal-dest
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest1 :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 Returning nil renv: #<LLVM-SYS::CALL-INST   %15 = call { {}* }* @activationFrameNil()>
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: normal-dest1
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest1 :function ___loadTimeDataInitializer >
Anonymous:0 In compile-main-function
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function __MAIN_test >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function __MAIN_test >
Anonymous:0 with-dbg-function *dbg-compile-unit*: #<LLVM-SYS:DICOMPILE-UNIT @0x7fcbab637760) > 
Anonymous:0 with-dbg-function *dbg-current-function*: #<LLVM-SYS:DISUBPROGRAM @0x7fcbac71cd90) > 
Anonymous:0 with-dbg-function name: [#P"/Users/meister/Development/cando/clasp/src/main/test.bc-min-rc"]
Anonymous:0 with-dbg-function linkage-name: [__MAIN_test]
Anonymous:0 with-dbg-lexical-block
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-cleanup-landing-pad
Anonymous:0 About to add invokeLlvmFunctionVoid for ltv-manager-fn
Anonymous:0 --------------- About to create-invoke -----------
Anonymous:0     Current basic-block: body
Anonymous:0             Unwind dest: func-cleanup-landing-pad
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> CL:NIL
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"
@":::global-str-repl5" = internal unnamed_addr constant [6 x i8] c"repl5\00"
@":::global-str-__MAIN_test" = internal unnamed_addr constant [12 x i8] c"__MAIN_test\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
  %14 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, { {}* }* %14)
          to label %normal-dest1 unwind label %func-cleanup-landing-pad

normal-dest1:                                     ; preds = %normal-dest
  %15 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl5, { {}* }* %15)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %normal-dest1
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  ret void
}

define void @__MAIN_test() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  br label %body

body:                                             ; preds = %entry
  invoke void @invokeLlvmFunctionVoid(void ()* @___loadTimeDataInitializer)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
  br label %return-block

func-cleanup-landing-pad:                         ; preds = %body
  %0 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %1 = extractvalue { i8*, i32 } %0, 0
  store i8* %1, i8** %exn.slot
  %2 = extractvalue { i8*, i32 } %0, 1
  store i32 %2, i32* %ehselector.slot
  br label %func-ehcleanup

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad
  br label %func-ehresume

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0
  call void @debugPrintI32(i32 90)
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %lpad.val8

func-terminate-lpad:                              ; No predecessors!
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([12 x i8]* @":::global-str-__MAIN_test", i32 0, i32 0))
  call void @unreachableError()
  unreachable

return-block:                                     ; preds = %normal-dest
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name body :function __MAIN_test >
Anonymous:0 Done compile-main-functionAnonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Setting up getOrCreateLoadTimeValueArray
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name entry :function ___loadTimeDataInitializer >
Anonymous:0 Switching to irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest2 :function ___loadTimeDataInitializer >
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 Setting *current-unwind-landing-pad-!dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %array-element-type = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}*, i32 }>))
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to func-terminate-lpad
Anonymous:0 About to cleanup local-metadata :cleanup --> ((#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %array-element-type = alloca { {}* }>) (#<INTERPRETED :name ANONYMOUS :llh #<LAMBDA-LIST-HANDLER :ClassifiedSymbols ((EXT:LEXICAL-VAR COMPILER::A . 0))  &required  #<RequiredArgument :target  >   :comment ""> :environment <MAY-OVERLOAD-STACK> :declares CL:NIL :docstring "CL:NIL" :code <NOT-PRINTING-COULD-OVERLOAD-STACK> :sourceFileInfo CL:NIL :lineNumber 0 :column 0 > #<LLVM-SYS::ALLOCA-INST   %0 = alloca { {}*, i32 }>))
Anonymous:0 About to verify the function in irc-function-cleanup-and-return
Anonymous:0 At top of irc-verify-function  ---- about to verify-function - if there is a problem it will not return
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"
@":::global-str-repl5" = internal unnamed_addr constant [6 x i8] c"repl5\00"
@":::global-str-__MAIN_test" = internal unnamed_addr constant [12 x i8] c"__MAIN_test\00"
@":::global-str-___loadTimeDataInitializer" = internal unnamed_addr constant [27 x i8] c"___loadTimeDataInitializer\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i32 0, i32* %ehselector.slot
  %0 = alloca { {}*, i32 }
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }
  call void @newTsp({ {}* }* %array-element-type)
  call void @getOrCreateLoadTimeValueArray({ {}* }** @load-time-value-vector, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 8, i32 3)
  br label %body

body:                                             ; preds = %entry
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i32 0, i32 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i32 0, i32 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i32 0, i32 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i32 0, i32 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %body
  %14 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, { {}* }* %14)
          to label %normal-dest1 unwind label %func-cleanup-landing-pad

normal-dest1:                                     ; preds = %normal-dest
  %15 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl5, { {}* }* %15)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %normal-dest1
  br label %return-block

func-cleanup-landing-pad:                         ; preds = %normal-dest1, %normal-dest, %body
  %16 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %17 = extractvalue { i8*, i32 } %16, 0
  store i8* %17, i8** %exn.slot
  %18 = extractvalue { i8*, i32 } %16, 1
  store i32 %18, i32* %ehselector.slot
  br label %func-ehcleanup

func-ehcleanup:                                   ; preds = %func-cleanup-landing-pad
  br label %func-ehresume

func-ehresume:                                    ; preds = %func-ehcleanup
  %exn7 = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0
  call void @debugPrintI32(i32 90)
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %lpad.val8

func-terminate-lpad:                              ; No predecessors!
  %19 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          catch i8* null
  call void @brcl_terminate(i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([27 x i8]* @":::global-str-___loadTimeDataInitializer", i32 0, i32 0))
  call void @unreachableError()
  unreachable

return-block:                                     ; preds = %normal-dest2
  ret void
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !7
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !7
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  %1 = call { {}* }* @activationFrameNil(), !dbg !7
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !7
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !7
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !7

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !7

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !7
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !7
  store i8* %3, i8** %exn.slot, align 8, !dbg !7
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !7
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !7
  call void @debugPrintI32(i32 90), !dbg !7
  call void @debugPrintI32(i32 91), !dbg !7
  resume { i8*, i32 } %2, !dbg !7
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !15
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !15
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !15
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !15

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !20
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !21
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !21
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !21
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !21

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !21
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !21
  store i8* %4, i8** %exn.slot, align 8, !dbg !21
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !21
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !21
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !21
  %7 = icmp eq i32 %5, %6, !dbg !21
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !21

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !21
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !21

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !21

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !21
  store i8* %10, i8** %exn.slot, align 8, !dbg !21
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !21
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !21
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !21
  store i8* %13, i8** %exn.slot, align 8, !dbg !21
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !21
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !21
  br label %func-ehcleanup, !dbg !21

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !21
  call void @debugPrintI32(i32 90), !dbg !21
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !21
  call void @debugPrintI32(i32 91), !dbg !21
  resume { i8*, i32 } %lpad.val8, !dbg !21
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  ret void
}

define void @__MAIN_test() {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  invoke void @invokeLlvmFunctionVoid(void ()* @___loadTimeDataInitializer)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %entry
  ret void

func-cleanup-landing-pad:                         ; preds = %entry
  %0 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %1 = extractvalue { i8*, i32 } %0, 0
  store i8* %1, i8** %exn.slot, align 8
  %2 = extractvalue { i8*, i32 } %0, 1
  store i32 %2, i32* %ehselector.slot, align 4
  call void @debugPrintI32(i32 90)
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %0
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{i32 786468}
!3 = metadata !{i32 786468}
!4 = metadata !{i32 786468}
!5 = metadata !{i32 786468}
!6 = metadata !{i32 786468}
!7 = metadata !{i32 2, i32 3, metadata !8, null}
!8 = metadata !{i32 786443, metadata !1, metadata !9, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!9 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !14, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!10 = metadata !{i32 786473, metadata !1}         ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!11 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !12, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!12 = metadata !{metadata !13}
!13 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!14 = metadata !{i32 786468}
!15 = metadata !{i32 2, i32 3, metadata !16, null}
!16 = metadata !{i32 786443, metadata !1, metadata !17, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786478, metadata !1, metadata !10, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !11, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !19, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!19 = metadata !{i32 786468}
!20 = metadata !{i32 3, i32 3, metadata !16, null}
!21 = metadata !{i32 4, i32 3, metadata !16, null}
Anonymous:0 --------------  Function verified OK!!!!!!!
Anonymous:0 <<<<< Restored *current-unwind-landing-pad-dest* to NIL
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name normal-dest2 :function ___loadTimeDataInitializer >
Anonymous:0 About to verify the module
; ModuleID = '/Users/meister/Development/cando/clasp/src/main/test.lsp'
target triple = "x86_64-apple-macosx10.7.0"

@":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp" = internal unnamed_addr constant [57 x i8] c"/Users/meister/Development/cando/clasp/src/main/test.lsp\00"
@load-time-value-vector = internal global { {}* }* null
@":::global-str-repl" = internal unnamed_addr constant [5 x i8] c"repl\00"
@":::symbol-name-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::package-name-CORE" = internal unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-TEST-DEBUG" = internal unnamed_addr constant [11 x i8] c"TEST-DEBUG\00"
@":::symbol-name-T" = internal unnamed_addr constant [2 x i8] c"T\00"
@":::package-name-CL" = internal unnamed_addr constant [3 x i8] c"CL\00"
@constant-array = internal constant [1 x i32] zeroinitializer
@constant-array1 = internal constant [0 x i32] zeroinitializer
@":::str" = internal unnamed_addr constant [20 x i8] c"About to test debug\00"
@":::symbol-name-PRINT" = internal unnamed_addr constant [6 x i8] c"PRINT\00"
@":::str2" = internal unnamed_addr constant [14 x i8] c"testing debug\00"
@":::symbol-name-DEBUG" = internal unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::str3" = internal unnamed_addr constant [5 x i8] c"Done\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::symbol-name-*FSET" = internal unnamed_addr constant [6 x i8] c"*FSET\00"
@":::global-str-repl4" = internal unnamed_addr constant [6 x i8] c"repl4\00"
@":::global-str-repl5" = internal unnamed_addr constant [6 x i8] c"repl5\00"
@":::global-str-__MAIN_test" = internal unnamed_addr constant [12 x i8] c"__MAIN_test\00"
@":::global-str-___loadTimeDataInitializer" = internal unnamed_addr constant [27 x i8] c"___loadTimeDataInitializer\00"

; Function Attrs: nounwind
declare void @newFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @destructFunction_sp({ i32* }*) #0

; Function Attrs: nounwind
declare void @newTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @resetTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeUnboundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @sp_copyTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_copyTsp({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @compareTsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @newTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @resetTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @copyTmv({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @sp_copyTmvOrSlice({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @mv_copyTmvOrSlice({ {}*, i32 }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @destructTmv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @newAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @newAFsp_ValueFrameOfSize({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @resetAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @copyAFsp({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @destructAFsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isNilTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isTrueTsp({ {}* }*) #0

; Function Attrs: nounwind
declare i32 @isBoundTsp({ {}* }*) #0

; Function Attrs: nounwind
declare void @internSymbol_tsp({ {}* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_tsp({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @internSymbol_symsp({ i32* }*, i8*, i8*) #0

; Function Attrs: nounwind
declare void @makeSymbol_symsp({ i32* }*, i8*) #0

; Function Attrs: nounwind
declare void @sp_makeNil({ {}* }*) #0

; Function Attrs: nounwind
declare void @mv_makeNil({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @makeT({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeCons({ {}* }*, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeFixnum({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeCharacter({ {}* }*, i32) #0

; Function Attrs: nounwind
declare void @makeBignum({ {}* }*, i8*) #0

; Function Attrs: nounwind
declare void @makeSingleFloat({ {}* }*, float) #0

; Function Attrs: nounwind
declare void @makeDoubleFloat({ {}* }*, double) #0

; Function Attrs: nounwind
declare void @makeString({ {}* }*, i8*) #0

declare void @sp_makeCompiledFunction({ {}* }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @mv_makeCompiledFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, i8*, { {}* }*, { {}* }*, { {}* }*)

declare void @fillRestTarget({ {}* }*, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare void @sp_symbolValueRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolValueReadOrUnbound({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolValueReadOrUnbound({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @symbolValueReference({ i32* }*) #0

; Function Attrs: nounwind
declare { {}* }* @lexicalValueReference(i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalValueRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalValueRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @sp_symbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @mv_symbolFunctionRead({ {}*, i32 }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @setfSymbolFunctionRead({ {}* }*, { i32* }*) #0

; Function Attrs: nounwind
declare void @sp_lexicalFunctionRead({ {}* }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @mv_lexicalFunctionRead({ {}*, i32 }*, i32, i32, { {}* }*) #0

; Function Attrs: nounwind
declare void @makeTagbodyFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @makeValueFrame({ {}* }*, i32, i32) #0

; Function Attrs: nounwind
declare void @makeValueFrameFromReversedCons({ {}* }*, { {}* }*, i32) #0

; Function Attrs: nounwind
declare void @setParentOfActivationFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @attachDebuggingInfoToValueFrame({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @valueFrameReference({ {}* }*, i32) #0

declare void @makeFunctionFrame({ {}* }*, i32, { {}* }*)

declare { {}* }* @functionFrameReference({ {}* }*, i32)

declare void @sp_prependMultipleValues({ {}* }*, { {}*, i32 }*)

declare void @mv_prependMultipleValues({ {}*, i32 }*, { {}*, i32 }*)

declare void @symbolFunction({ i32* }*, { {}* }*)

declare void @lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @invokePossibleMultipleValueFunction({ {}*, i32 }*, { {}* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ {}* }*, i32, i32, { {}* }*, { {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ {}*, i32 }*, i32, i32, { {}* }*, { {}* }*)

declare void @invokeLlvmFunction({ {}*, i32 }*, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)*, { {}* }*)

declare void @invokeLlvmFunctionVoid(void ()*)

declare void @invokeFASLLlvmFunctionVoid(void ()*, i8*)

; Function Attrs: nounwind
declare { {}* }* @activationFrameNil() #0

; Function Attrs: nounwind
declare i32 @activationFrameSize({ {}* }*) #0

; Function Attrs: nounwind
declare { {}* }* @activationFrameParentRef({ {}* }*) #0

declare void @throwTooManyArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { {}* }*, i32)

; Function Attrs: nounwind
declare i32 @kw_allowOtherKeywords(i32, { {}* }*, i32) #0

; Function Attrs: nounwind
declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) #0

declare void @kw_throwIfBadKeywordArgument(i32, i32, { {}* }*)

declare void @kw_throwIfNotKeyword({ {}* }*)

; Function Attrs: nounwind
declare void @gdb() #0

; Function Attrs: nounwind
declare void @debugInvoke() #0

; Function Attrs: nounwind
declare void @debugInspectActivationFrame({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_sp({ {}* }*) #0

; Function Attrs: nounwind
declare void @debugInspectObject_mv({ {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @debugPointer(i8*) #0

; Function Attrs: nounwind
declare void @debugPrintObject(i8*, { {}* }*) #0

; Function Attrs: nounwind
declare void @debugPrintI32(i32) #0

; Function Attrs: nounwind
declare void @lowLevelTrace(i32) #0

; Function Attrs: nounwind
declare void @unreachableError() #0

; Function Attrs: nounwind
declare void @singleStepCallback() #0

declare void @va_throwTooManyArgumentsException(i8*, i32, i32)

declare void @va_throwNotEnoughArgumentsException(i8*, i32, i32)

declare void @va_throwIfExcessKeywordArguments(i8*, i32, { {}* }*, i32)

declare void @va_fillActivationFrameWithRequiredVarargs({ {}* }*, i32, { {}* }*)

declare void @va_coerceToFunction({ i32* }*, { {}* }*)

declare void @va_symbolFunction({ i32* }*, { i32* }*)

declare void @va_lexicalFunction({ i32* }*, i32, i32, { {}* }*)

declare void @sp_FUNCALL({ {}* }*, { i32* }*, i32, { {}* }*)

declare void @mv_FUNCALL({ {}*, i32 }*, { i32* }*, i32, { {}* }*)

declare void @sp_FUNCALL_activationFrame({ {}* }*, { i32* }*, { {}* }*)

declare void @mv_FUNCALL_activationFrame({ {}*, i32 }*, { i32* }*, { {}* }*)

declare void @va_fillRestTarget({ {}* }*, i32, { {}* }*, i32, i8*)

; Function Attrs: nounwind
declare i32 @va_allowOtherKeywords(i32, i32, { {}* }*, i32) #0

declare void @va_throwIfBadKeywordArgument(i32, i32, i32, { {}* }*)

; Function Attrs: nounwind
declare void @trace_setActivationFrameForIHSTop({ {}* }*) #0

; Function Attrs: nounwind
declare void @trace_setLineNumberColumnForIHSTop(i32, i32) #0

; Function Attrs: nounwind
declare void @trace_exitFunctionScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitBlockScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLetSTARScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitFletScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitLabelsScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCallScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitCatchScope(i32) #0

; Function Attrs: nounwind
declare void @trace_exitUnwindProtectScope(i32) #0

; Function Attrs: noreturn
declare void @throwCatchThrow({ {}* }*, { {}*, i32 }*) #1

; Function Attrs: noreturn
declare void @throwReturnFrom(i32, { {}*, i32 }*) #1

; Function Attrs: nounwind
declare void @catchStoreTag({ {}* }*, { {}* }*) #0

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ {}* }*, { {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ {}*, i32 }*, { {}* }*, i8*)

; Function Attrs: nounwind
declare void @catchUnwind({ {}* }*) #0

declare void @sp_blockHandleReturnFrom({ {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ {}*, i32 }*, i8*)

; Function Attrs: noreturn
declare void @throw_DynamicGo(i32, i32, { {}* }*) #1

declare i32 @tagbodyDynamicGoIndexElseRethrow({ {}* }*, i8*)

; Function Attrs: noreturn
declare void @throwIllegalSwitchValue(i32, i32) #1

; Function Attrs: nounwind
declare void @brcl_terminate(i8*, i32, i32, i8*) #0

; Function Attrs: nounwind
declare i32 @__gxx_personality_v0(...) #0

; Function Attrs: nounwind
declare i8* @__cxa_begin_catch(i8*) #0

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*) #2

; Function Attrs: nounwind
declare void @getOrCreateLoadTimeValueArray({ {}* }**, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @sp_copyLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_copyLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare { {}* }* @loadTimeValueReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare { i32* }* @loadTimeSymbolReference({ {}* }**, i32) #0

; Function Attrs: nounwind
declare void @sp_getLoadTimeValue({ {}* }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @mv_getLoadTimeValue({ {}*, i32 }*, { {}* }**, i32) #0

; Function Attrs: nounwind
declare void @dumpLoadTimeValues({ {}* }**) #0

; Function Attrs: nounwind
declare void @ltv_makeCons({ {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_makeSourceCodeCons({ {}* }*, i8*, i32, i32) #0

; Function Attrs: nounwind
declare void @ltv_makeArrayObjects({ {}* }*, { {}* }*, i32, i32*) #0

; Function Attrs: nounwind
declare void @ltv_makeHashTable({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplaca({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @rplacd({ {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }*, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @ltv_initializeHashTable({ {}* }*, i32, { {}* }**, i32*) #0

; Function Attrs: nounwind
declare void @saveValues({ {}* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @loadValues({ {}*, i32 }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @setjmp_set_jump_address({ i8*, i8*, i8*, i8*, i8* }*, i8*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_set_i32({ i8*, i8*, i8*, i8*, i8* }*, i32) #0

; Function Attrs: nounwind
declare i32 @setjmp_user0_get_i32({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_allocate_set_tmv({ i8*, i8*, i8*, i8*, i8* }*, { {}*, i32 }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_get_tmv({ {}*, i32 }*, { i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare void @setjmp_user0_delete_tmv({ i8*, i8*, i8*, i8*, i8* }*) #0

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #0

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #3

; Function Attrs: nounwind
declare void @progvSaveSpecials(i8**, { {}* }*, { {}* }*) #0

; Function Attrs: nounwind
declare void @progvRestoreSpecials(i8**) #0

; Function Attrs: nounwind
declare void @pushDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare void @popDynamicBinding({ i32* }*) #0

; Function Attrs: nounwind
declare i32 @matchKeywordOnce({ {}* }*, { {}* }*, i8*) #0

define internal void @___loadTimeDataInitializer() {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca { {}*, i32 }, align 8
  call void @newTmv({ {}*, i32 }* %0)
  %array-element-type = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %array-element-type)
  call void @getOrCreateLoadTimeValueArray({ {}* }** @load-time-value-vector, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), i32 8, i32 3)
  %1 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ {}* }* %1)
  %2 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ {}* }* %2)
  %3 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ {}* }* %3, i8* getelementptr inbounds ([11 x i8]* @":::symbol-name-TEST-DEBUG", i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i64 0, i64 0))
  %4 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ {}* }* %4, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i64 0, i64 0))
  call void @sp_copyLoadTimeValue({ {}* }* %array-element-type, { {}* }** @load-time-value-vector, i32 3)
  %5 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ {}* }* %5, { {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i64 0, i64 0))
  %6 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ {}* }* %6, { {}* }** @load-time-value-vector, i32* getelementptr inbounds ([0 x i32]* @constant-array1, i64 0, i64 0))
  %7 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 5)
  call void @makeString({ {}* }* %7, i8* getelementptr inbounds ([20 x i8]* @":::str", i64 0, i64 0))
  %8 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0)
  call void @internSymbol_symsp({ i32* }* %8, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i64 0, i64 0))
  %9 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 6)
  call void @makeString({ {}* }* %9, i8* getelementptr inbounds ([14 x i8]* @":::str2", i64 0, i64 0))
  %10 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1)
  call void @internSymbol_symsp({ i32* }* %10, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @":::package-name-CL", i64 0, i64 0))
  %11 = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 7)
  call void @makeString({ {}* }* %11, i8* getelementptr inbounds ([5 x i8]* @":::str3", i64 0, i64 0))
  %12 = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_symsp({ i32* }* %12, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-*FSET", i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i64 0, i64 0))
  %13 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, { {}* }* %13)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %entry
  %14 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, { {}* }* %14)
          to label %normal-dest1 unwind label %func-cleanup-landing-pad

normal-dest1:                                     ; preds = %normal-dest
  %15 = call { {}* }* @activationFrameNil()
  invoke void @invokeLlvmFunction({ {}*, i32 }* %0, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl5, { {}* }* %15)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %normal-dest1
  ret void

func-cleanup-landing-pad:                         ; preds = %normal-dest1, %normal-dest, %entry
  %16 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %17 = extractvalue { i8*, i32 } %16, 0
  store i8* %17, i8** %exn.slot, align 8
  %18 = extractvalue { i8*, i32 } %16, 1
  store i32 %18, i32* %ehselector.slot, align 4
  call void @debugPrintI32(i32 90)
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %16
}

define internal void @repl({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %0 = alloca [3 x { {}* }], align 8
  %.sub = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 0
  call void @newTsp({ {}* }* %.sub)
  %gep1 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 1
  call void @newTsp({ {}* }* %gep1)
  %gep2 = getelementptr inbounds [3 x { {}* }]* %0, i64 0, i64 2
  call void @newTsp({ {}* }* %gep2)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !14
  call void @sp_copyLoadTimeValue({ {}* }* %.sub, { {}* }** @load-time-value-vector, i32 2), !dbg !14
  %"SYMBOL->CL:NIL" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 0), !dbg !14
  %"SYMBOL->TEST-DEBUG" = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 2), !dbg !14
  %1 = call { {}* }* @activationFrameNil(), !dbg !14
  invoke void @sp_makeCompiledFunction({ {}* }* %gep1, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, i8* getelementptr inbounds ([57 x i8]* @":::global-str-/Users/meister/Development/cando/clasp/src/main/test.lsp", i64 0, i64 0), { {}* }* %"SYMBOL->TEST-DEBUG", { {}* }* %"SYMBOL->CL:NIL", { {}* }* %1)
          to label %normal-dest unwind label %func-cleanup-landing-pad, !dbg !14

normal-dest:                                      ; preds = %entry
  call void @sp_copyLoadTimeValue({ {}* }* %gep2, { {}* }** @load-time-value-vector, i32 0), !dbg !14
  %"SYMBOL->*FSET" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 2), !dbg !14
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->*FSET")
          to label %normal-dest3 unwind label %func-cleanup-landing-pad, !dbg !14

normal-dest3:                                     ; preds = %normal-dest
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func, i32 3, { {}* }* %.sub)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad, !dbg !14

normal-dest4:                                     ; preds = %normal-dest3
  ret void, !dbg !14

func-cleanup-landing-pad:                         ; preds = %normal-dest3, %normal-dest, %entry
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !14
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !14
  store i8* %3, i8** %exn.slot, align 8, !dbg !14
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !14
  store i32 %4, i32* %ehselector.slot, align 4, !dbg !14
  call void @debugPrintI32(i32 90), !dbg !14
  call void @debugPrintI32(i32 91), !dbg !14
  resume { i8*, i32 } %2, !dbg !14
}

define internal void @TEST-DEBUG({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  %lambda-args-1- = alloca { {}* }, align 8
  call void @newAFsp({ {}* }* %lambda-args-1-)
  %temp = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %temp)
  %0 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %0)
  %func = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func)
  %1 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %1)
  %func9 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func9)
  %2 = alloca { {}* }, align 8
  call void @newTsp({ {}* }* %2)
  %func14 = alloca { i32* }, align 8
  call void @newFunction_sp({ i32* }* %func14)
  call void @makeValueFrame({ {}* }* %lambda-args-1-, i32 0, i32 2000000)
  call void @setParentOfActivationFrame({ {}* }* %lambda-args-1-, { {}* }* %closed-af-ptr)
  %correct-num-args = icmp eq i32 %num-varargs, 0
  br i1 %correct-num-args, label %continue3, label %error

error:                                            ; preds = %entry
  %enough-args = icmp slt i32 %num-varargs, 0
  br i1 %enough-args, label %error1, label %continue

error1:                                           ; preds = %error
  invoke void @va_throwNotEnoughArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %error1
  call void @unreachableError()
  unreachable

continue:                                         ; preds = %error
  invoke void @va_throwTooManyArgumentsException(i8* getelementptr inbounds ([11 x i8]* @":::global-str-TEST-DEBUG", i64 0, i64 0), i32 %num-varargs, i32 0)
          to label %normal-dest2 unwind label %func-cleanup-landing-pad

normal-dest2:                                     ; preds = %continue
  call void @unreachableError()
  unreachable

continue3:                                        ; preds = %entry
  invoke void @va_fillActivationFrameWithRequiredVarargs({ {}* }* %lambda-args-1-, i32 0, { {}* }* %va-list)
          to label %normal-dest4 unwind label %func-cleanup-landing-pad

normal-dest4:                                     ; preds = %continue3
  %value = call { {}* }* @loadTimeValueReference({ {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ {}* }* %lambda-args-1-, { {}* }* %value)
  call void @trace_setActivationFrameForIHSTop({ {}* }* %lambda-args-1-)
  call void @trace_setLineNumberColumnForIHSTop(i32 2, i32 3), !dbg !16
  call void @sp_copyLoadTimeValue({ {}* }* %0, { {}* }** @load-time-value-vector, i32 5), !dbg !16
  %"SYMBOL->CL:PRINT" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !16
  invoke void @va_symbolFunction({ i32* }* %func, { i32* }* %"SYMBOL->CL:PRINT")
          to label %"(TRY-0).normal-dest" unwind label %"(TRY-0).landing-pad", !dbg !16

"(TRY-0).normal-dest":                            ; preds = %normal-dest4
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func, i32 1, { {}* }* %0)
          to label %"(TRY-0).normal-dest6" unwind label %"(TRY-0).landing-pad", !dbg !16

"(TRY-0).normal-dest6":                           ; preds = %"(TRY-0).normal-dest"
  call void @trace_setLineNumberColumnForIHSTop(i32 3, i32 3), !dbg !19
  call void @sp_copyLoadTimeValue({ {}* }* %1, { {}* }** @load-time-value-vector, i32 6), !dbg !19
  %"SYMBOL->CL:DEBUG" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 1), !dbg !19
  invoke void @va_symbolFunction({ i32* }* %func9, { i32* }* %"SYMBOL->CL:DEBUG")
          to label %"(TRY-0).normal-dest10" unwind label %"(TRY-0).landing-pad", !dbg !19

"(TRY-0).normal-dest10":                          ; preds = %"(TRY-0).normal-dest6"
  invoke void @sp_FUNCALL({ {}* }* %temp, { i32* }* %func9, i32 1, { {}* }* %1)
          to label %"(TRY-0).normal-dest11" unwind label %"(TRY-0).landing-pad", !dbg !19

"(TRY-0).normal-dest11":                          ; preds = %"(TRY-0).normal-dest10"
  call void @trace_setLineNumberColumnForIHSTop(i32 4, i32 3), !dbg !20
  call void @sp_copyLoadTimeValue({ {}* }* %2, { {}* }** @load-time-value-vector, i32 7), !dbg !20
  %"SYMBOL->CL:PRINT15" = call { i32* }* @loadTimeSymbolReference({ {}* }** @load-time-value-vector, i32 0), !dbg !20
  invoke void @va_symbolFunction({ i32* }* %func14, { i32* }* %"SYMBOL->CL:PRINT15")
          to label %"(TRY-0).normal-dest16" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).normal-dest16":                          ; preds = %"(TRY-0).normal-dest11"
  invoke void @mv_FUNCALL({ {}*, i32 }* %result-ptr, { i32* }* %func14, i32 1, { {}* }* %2)
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad", !dbg !20

"(TRY-0).landing-pad":                            ; preds = %"(TRY-0).normal-dest16", %"(TRY-0).normal-dest11", %"(TRY-0).normal-dest10", %"(TRY-0).normal-dest6", %"(TRY-0).normal-dest", %normal-dest4
  %3 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !20
  %4 = extractvalue { i8*, i32 } %3, 0, !dbg !20
  store i8* %4, i8** %exn.slot, align 8, !dbg !20
  %5 = extractvalue { i8*, i32 } %3, 1, !dbg !20
  store i32 %5, i32* %ehselector.slot, align 4, !dbg !20
  %6 = call i32 @llvm.eh.typeid.for(i8* @_ZTIN4core10ReturnFromE), !dbg !20
  %7 = icmp eq i32 %5, %6, !dbg !20
  br i1 %7, label %"(TRY-0).handler-block7485", label %func-ehcleanup, !dbg !20

"(TRY-0).handler-block7485":                      ; preds = %"(TRY-0).landing-pad"
  %8 = call i8* @__cxa_begin_catch(i8* %4), !dbg !20
  invoke void @mv_blockHandleReturnFrom({ {}*, i32 }* %result-ptr, i8* %8)
          to label %"(TRY-0).normal-dest18" unwind label %"(TRY-0).landing-pad21", !dbg !20

"(TRY-0).normal-dest18":                          ; preds = %"(TRY-0).handler-block7485"
  invoke void @__cxa_end_catch()
          to label %"(TRY-0).try-cont" unwind label %"(TRY-0).landing-pad21", !dbg !20

"(TRY-0).try-cont":                               ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).normal-dest16"
  ret void, !dbg !20

"(TRY-0).landing-pad21":                          ; preds = %"(TRY-0).normal-dest18", %"(TRY-0).handler-block7485"
  %9 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !20
  %10 = extractvalue { i8*, i32 } %9, 0, !dbg !20
  store i8* %10, i8** %exn.slot, align 8, !dbg !20
  %11 = extractvalue { i8*, i32 } %9, 1, !dbg !20
  store i32 %11, i32* %ehselector.slot, align 4, !dbg !20
  br label %func-ehcleanup, !dbg !20

func-cleanup-landing-pad:                         ; preds = %continue3, %continue, %error1
  %12 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup, !dbg !20
  %13 = extractvalue { i8*, i32 } %12, 0, !dbg !20
  store i8* %13, i8** %exn.slot, align 8, !dbg !20
  %14 = extractvalue { i8*, i32 } %12, 1, !dbg !20
  store i32 %14, i32* %ehselector.slot, align 4, !dbg !20
  br label %func-ehcleanup, !dbg !20

func-ehcleanup:                                   ; preds = %"(TRY-0).landing-pad", %"(TRY-0).landing-pad21", %func-cleanup-landing-pad
  %sel = phi i32 [ %14, %func-cleanup-landing-pad ], [ %11, %"(TRY-0).landing-pad21" ], [ %5, %"(TRY-0).landing-pad" ]
  %exn7 = phi i8* [ %13, %func-cleanup-landing-pad ], [ %10, %"(TRY-0).landing-pad21" ], [ %4, %"(TRY-0).landing-pad" ]
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn7, 0, !dbg !20
  call void @debugPrintI32(i32 90), !dbg !20
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1, !dbg !20
  call void @debugPrintI32(i32 91), !dbg !20
  resume { i8*, i32 } %lpad.val8, !dbg !20
}

define internal void @repl4({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 0)
  ret void
}

define internal void @repl5({ {}*, i32 }* %result-ptr, { {}* }* %closed-af-ptr, i32 %num-varargs, { {}* }* %va-list) {
entry:
  call void @mv_copyLoadTimeValue({ {}*, i32 }* %result-ptr, { {}* }** @load-time-value-vector, i32 2)
  ret void
}

define void @__MAIN_test() {
entry:
  %exn.slot = alloca i8*, align 8
  %ehselector.slot = alloca i32, align 4
  store i32 0, i32* %ehselector.slot, align 4
  invoke void @invokeLlvmFunctionVoid(void ()* @___loadTimeDataInitializer)
          to label %normal-dest unwind label %func-cleanup-landing-pad

normal-dest:                                      ; preds = %entry
  ret void

func-cleanup-landing-pad:                         ; preds = %entry
  %0 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
  %1 = extractvalue { i8*, i32 } %0, 0
  store i8* %1, i8** %exn.slot, align 8
  %2 = extractvalue { i8*, i32 } %0, 1
  store i32 %2, i32* %ehselector.slot, align 4
  call void @debugPrintI32(i32 90)
  call void @debugPrintI32(i32 91)
  resume { i8*, i32 } %0
}

attributes #0 = { nounwind }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!13}

!0 = metadata !{i32 786449, metadata !1, i32 2, metadata !"brcl Common Lisp compiler", i1 false, metadata !"-v", i32 1, metadata !2, metadata !2, metadata !3, metadata !2, metadata !2, metadata !"split-name.log", i32 1} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/clasp/src/main//test] [DW_LANG_C]
!1 = metadata !{metadata !"test", metadata !"/Users/meister/Development/cando/clasp/src/main/"}
!2 = metadata !{}
!3 = metadata !{metadata !4, metadata !9, metadata !10, metadata !11, metadata !12}
!4 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"repl", metadata !"repl", metadata !"repl", i32 2, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl, null, null, metadata !2, i32 2} ; [ DW_TAG_subprogram ] [line 2] [def] [repl]
!5 = metadata !{i32 786473, metadata !1}          ; [ DW_TAG_file_type ] [/Users/meister/Development/cando/clasp/src/main//test]
!6 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !7, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!7 = metadata !{metadata !8}
!8 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!9 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", metadata !"TEST-DEBUG", i32 0, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @TEST-DEBUG, null, null, metadata !2, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [TEST-DEBUG]
!10 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"repl4", metadata !"repl4", metadata !"repl4", i32 0, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl4, null, null, metadata !2, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [repl4]
!11 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"repl5", metadata !"repl5", metadata !"repl5", i32 0, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ {}*, i32 }*, { {}* }*, i32, { {}* }*)* @repl5, null, null, metadata !2, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [repl5]
!12 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"__MAIN_test", metadata !"__MAIN_test", metadata !"__MAIN_test", i32 0, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ()* @__MAIN_test, null, null, metadata !2, i32 0} ; [ DW_TAG_subprogram ] [line 0] [def] [__MAIN_test]
!13 = metadata !{i32 2, metadata !"Dwarf Version", i32 2}
!14 = metadata !{i32 2, i32 3, metadata !15, null}
!15 = metadata !{i32 786443, metadata !1, metadata !4, i32 2, i32 3, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!16 = metadata !{i32 2, i32 3, metadata !17, null}
!17 = metadata !{i32 786443, metadata !1, metadata !18, i32 0, i32 0, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!18 = metadata !{i32 786443, metadata !1, metadata !9, i32 0, i32 0, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/Users/meister/Development/cando/clasp/src/main//test]
!19 = metadata !{i32 3, i32 3, metadata !17, null}
!20 = metadata !{i32 4, i32 3, metadata !17, null}
Anonymous:0 About to verify module prior to writing bitcode
Writing bitcode to /Users/meister/Development/cando/clasp/src/main/test.bc-min-rc
Anonymous:0 Leaving irbuilder --> #<LLVM-SYS::IRBUILDER  :insert-block-name UNDEFINED-BASIC_BLOCK!  >

"-----Close for FD-STREAM with abort=true called - I don't currently support abort=true
" 
CL:NIL 
CORE>>> *features
