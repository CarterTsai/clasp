#ifndef	clbind_class_H
#define clbind_class_H

#include <string>
#include <list>

#include "core/foundation.h"
#include "core/object.h"
#include "core/wrappedPointer.h"
#include "core/lispDefinitions.h"
#include "core/symbolToEnumConverter.h"
#include "core/evaluator.h"
#include "core/activationFrame.h"

#include "policies.h"
#include "details.h"
#include "inheritance.h"


//#define DEBUG_METHOIDS 1

#ifdef DEBUG_CLBIND
#define BLOG(x)	{printf("%s\n", (x).str().c_str());}
#else
#define BLOG(x)
#endif

namespace core
{
    extern Symbol_sp _sym_STARallCxxClassesSTAR;
    extern Symbol_sp _sym_ExternalObject_O;


};


namespace cl
{
    extern core::Symbol_sp _sym_findClass;
}

namespace clbind
{



    using core::T_O;
    using core::T_mv;
    using core::T_sp;
    using core::const_ActivationFrame_spREF;
    using core::Functoid;
    using core::AFFunctoid;
    using core::Cons_O;
    using core::Cons_sp;
    using core::Environment_O;
    using core::Environment_sp;
    using core::Symbol_O;
    using core::Symbol_sp;
    using core::SymbolToEnumConverter_O;
    using core::SymbolToEnumConverter_sp;
    using core::Package_O;
    using core::Package_sp;

#include "policies.h"
    using namespace policies;
//----------------------------------------------------------------------
// Globals
//


    template <typename Pols, typename Func>
    class VariadicFunctoid : public Functoid {};

#include "clbind_functoids.h"

    template <typename Pols , typename OT, typename Method>
    class IndirectVariadicMethoid : public Functoid {};

#include "clbind_methoids.h"

    struct scope_ {
	scope_& operator,(const scope_& a) {
	    // do nothing
	    return *this;
	}
    };

    extern scope_ _ReturnScope;


    template <typename RT,typename... ARGS,typename Policies=policies_<> >
    inline scope_& def_( const string& name, RT (*fp)(ARGS...) , Policies, const string& arguments="", const string& declares="", const string& docstring="")
    {_G();
        string currentPackageName = _lisp->getCurrentPackage()->packageName();
	Functoid* f = new VariadicFunctoid<Policies,RT(ARGS...)>(currentPackageName+"::"+name,fp);
	lisp_defun_lispify_name(currentPackageName,name,f,arguments,declares,docstring,true,true,sizeof...(ARGS)-CountPureOutValues<Policies>::value);
	return _ReturnScope;
    }


#define CLBIND_SET_CLASS_SYMBOL(ty,sym) {lisp_RegisterClassSymbol<ty>(sym);}
#define CLBIND_GET_CLASS_SYMBOL(ty) (lisp_RttiToClassSymbol<ty>())



// ----------------------------------------
// ----------------------------------------

    struct NullBasesType {
        NullBasesType() {};

	void registerBases()
	{
	    core::Class_sp theClass = core::eval::funcall(cl::_sym_findClass,this->_ClassSymbol).as<core::Class_O>();
	    core::Class_sp directSuperClass = core::eval::funcall(cl::_sym_findClass,core::_sym_ExternalObject_O).as<core::Class_O>();
	    theClass->appendDirectSuperclassAndResetClassPrecedenceList(directSuperClass);
	    BLOG(BF("There were no bases specified for %s so its base is ExternalObject_O") % _rep_(this->_ClassSymbol));
	}

	NullBasesType(Symbol_sp c) : _ClassSymbol(c) {
	    this->registerBases();
	}

	Symbol_sp _ClassSymbol;
    };


    template < typename OT, typename BASES=NullBasesType>
    class class_base;
    class class_registration;

    template <typename... BASE_LIST>
    struct bases_ {
        bases_() {};
	void addBaseImpl(Symbol_sp sym )
	{
	    BLOG(BF("    Adding base class %s") % _rep_(sym));
	    core::Class_sp theClass = core::eval::funcall(cl::_sym_findClass,this->_ClassSymbol).template as<core::Class_O>();
	    core::Class_sp directSuperClass = core::eval::funcall(cl::_sym_findClass,sym).as<core::Class_O>();
	    theClass->appendDirectSuperclassAndResetClassPrecedenceList(directSuperClass);
	}

	template <class HEAD, class... REST>
	void addBase() {
	    Symbol_sp baseClassSymbol = CLBIND_GET_CLASS_SYMBOL(HEAD);
	    this->addBaseImpl(baseClassSymbol);
//	    this->addBase<REST...>();
	}

	void addBase() {
	    BLOG(BF("       ------ Done"));
	    // Do nothing
	}


	void registerBases()
	{
	    BLOG(BF("Registering bases of %s") % _rep_(this->_ClassSymbol));
	    this->addBase<BASE_LIST...>();
	};

	Symbol_sp 	_ClassSymbol;
	bases_(Symbol_sp c) : _ClassSymbol(c) {
	    this->registerBases();
	};
    };



// ----------------------------------------
// ----------------------------------------

    struct	MethodDefinition {
	string		_Name;
	int		_ClassSymbol;
	Functoid*	_Methoid;
    };

//    typedef	enum { no_init,class_name_init, make_class_name_init } maker_enum;


    namespace detail {
        template < typename OT, typename BASES>
        class class_base : public scope_
        {
        public:
            typedef class_base<OT,BASES> 	ThisType;
            typedef OT 			ExternalType;
            typedef Wrapper<OT>     	WrapperType;
            typedef BASES 			Bases;
        public:
            class_registration*     m_registration;
        public:

            void add_cast(class_id src, class_id target, cast_function cast);
        


            template <class Src, class Target>
            void add_downcast(Src*, Target*, boost::mpl::true_)
            {
                add_cast(
                    detail::registered_class<Src>::id
                    , detail::registered_class<Target>::id
                    , detail::dynamic_cast_<Src, Target>::execute
                    );
            }

            template <class Src, class Target>
            void add_downcast(Src*, Target*, boost::mpl::false_)
            {}


            void add_wrapper_cast(detail::null_type*)
            {}

            template <class U>
            void add_wrapper_cast(U*)
            {
                add_cast(
                    detail::registered_class<U>::id
                    , detail::registered_class<OT>::id
                    , detail::static_cast_<U,OT>::execute
                    );

                add_downcast((OT*)0, (U*)0, boost::is_polymorphic<OT>());
            }

            void setup_class(string const& className = "")
            {_G();
                IMPLEMENT_MEF(BF("Move me into class.cc"));
#if 0
                BLOG(BF("---------  class_base::setup_class %s") % className);
                string currentPackageName = _lisp->getCurrentPackage()->packageName();
                Symbol_sp classSymbol = _lisp->internWithPackageName(_CurrentPackageName,core::lispify_symbol_name(className));
                CLBIND_SET_CLASS_SYMBOL(OT,classSymbol);
                classSymbol->exportYourself();
                BLOG(BF("Interned class symbol %s") % _rep_(classSymbol));
                /*! Accumulate all of the classes in reverse order of how they were initialized
                  in the core::*all-cxx-classes* variable */
                if ( core::_sym_STARallCxxClassesSTAR->symbolValueUnsafe() ) {
                    BLOG(BF("Adding to STARallCxxClassesSTAR"));
                    core::_sym_STARallCxxClassesSTAR->setf_symbolValue(
                        Cons_O::create(classSymbol, core::_sym_STARallCxxClassesSTAR->symbolValue()));
                }
                // 
                // If the class isn't in the class table then add it
                //
                if ( core::eval::funcall(cl::_sym_findClass,classSymbol,_Nil<core::T_O>()).nilp())
                {
                    BLOG(BF("Adding class(%s) to environment")% _rep_(classSymbol));
                    _lisp->addClass(classSymbol);
                }

                //
                // Now register the base clases
                //
                Bases bases(classSymbol);

                //
                // Now set up the wrapper class
                //
                stringstream ss;
                ss << "WRAPPER-" << core::lispify_symbol_name(className);
                core::Symbol_sp wrapperClassSymbol = _lisp->internWithPackageName(_CurrentPackageName,ss.str());
                lisp_RegisterClassSymbol<Wrapper<OT> >(wrapperClassSymbol);

                add_wrapper_cast((ExternalType*)0);
//            generate_baseclass_list(Bases());
#endif
            }
            // ctor
            class_base() {};
            class_base(string const& className)
            {_G();
                this->setup_class(className);
            }
            template <typename Policies=policies_<>,typename RT,class... ARGS>
            class_base& def( const string& name, RT (OT::*mp)(ARGS...),
                             const string& lambda_list="", const string& declares="", const string& docstring="", bool autoExport=true )
            {_G();
                Functoid* m = new IndirectVariadicMethoid<Policies,Wrapper<OT>,RT(OT::*)(ARGS...)>(name,mp);
                lisp_defineSingleDispatchMethod(name,CLBIND_GET_CLASS_SYMBOL(OT),m,0,lambda_list,declares,docstring,autoExport,sizeof...(ARGS)+1-CountPureOutValues<Policies>::value);
                return *this;
            }


            template <typename Policies=policies_<>,typename RT,class... ARGS>
            class_base& def( const string& name, RT (OT::*mp)(ARGS...) const,
                             const string& lambda_list="", const string& declares="", const string& docstring="", bool autoExport=true )
            {_G();
                Functoid* m = new IndirectVariadicMethoid<Policies,Wrapper<OT>,RT(OT::*)(ARGS...) const>(name,mp);
                lisp_defineSingleDispatchMethod(name,CLBIND_GET_CLASS_SYMBOL(OT),m,0,lambda_list,declares,docstring,autoExport,sizeof...(ARGS)+1-CountPureOutValues<Policies>::value);
                return *this;
            }






        };

    };



    template <typename OT,typename BASES=NullBasesType>
    class class_ : public detail::class_base<OT,BASES> {
    public:
	class_(string const& className)
	{_G();
	    this->setup_class(className);
	}
    };








    struct	EnumValueDefinition {
	string		_Name;
	int		_Value;
    };


    template <typename X>
    class enum_
    {
    private:
	SymbolToEnumConverter_sp	_Converter;
	Symbol_sp		_PredefinedConverterSymbolId;
    public:
	enum_(Symbol_sp symbol, const string& title)
	{_G();
	    this->_PredefinedConverterSymbolId = symbol;
	    this->_Converter = SymbolToEnumConverter_O::create(title);
	    symbol->setf_symbolValue(this->_Converter);
	}

	enum_& value(Symbol_sp const& sym, X value )
	{_G();
	    lisp_extendSymbolToEnumConverter(this->_Converter,sym,sym,value);
	    return *this;
	}
	enum_& value(Symbol_sp const& name, Symbol_sp const& archiveName, X value )
	{_G();
	    lisp_extendSymbolToEnumConverter(this->_Converter,name,archiveName,value);
	    return *this;
	}
	Symbol_sp symbolFromEnum(int value)
	{_G();
	    return lisp_lookupSymbolForEnum(this->_PredefinedConverterSymbolId,(int)(value));
	}
    };

};












#endif // clbind_class_h
