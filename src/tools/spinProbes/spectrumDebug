#! /usr/bin/env python

from report import *


#profiling = True
profiling = False
if ( profiling ):
    import hotshot


import time
import getopt

from mbb import *
import sys
import random
import math

parm = True

from histogram import *
from cgBuilders import *
from cgOligomer import *
from monteCarlo import *
#from ploticus import *
from constrainedVector import *
from eprOligomer import *

from multiSpectrumContext import *


Debug = False
minimizer = "fmin_powell"






def main():
    if (len(sys.argv) <=1):
	argList = [sys.argv[0],"-h"]
    else:
	argList = sys.argv

    outputPrefix = "out/_opt"
    longOptions = [ "input=",
			"outputPrefix=",
			"step=",
			"spectrum=", "column=", "createNMer="
		  ]

    optlist, args = getopt.getopt(argList[1:],"h",longOptions)
    parmFile = "parms/dkp-pro4SS+pro4SS.xml"


    inputFile = ""
    step = 1
    outputPrefix + "out/_debug"
    spectra = []
    for opt,arg in optlist:
	if ( opt == "--input" ):
	    inputFile = arg
	if ( opt == "--outputPrefix=" ):
	    outputPrefix = arg
	if ( opt == "--step" ):
	    step = int(arg)
	if ( opt == "--spectrum" ):
	    spectrumFile = arg
	    column = 2
	if ( opt == "--column" ):
	    column = int(arg)
	if ( opt == "--createNMer" ):
	    print "createNMer arg: (%s)"%arg
	    nmer = int(arg)
	    spectra.append((spectrumFile,column,nmer))
	if ( opt == "-h" ):
	    print "Usage: %s [options] {--spectrum _specFile.xy_ --nmer #}"
	    print "  -h           = Help"
	    sys.exit(0)


    
    context = MultiSpectrumContext()
    context.setOutputPrefix(outputPrefix)
    context.setPlotIntermediateResults(True)

    for specFile,column,nmer in spectra:
	experimentalSpectrum = NumericalFunction()
	experimentalSpectrum.parseFromXYFile(specFile,1,column)
	experimentalSpectrum.setXAxisName("time(ns)")
	print "Adding spectrum for nmer: %d"%nmer
	context.addExperimentalSpectrum( "%dmer"%nmer, experimentalSpectrum )



    print "Reading xml file: |%s|"%inputFile
    print "Looking for step: ", step

    context.readContextFromXmlFileAtStep(inputFile,step)

    print "Spectral error going in    = ", context.getSpectralError()
    context.compareSpectra()
    print "Spectral error coming out  = ", context.getSpectralError()
#    print "Constraint error = ", context.getConstraintError()


if ( __name__ == "__main__" ):
    main()


