#! /bin/env python

import hotshot
import getopt

from mbb import *
import sys
import random
import math

#profiling = True
profiling = False
parm = True

from histogram import *
from cgBuilders import *
from cgOligomer import *
from monteCarlo import *
from ploticus import *
from rangers import *
from eprOligomer import *

Debug = False

ends = None
histo = None
watchCoup = None
directionXml = None
animationXml = None
OutputPrefix = "out/_out"


	

class MultiSpectrumComparer:
    def __init__(self):
	self._Oligomers = []

    def addEprOligomer(self,o):
	self._Oligomers.append(o)

    def doComparison(self,point,maxpoints,place,mcsteps):
	if ( len(self._Oligomers)==0 ):
	    raise("There are no SingleSpectrumOligomers defined")
	compSum = 0.0
	for z in self._Oligomers:
	    z.generatePredictedSpectrum(mcsteps,point,maxpoints,place)
	    comp = z.getRmsDifference()
	    compSum += comp*comp
	compSum /= float(len(self._Oligomers))
	return compSum

    def getOligomers(self):
	return self._Oligomers




def main():
    global ends, histo, watchCoup, directionXml, animationXml, OutputPrefix
    if (len(sys.argv) <=1):
	argList = [sys.argv[0],"-h"]
    else:
	argList = sys.argv

    longOptions = [ "outputPrefix=",
			"animation",
			"points=",
			"spectrum=",
			"column=",
			"nmer="  ]

    ranger = LinearRanger( ["logstep",
			"rotx0","rotxk",
			"roty0","rotyk",
			"rotz0","rotzk",
			"rotyy0","rotyyk",
			"rotzz0","rotzzk",
			"dist0","distk"])
    longOptions.extend(ranger.getRangeOptionsForGetOpt())
    optlist, args = getopt.getopt(argList[1:],"h",longOptions)
    maxSteps = 100000
    parmFile = "parms/dkp-pro4SS+pro4SS.xml"
    points  = 1
    animationOn = False
    spectraAndOligomers = []
    appendToFile = True
    for opt,arg in optlist:
	if ( opt in ranger.getRangeOptions() ):
	    ranger.setRange(opt,arg)
	if ( opt == "--animation" ):
	    animationOn = True
	if ( opt == "--outputPrefix" ):
	    OutputPrefix = arg
        if ( opt == "--points" ):
	     points = int(arg)
	if ( opt == "--spectrum" ):
	    spectrumFile = arg
	    column = 2
	if ( opt == "--column" ):
	    column = int(arg)
	if ( opt == "--nmer" ):
	    nmer = int(arg)
	    print "Adding oligomer with %d pro4(SS) monomers and a spectrum in: %s"%(nmer,spectrumFile)
	    spectraAndOligomers.append((nmer,spectrumFile,column))
	if ( opt == "-h" ):
	    print "Usage: %s [options] {--spectrum _specFile.xy_ --nmer #}"
	    print "  -h           = Help"
	    sys.exit(0)

    if ( not ranger.isRangeSet("logstep") ):
        ranger.setRange("--slogstep",5)
    ranger.initializePosition(points) 
    ssparm = CGParameterizedPro4Builder()
    ssparm.defineFromFile(parmFile)
#    ssparm.modifyRotX(rotx0,math.pow(10,rotxk))
#    ssparm.modifyRotY(roty0,math.pow(10,rotyk))
#    ssparm.modifyRotZ(rotz0,math.pow(10,rotzk))
#    ssparm.modifyRotYY(rotyy0,math.pow(10,rotyyk))
#    ssparm.modifyRotZZ(rotzz0,math.pow(10,rotzzk))
#    ssparm.modifyDist(dist0,math.pow(10,distk))
#    if ( points > 1 ):
#	irotx0 = (erotx0 - rotx0)/(points-1)
#	irotxk = (erotxk - rotxk)/(points-1)
#	iroty0 = (eroty0 - roty0)/(points-1)
#	irotyk = (erotyk - rotyk)/(points-1)
#	irotz0 = (erotz0 - rotz0)/(points-1)
#	irotzk = (erotzk - rotzk)/(points-1)
#	irotyy0 = (erotyy0 - rotyy0)/(points-1)
#	irotyyk = (erotyyk - rotyyk)/(points-1)
#	irotzz0 = (erotzz0 - rotzz0)/(points-1)
#	irotzzk = (erotzzk - rotzzk)/(points-1)
#	idist0 = (edist0 - dist0)/(points-1)
#	idistk = (edistk - distk)/(points-1)

    builderSS_dkp_SS = CGTableBuilder()
    builderSS_dkp_SS.appendMatrices("parms/middle_parameters.xml",
						"dkp-OSS2+OSS3")
    builderSS_dkp_SSend = CGTableBuilder()
    builderSS_dkp_SSend.appendMatrices("parms/lead_parameters.xml",
						"dkp-OSS5+OSS2")
#    builderSS_dkp_SSend.outputValues("out/_table_SS_dkp_SSlead.txt")

    builderSS_main_Poac = CGTableBuilder()
    builderSS_main_Poac.appendMatrices("parms/lead_parameters.xml",
						"main-OSS2+POA3")
#    builderSS_dkp_SSend.outputValues("out/_table_lead_poac.txt")

    builderSS_back_Poac = CGTableBuilder()
    builderSS_back_Poac.appendMatrices("parms/tail_parameters.xml",
						"back-OSS4+POA5")
#    builderSS_back_Poac.outputValues("out/_table_back_poac.txt")



	#
	# Build all of the EprOligomers
	#
    spectrumComparer = MultiSpectrumComparer()
    for nmer,specFile,column in spectraAndOligomers:
	print "Creating %d-mer oligomer with spectrum: %s"%(nmer,specFile)
	eprOlig = EprOligomer()
	eprOlig.createNmer(nmer,builderSS_back_Poac, ssparm,
				builderSS_dkp_SSend,builderSS_main_Poac,
				OutputPrefix )
	eprOlig.setExperimentalSpectrumFileName(specFile,column)
	if ( animationOn ):
	    eprOlig.turnOnAnimation()
	spectrumComparer.addEprOligomer(eprOlig)
    outputFile = "%s_results.pl"%OutputPrefix

    pout = Ploticus(outputFile,"point","rms")
    results = NumericalFunction()
    for i in range(0,points):
	print "Calculating point ========================================="
	ssparm.modifyUsingRangerPosition(ranger)
	mcsteps = pow(10,ranger.getPositionVariable("logstep"))
	place = ranger.getPositionDescription(i)
	print place,
	res = spectrumComparer.doComparison(i,points,place,mcsteps)
	results.addValues(i,res)
	print "\nResult = ",res
	ranger.advancePosition()
	if ( animationOn ):
	    for olig in spectrumComparer.getOligomers():
	        olig.saveAnimation("%s_time%d"%(OutputPrefix,i))
		olig.turnOnAnimation()
    pout.addData(results,"rms spectral fit","")
    pout.finish()

    for z in spectrumComparer.getOligomers():
	z.finishPlot()

if (__name__ == "__main__" ):
    if ( profiling ):
        prof = hotshot.Profile("hotshot_edi_stats_new")
        prof.runcall(main)
        prof.close()
    else:
        main()

