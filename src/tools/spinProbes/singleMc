#! /bin/env python

import hotshot
import getopt

from mbb import *
import sys
import random
import math

#profiling = True
profiling = False
parm = True

from histogram import *
from cgBuilders import *
from cgOligomer import *
from monteCarlo import *


ends = None
histo = None
watchCoup = None
directionXml = None
animationXml = None


def everyStepCallback(olig,cnt):
    if ( watchCoup != None ):
	if ( directionXml != None ):
	    watchCoup.renderEquilibriumToXml(directionXml)
    olig.build()
    vs = ends[0].getCoordinates().getOrigin()
    ve = ends[1].getCoordinates().getOrigin()
    vDiff = ve.sub(vs)
    histo.addValue(vDiff.length())
    if ( cnt%50000 == 0 ):
	sys.stdout.write("\nStep: %6d "%cnt) 
	sys.stdout.flush()
    if ( cnt%1000 == 0 ):
	sys.stdout.write(".")
	sys.stdout.flush()
    if ( cnt%100==0 ):
	if ( animationXml != None ):
	    animationXml.addChild(olig.renderAsXml())
	if ( directionXml != None ):
	    directionXml.addChild(watchCoup.renderDirectionAsXml())


#def doAll(parmFile,nmer,maxSteps,outputFile,animationXml):




def main():
    global ends, histo, watchCoup, directionXml, animationXml
    optlist, args = getopt.getopt(sys.argv[1:],"ha:s:n:o:p:d:",
			["rotx0=","rotxk=",
			"roty0=","rotyk=",
			"rotz0=","rotzk=",
			"rotyy0=","rotyyk=",
			"rotzz0=","rotzzk=",
			"dist0=","distk="])
    maxSteps = 100000
    nmer = 4
    outputFileTemplate = "_histo%dmer.txt"
    parmFile = "dkp-pro4SS+pro4SS.xml"
    animationFileName = None
    directionFileName = None
    rotx0 = 0.0
    rotxk = 1.0
    roty0 = 0.0
    rotyk = 1.0
    rotz0 = 0.0
    rotzk = 1.0
    rotyy0 = 0.0
    rotyyk = 1.0
    rotzz0 = 0.0
    rotzzk = 1.0
    dist0 = 0.0
    distk = 1.0
    for opt,arg in optlist:
	if ( opt == "--rotx0" ):
	    rotx0 = float(arg)
	    print "Modified rotx0 to: ",rotx0
	if ( opt == "--rotxk" ):
	    rotxk = float(arg)
	    print "Modified rotxk to: ",rotxk
	if ( opt == "--roty0" ):
	    roty0 = float(arg)
	    print "Modified roty0 to: ",roty0
	if ( opt == "--rotyk" ):
	    rotyk = float(arg)
	    print "Modified rotyk to: ",rotyk
	if ( opt == "--rotz0" ):
	    rotz0 = float(arg)
	    print "Modified rotz0 to: ",rotz0
	if ( opt == "--rotzk" ):
	    rotzk = float(arg)
	    print "Modified rotzk to: ",rotzk
	if ( opt == "--rotyy0" ):
	    rotyy0 = float(arg)
	    print "Modified rotyy0 to: ",rotyy0
	if ( opt == "--rotyyk" ):
	    rotyyk = float(arg)
	    print "Modified rotyyk to: ",rotyyk
	if ( opt == "--rotzz0" ):
	    rotzz0 = float(arg)
	    print "Modified rotzz0 to: ",rotzz0
	if ( opt == "--rotzzk" ):
	    rotzzk = float(arg)
	    print "Modified rotzzk to: ",rotzzk
	if ( opt == "--dist0" ):
	    dist0 = float(arg)
	    print "Modified dist0 to: ",dist0
	if ( opt == "--distk" ):
	    distk = float(arg)
	    print "Modified distk to: ",distk
	if ( opt == "-d" ):
	    directionFileName = arg
	if ( opt == "-a" ):
	    animationFileName = arg
	if ( opt == "-s" ):
	    maxSteps= int(arg)
	if ( opt == "-p" ):
	    parmFile = arg
	if ( opt == "-n" ):
	    nmer = int(arg)
	if ( opt == "-o" ):
	    outputFileTemplate = arg
	if ( opt == "-h" ):
	    print "Usage: %s [options] frameDir frameRoot"
	    print "  -h           = Help"
	    print "  -p [file]    = Parameter file, default %s"%parmFile
	    print "  -s [steps]   = Number of Monte Carlo steps, default 100000"
	    print "  -n [nmer]    = Number of SS monomers, default 4"
	    print "  -o [output]  = Output file name; default _histo\%dmer.txt"
	    sys.exit(0)
    outputFile = outputFileTemplate%nmer
    animationXml = None
    if ( animationFileName != None ):
	animationXml = xmlAnimation()
    directionXml = None
    if ( directionFileName != None ):
	directionXml = xmlGraphics("dir")
    
    ssparm = CGParameterizedPro4Builder()
    ssparm.defineFromFile(parmFile)
#    ssparm.outputValues("out/_middle_parameters.txt")
    ssparm.modifyRotX(rotx0,rotxk)
    ssparm.modifyRotY(roty0,rotyk)
    ssparm.modifyRotZ(rotz0,rotzk)
    ssparm.modifyRotYY(rotyy0,rotyyk)
    ssparm.modifyRotZZ(rotzz0,rotzzk)
    ssparm.modifyDist(dist0,distk)

    builderSS_dkp_SS = CGTableBuilder()
    builderSS_dkp_SS.appendMatrices("_middle_parameters.xml",
						"dkp-OSS2+OSS3")
    builderSS_dkp_SSend = CGTableBuilder()
    builderSS_dkp_SSend.appendMatrices("_lead_parameters.xml",
						"dkp-OSS5+OSS2")
#    builderSS_dkp_SSend.outputValues("out/_table_SS_dkp_SSlead.txt")

    builderSS_main_Poac = CGTableBuilder()
    builderSS_main_Poac.appendMatrices("_lead_parameters.xml",
						"main-OSS2+POA3")
#    builderSS_dkp_SSend.outputValues("out/_table_lead_poac.txt")

    builderSS_back_Poac = CGTableBuilder()
    builderSS_back_Poac.appendMatrices("_tail_parameters.xml",
						"back-OSS4+POA5")
#    builderSS_back_Poac.outputValues("out/_table_back_poac.txt")

    olig,tail,lead,watchCoup = buildNMer(nmer, builderSS_back_Poac, ssparm,
		builderSS_dkp_SSend,builderSS_main_Poac)
    
    ends = (tail,lead)

    olig.buildTransformCascade()
    olig.dump()


    histo = Histogram(30)
    animationXml = None
    if ( animationFileName != None ):
        animationXml = xmlAnimation()
    print "Running %dmer for %d steps"%(nmer,maxSteps)
    sys.stdout.flush()

    mc = MonteCarlo()
    mc.setOver(olig)
    mc.setCallbackEvery1Step(everyStepCallback)
    mc.run(maxSteps)
    print "\nRan %d steps"%maxSteps
    print "Steps rejected: %6d"%mc.getRejectedSteps()
    print "Steps accepted: %6d"%mc.getAcceptedSteps()
    print "Bin integral:   %6f"%histo.totalCounts()

#    monteCarlo(maxSteps,olig,(tail,lead),
#		histo,animationXml,directionXml,watchCoup)


    if ( animationXml != None ):
        xml = xmlGraphics("test")
        xml.addChild(animationXml)
        xml.writeToFileName(animationFileName)
    if ( directionXml != None ):
        xml = xmlGraphics("test")
        xml.addChild(directionXml)
        xml.writeToFileName(directionFileName)
    histo.dump(outputFile)

if (__name__ == "__main__" ):
    if ( profiling ):
        prof = hotshot.Profile("hotshot_edi_stats_new")
        prof.runcall(main)
        prof.close()
    else:
        main()

