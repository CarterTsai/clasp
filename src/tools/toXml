#! /usr/bin/env python
#
#




import sys
import os
import mbb
import mbb.chemInfo
import buildDatabase 
import getopt




#print "Pid = %d: press enter: "%os.getpid(); sys.stdin.readline()


class	StereoIterator:
    def __init__(self,atoms):
	self._Atoms = atoms
	self._Counters = [0]*len(atoms)

    # return False if there are no more stereoisomers
    def next(self):
	more = False
	for i in range(0,len(self._Atoms)):
	    self._Counters[i] += 1
	    if ( self._Counters[i] > 1 ):
		self._Counters[i] = 0
	    else:
		more = True
		break
	return more

    def asXml(self):
	xml = mbb.QuickDomNode("Stereoisomer")
	xml.addAttributeString("name","_stereoIsomerName_")
	xml.addAttributeString("pdb","_stereoIsomerPdbName_")
	xml.addAttributeString("enantiomer","_enantiomerName_")
	for i in range(0,len(self._Atoms)):
	    xmlConf = mbb.QuickDomNode("StereoConfiguration")
	    xmlConf.addAttributeString("atom",self._Atoms[i].getName())
	    config = "R"
	    if ( self._Counters[i]==1 ):
		config = "S"
	    xmlConf.addAttributeString("config",config)
	    xml.addChild(xmlConf)
	return xml




try:
    opts,cmdLineArgs = getopt.getopt(sys.argv[1:],"cr:")
except getopt.GetoptError:
    print "Error parsing arguments"
    sys.exit(0)

writeCoordinates = False
residueName = None
for o,a in opts:
    if ( o=="-c" ):
	writeCoordinates = True
    if ( o=="-r" ):
	residueName = a






if ( len(cmdLineArgs) != 1 ):
    print "Usage: %s _fileName_ "%sys.argv[0]
    sys.exit(0)

fileName = cmdLineArgs[0]

if ( fileName[-4:]==".off" ):
    agg = buildDatabase.readOffAggregate(fileName)
else:
    agg = mbb.new_RPAggregate()
    agg.open(fileName)


#print agg.asXml().asString()

mbb.chemInfo.defineStereochemicalConfigurationForAllAtoms(agg)
buildDatabase.assignHybridization.assignHybridizationForAggregate(agg)

mi = 1
for mol in agg.iterate_molecules:
    print "<!-- reading molecule#%d -->"%mi
    mi += 1
    if ( residueName == None ):
	res = mol.firstResidue()
	break
    if ( mol.numberOfResiduesWithName(residueName)==0 ):
	continue
    res = mol.getFirstResidueWithName(residueName)
    break

if ( res == None ):
    raise "Residue with name(%s) could not be found"%residueName

print "<!-- Found residue(%s)-->"%residueName
#
# Print XML of residue
#
print "<!-- Generated by %s -->"%sys.argv[0]
print res.asXmlString()

#
# Now generate a Stereochemistry entry
#
l = mbb.Loop()
stereocenters = []
prochiralCenters = []
l.loopTopGoal(res,mbb.ATOMS)
while ( l.advanceLoopAndProcess() ):
    a = l.getAtom()
    if ( a.getStereochemistryType() == mbb.Stereochemistry.chiralCenter ):
	stereocenters.append(a)
    elif ( a.getStereochemistryType() == mbb.Stereochemistry.prochiralCenter ):
	prochiralCenters.append(a)

stereoIterator = StereoIterator(stereocenters)
xml = mbb.QuickDomNode("Stereoisomers")
#
# Define prochiral centers
#
for pc in prochiralCenters:
    #find two lightest neighbors
    neighbors = []
    for n in pc.iterate_bonds:
	neighbors.append((n.getTo().getAtomicNumber(),n.getTo().getName(),n))
    neighbors.sort()
    pcXml = mbb.QuickDomNode("ProChiralCenter")
    pcXml.addAttributeString("center",pc.getName())
    pcXml.addAttributeString("diastereotopic1",neighbors[0][1])    
    pcXml.addAttributeString("diastereotopic2",neighbors[1][1])    
    xml.addChild(pcXml)

more = True
while ( more ):
    xml.addChild(stereoIterator.asXml())
    more = stereoIterator.next()

print "<!-- Fill in names for stereoisomers-->"
print xml.asString()


xml = mbb.QuickDomNode("Fragment")
xml.addAttributeString("_key","body")
str = "\n"
l = mbb.Loop()
l.loopTopResidueGoal(res,mbb.ATOMS)
while ( l.advanceLoopAndProcess() ):
    a = l.getAtom()
    str += "%s "%(a.getName())
str += "\n"
xml.setCharacters(str)
print xml.asString()
