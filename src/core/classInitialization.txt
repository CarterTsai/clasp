
hand-initialized classes:
a collection of classes are initialized in stages.
All of the classes are treated with each stage and then
the next stage is carried out.
The stages are:
1) set static_ClassSID() with the next SID
2) Create the class using hand_initialize_allocatable_class<>()
   a) this creates the class using hand_initialize_class<>()
      i)   Creates an instance of BuiltInClass_O() 
      ii)  Sets the class of this instance as classBuiltInClass
      iii) Sets the _WeakLisp object of this instance to the Lisp environment
      iv)  Resets the _Name of the instance to undefine it.
      v)   Sets instances _InstanceClassSID to static_classSID()
   b) hand_initialize_allocatable_class<O_T>() continues
   c) adds the instance to _lisp->_SIDIndexedBuiltInClassTable[static_classSID()]=instance
   d) Sets the static_AllocatorCallback() to the allocator
   e) Sets the instance Allocator with setInstanceAllocator()
   f) Allocates an instance of this new class and initializes it
   g) Sets this new object as the class's nil object
   h) Sets whether class-instance supports slots
3) Dumps info on the class so far
4) Sets the base class-instance of each class-instance
5) invokes define_class_name which does the following
   a) interns the name of the class-instance
   b) Puts the name in the _lisp->_PredefinedSymbols[static_classSID()] = name
   c) Puts the class into _lisp->_ClassTable[name] = class-instance
6) Later when the classes in initClasses.inc are registered
   the hand-coded classes will try and register themselves 
   - Only stuff that wasn't taken care of above should be done on the hand-coded-classes



initClasses.inc
1) In initClasses.inc is the call Register_core__BitVector_O(_lisp);
2) In each class.cc file is the macro EXPOSE_CLASS(core,BitVector_O);
3) EXPOSE_CLASS(core,BitVector_O) expands to a bunch of stuff that
   ends with Register_core__BitVector_O(core::Lisp_sp lisp)
4) Register_core__BitVector_O invokes:
   registerClass<BitVector_O>(exposeCando,exposePython,NULL,lisp)
5) registerClass<BitVector_O> is a template function defined in object.h
   a) Checks to make sure that base classes are defined
   b) If oClass::static_classSID() == UndefinedUnsignedInt then
      i) Interns the static_className() in the static_packageName()
      ii) Sets static_ClassSID() with the SID for the class name symbol
      iii) Sets the static_AllocatorCallback() to &new_Nil<BitVector_O>
      iv) Checks if exposeCandoFunction is defined and calls it
               exposeCandoFunction is a pointer to BaseVector_O::exposeCando() function
	       	 exposeCando() does the following:
	 i-1) invokes the template fn class_<BaseVector_O>
	      i-1-1) If class is not in _ClassTable
	      	     then lisp_addClass is invoked
	 i-2)
   
