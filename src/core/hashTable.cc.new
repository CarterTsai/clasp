#define	DEBUG_LEVEL_FULL

#include <limits>
#include "core/common.h"
#include "core/environment.h"
#include "multipleValues.h"
#include "hashTable.h"
#include "core/wrappers.h"
namespace core
{

// ----------------------------------------------------------------------
//

    EXPOSE_CLASS(core,HashTable_O);



#define ARGS_prim_sxhash "(object)"
    Object_sp prim_sxhash(Executable_sp exec, Cons_sp args, Environment_sp env, Lisp_sp lisp)
    {_F(lisp);
	Object_sp obj = env->lookup(_lisp->symbol(_sym_object));
	return Int_O::create(HashTable_O::sxhash_eql(obj,_lisp),_lisp);
    }

    uint hashString(const char* str,Lisp_sp lisp)
    {
	unsigned long hash = 5381;
	int c;
	while ((c = *str++))
	    hash = ((hash << 5) + hash) + (unsigned char)c; /* hash * 33 + c */
	return hash;
    }

    HashTable_sp HashTable_O::create(Symbol_sp test, uint sz,  Number_sp rehashSize, double rehashThreshold, Lisp_sp lisp)
    {_F(lisp);
	HashTable_sp hashTable = RP_Create<HashTable_O>(lisp);
	hashTable->resizeEmptyTable(sz);
	hashTable->_RehashSize = rehashSize;
	hashTable->_RehashThreshold = rehashThreshold;
	return hashTable;
    }

    int HashTable_O::sxhash_eq(Object_sp obj, Lisp_sp lisp)
    {_F(lisp);
	int res;
	if ( obj->isNil() ) return 0;
	{
	    res = (int)(((unsigned long long int)(obj.get()))&INT_MAX);
	}
	return (res & INT_MAX);
    }


    int HashTable_O::sxhash_eql(Object_sp obj, Lisp_sp lisp)
    {_F(lisp);
	int res;
	if ( obj->isNil() ) return 0;
	else if ( obj->numberQ() )
	{
	    return obj->as<Number_O>()->sxhash();
	} else if (obj->charP() )
	{
	    return obj->as<Char_O>()->sxhash();
	} else
	{
	    res = (int)(((unsigned long long int)(obj.get()))&INT_MAX);
	}
	return (res & INT_MAX);
    }



    void HashTable_O::exposeCando(::core::Lisp_sp lisp)
    {
	::core::class_<HashTable_O>(lisp->lisp())
//	.initArgs("(self)")
	;
	defNoWrapPackageWithArguments(CorePkg,"sxhash",&prim_sxhash,ARGS_prim_sxhash,lisp->lisp());
    }

    void HashTable_O::exposePython(::core::Lisp_sp lisp)
    {
	PYTHON_CLASS(Pkg(),HashTable,"","",lisp->lisp())
//	.initArgs("(self)")
	;
    }


    Object_sp HashTable_O::__init__(::core::Executable_sp exec, ::core::Cons_sp args, ::core::Environment_sp env, ::core::Lisp_sp lisp)
    {_F(lisp);
//      this->Base::__init__(exec,args,env,lisp);
//      arg = from_object<XXXX>::convert(env->lookup(this->Package(),"YYY"));
	return _lisp->onil();
    }

	
#if 0
    void HashTable_O::serialize(::serialize::SNodeP node)
    {
        this->Bases::serialize(node);
	// Archive other instance variables here
	node->attribute("test",this->_Test);
	node->archiveObject("rehashSize",this->_RehashSize);
	node->attribute("rehashThreshold",this->_RehashThreshold);
    }
#endif

    void HashTable_O::archiveBase(::core::ArchiveP node)
    {
	IMPLEMENT_ME();
//        this->Bases::archiveBase(node);
	// Archive other instance variables here
    }


    void HashTable_O::initialize()
    {_OF();
        this->Base::initialize();
	this->_KeyCount = 0;
	this->_HashTableEntryCount = 0;
    }


    void HashTable_O::resizeEmptyTable(uint sz)
    {_OF();
	this->_HashTable.resize(sz,_lisp->cnil());
    }


    uint HashTable_O::sxhash(Object_sp obj) const
    {_OF();
	return HashTable_O::sxhash_eql(obj,_lisp);
    }



    uint HashTable_O::hashTableCount() const
    {_OF();
	return this->_KeyCount;
    }

    uint HashTable_O::calculateHashTableCount() const
    {_OF();
	uint cnt = 0;
	for ( Vector0<Cons_O>::const_iterator it=this->_HashTable.begin();
	      it!=this->_HashTable.end(); it++ )
	{
	    cnt += (*it)->length();
	}
	return cnt;
    }



    uint HashTable_O::hashTableSize() const
    {_OF();
	return this->_HashTable.size();
    }

    Symbol_sp HashTable_O::hashTableTest() const
    {_OF();
	return this->_Test;
    }




    bool HashTable_O::keyTest(Object_sp entryKey, Object_sp searchKey) const
    {_OF();
	return entryKey->equal(searchKey);
    }



    Cons_sp HashTable_O::findAssoc(uint index, Object_sp key) const
    {_OF();
	for ( Cons_sp cur = this->_HashTable[index];
	      cur->notNil(); cur = cur->cdr() )
	{
	    if ( this->keyTest(cur->ocar()->as<Cons_O>()->ocar(),key) ) return cur;
	}
	return _lisp->cnil();
    }


    MultipleValues_sp HashTable_O::gethash(Object_sp key,Object_sp defaultValue ) const
    {_OF();
	uint hash = this->sxhash(key);
	uint index = hash % this->_HashTable.size();
	Cons_sp keyValueCons = this->findAssoc(index,key);
	if ( keyValueCons->isNil() )
	{
	    return MultipleValues_O::create(defaultValue,_lisp->onil(),_lisp);
	}
	Object_sp res = keyValueCons->ocar()->as<Cons_O>()->ocdr();
	return MultipleValues_O::create(res,_lisp->_true(),_lisp);
    }

    Object_sp HashTable_O::puthash(Object_sp key, Object_sp value)
    {_OF();
	uint hash = this->sxhash(key);
	uint index = hash % this->_HashTable.size();
	Cons_sp keyValueCons = this->findAssoc(index,key);
	if ( !keyValueCons->isNil() )
	{
	    keyValueCons->setOCdr(value);
	    return value;
	}
	Cons_sp oneAssoc = Cons_O::create(key,value,_lisp);
	Cons_sp one = Cons_O::create(oneAssoc,this->_HashTable[index],_lisp);
	if ( this->_HashTable[index]->isNil() ) this->_HashTableEntryCount++;
	this->_HashTable[index] = one;
	this->_KeyCount++;
	if ( this->_HashTableEntryCount > this->_RehashThreshold*this->_HashTable.size() )
	{
	    this->expandHashTable();
	}
	return value;
    }

    void HashTable_O::expandHashTable()
    {_OF();
	uint newSize = 0;
	if ( this->_RehashSize->integerQ() )
	{
	    newSize = this->_HashTable.size() + this->_RehashSize->as<Int_O>()->get();
	} else if ( this->_RehashSize->realQ() )
	{
	    newSize = this->_HashTable.size() * this->_RehashSize->as<Real_O>()->get();
	}
	Vector0<Cons_O>	oldTable;
	oldTable.swap(this->_HashTable);
	this->resizeEmptyTable(newSize);
	for ( Vector0<Cons_O>::const_iterator it = oldTable.begin(); it!=oldTable.end(); it++ )
	{
	    Cons_sp next;;
	    for ( Cons_sp cur = (*it); cur->notNil(); cur = next )
	    {
		next = cur->cdr();
		uint hash = this->sxhash(cur->car<Cons_O>()->ocar());
		uint index = hash % this->_HashTable.size();
		cur->setCdr(this->_HashTable[index]);
		this->_HashTable[index] = cur;
	    }
	}
    }
    

}; /* core */
