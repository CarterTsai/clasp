#define	DEBUG_LEVEL_NONE
//
// (C) 2004 Christian E. Schafmeister
//




#include <string.h>
#include "foundation.h"
#include <iostream>
#include <vector>
//#include	<strings>
#include <stdio.h>
#include "matter.h"
#include "loop.h"
#include "objectList.h"
#include "cons.h"
#include "lisp.h"
#include "ovector3.h"
#include "restraint.h"
#include "keyedArguments.h"
#include "boundingBox.h"
#include "virtualAtom.h"
#include "alias.h"
#include "render.h"
#include "translators.h"
#include "wrappers.h"

namespace mbb {





//
// Constructor
//
O_Matter::O_Matter()
{
    REF_CREATE("O_Matter");
}

void	O_Matter::initialize()
{
    this->Base::initialize();
    this->_Id = 1; // UNDEFINED_ID;
    this->_NextContentId = 1;
    this->setContainedByNothing();
}


void	O_Matter::oldLispInitialize(RPKeyedArguments dict, RPLisp env )
{_F(this->lisp());
    this->Base::oldLispInitialize(dict,env);
    this->name = dict->getStringAndRemoveOrDefault("name","");
}

string O_Matter::__repr__() const
{
    stringstream ss;
    ss << this->className();
    return ss.str();
}


//
// copy constructor
//
O_Matter::O_Matter( const O_Matter& c ) : O_Object(c)
{
    REF_CREATE("O_Matter_copy");
    this->_NextContentId = c._NextContentId;
    this->_Id = c._Id;
    this->name = c.name;
    this->containerContainedBy = c.containerContainedBy;
}




//
// Destructor
//
O_Matter::~O_Matter()
{
MatterVectorIterator	aCur;
#if 0
    IF_DEBUG_ON({cout << "Matter::~Matter:  type=" << this->containerType
			<< " @" << this << endl;});
#endif
    REF_DELETE("O_Matter");
    this->eraseContents();
//    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
//	delete *aCur;
 //   }
}



//
// eraseContents
//
void	O_Matter::eraseContents()
{
    this->contents.erase( this->contents.begin(), this->contents.end() );
}


//
// hasContentWithName
//
bool	O_Matter::hasContentWithName(const string&    sName )
{_F(this->lisp());
MatterVectorIterator		aCur;

    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	LOG(BF("Looking at(%s) for(%s)") % (*aCur)->getName().c_str() % sName.c_str()  ); // vp0(( "Looking at(%s) for(%s)", (*aCur)->getName().c_str(), sName.c_str() ));
        if ( (*aCur)->getName() == sName ) {
            return true;
        }
    }
    return false;
}



void O_Matter::clearProperty(RPSymbol prop)
{_F(this->lisp());
    this->_Properties.erase(prop);
}

void O_Matter::setProperty(RPSymbol prop, RPObject val)
{_F(this->lisp());
    this->_Properties.set(prop,val);
}

void O_Matter::setPropertyTrue(RPSymbol prop)
{_F(this->lisp());
    this->_Properties.set(prop,this->lisp()->_boolean(true));
}

RPObject O_Matter::getProperty(RPSymbol prop)
{_F(this->lisp());
    if ( this->_Properties.count(prop) == 0 )
    {
	THROW(O_LispError("Unknown property: "+ prop->fullName() ));
    }
    return this->_Properties.get(prop);
}

RPObject O_Matter::getPropertyOrDefault(RPSymbol prop,RPObject defval)
{_F(this->lisp());
    if ( this->_Properties.count(prop) == 0 )
    {
	return defval;
    }
    return this->_Properties.get(prop);
}

bool O_Matter::hasProperty(RPSymbol prop)
{_F(this->lisp());
    return ( this->_Properties.count(prop) != 0 );
}



RPAtom	O_Matter::firstAtomWithName(const string& name)
{
    Loop l;
    l.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( l.advance() )
    {
	RPAtom a = l.getAtom();
	if ( a->getName() == name )
	{
	    return a;
	}
    }
    THROW(O_ContentException("Could not find atom with name: "+name));
}


void O_Matter::calculateVirtualAtomPositions()
{
    Loop l;
    l.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( l.advance() )
    {
	RPAtom a = l.getAtom();
	if ( a->isOfClass<O_VirtualAtom>() )
	{
	    RPVirtualAtom va = a->as<O_VirtualAtom>();
	    va->calculatePosition();
	}
    }
}


void O_Matter::connectAllCloseAtoms()
{_F(this->lisp());
vector<RPAtom>	atoms;
Loop		la;
    la.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( la.advanceLoopAndProcess() )
    {
        atoms.push_back(la.getAtom());
    }
    vector<RPAtom>::iterator ai, aj;
    for ( ai=atoms.begin(); ai<atoms.end()-1; ai++ )
    {
	Vector3 aipos = (*ai)->getPosition();
	for ( aj=ai+1; aj!=atoms.end(); aj++ )
	{
	    Vector3 ajpos = (*aj)->getPosition();
	    if ( fabs(ajpos.getX()-aipos.getX()) > 2.0 ) continue;
	    if ( fabs(ajpos.getY()-aipos.getY()) > 2.0 ) continue;
	    if ( fabs(ajpos.getZ()-aipos.getZ()) > 2.0 ) continue;
	    if ( (*ai)->isBondedTo(*aj) ) continue;
	    double distSquared = calculateDistanceSquared(aipos,ajpos);
	    if ( distSquared > 4.0 ) continue;
	    (*ai)->bondToSingle(*aj);
	}
    }
}








//
// contentWithName
//
RPMatter   O_Matter::contentWithName(const string&    sName )
{_F(this->lisp());
MatterVectorIterator	aCur;

    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	LOG(BF("Looking at(%s) for(%s)") % (*aCur)->getName().c_str() % sName.c_str()  ); // vp0(( "Looking at(%s) for(%s)", (*aCur)->getName().c_str(), sName.c_str() ));
        if ( (*aCur)->getName() == sName ) {
            return( (*aCur) );
        }
    }
    LOG(BF("Matter(%s) with %d contents does not contain content with name(%s)") % this->name.c_str() % this->contents.size() % sName.c_str()  ); // vp0(( "Matter(%s) with %d contents does not contain content with name(%s)", this->name.c_str(), this->contents.size(), sName.c_str() ));
    stringstream ss;
    ss << this->className() << " (" << this->name << ") does not contain name(" << sName << ")";
    THROW(O_ContentException(ss.str()));
}



void	O_Matter::makeAllAtomNamesInEachResidueUnique()
{_F(this->lisp());
MatterVectorIterator	aCur;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) 
    {
	(*aCur)->makeAllAtomNamesInEachResidueUnique();
    }
}

void	O_Matter::fillInImplicitHydrogensOnCarbon()
{_F(this->lisp());
MatterVectorIterator	aCur;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) 
    {
	(*aCur)->fillInImplicitHydrogensOnCarbon();
    }
}

void	O_Matter::randomizeAtomPositions()
{_F(this->lisp());
MatterVectorIterator	aCur;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) 
    {
	(*aCur)->randomizeAtomPositions();
    }
}


void	O_Matter::perturbAtomPositions(double dist)
{_F(this->lisp());
MatterVectorIterator	aCur;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) 
    {
	(*aCur)->perturbAtomPositions(dist);
    }
}





//
// contentIndexWithName
//
int	O_Matter::contentIndexWithName(const string& sName )
{
MatterVectorIterator	aCur;
int				i;
    i = 0;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++, i++ ) {
        if ( (*aCur)->getName() == sName ) {
            return( i );
        }
    }
    stringstream ss;
    ss << this->description() <<") does not contain name("<<sName<<")";
    THROW(O_LispError(ss.str()));
}


//
// contentWithId
//
RPMatter   O_Matter::contentWithId( int lid )
{
MatterVectorIterator	aCur;
RPMatter			c;

    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	c = (*aCur);
	LOG(BF("Looking at content with id(%d)") % c->getId() ); // vp0(( "Looking at content with id(%d)",c->getId()));
        if ( c->getId() == lid ) {
            return( c );
        }
    }
		// THROW an exception
    stringstream ss;
    ss << this->description() << ") does not contain id("<<lid<<")";
    THROW(O_LispError(ss.str()));
}

//
// 	hasContentWithId
//
bool	O_Matter::hasContentWithId( int lid )
{_F(this->lisp());
MatterVectorIterator	aCur;
RPMatter			c;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	c = (*aCur);
	LOG(BF("Looking at content with id(%d)") % c->getId() ); // vp0(( "Looking at content with id(%d)",c->getId()));
        if ( c->getId() == lid ) {
            return( true );
        }
    }
    return( false);
}


#if 0 //[
//
// contentWithStorageId
//
RPMatter   O_Matter::contentWithStorageId( int lid )
{
MatterVectorIterator	aCur;
char				msg[255];
char				str1[255];
RPMatter			c;

    LOG(BF("Looking in container(%s) type(%c) for content with storageId(%d)") % this->name.c_str() % this->containerType % lid ); // vp0(( "Looking in container(%s) type(%c) for content with storageId(%d)",this->name.c_str(),this->containerType,lid));
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	c = (*aCur);
	LOG(BF("Looking at content with id(%d)") % c->getId() ); // vp0(( "Looking at content with id(%d)",c->getId()));
        if ( c->getStorageId() == lid ) {
            return( c );
        }
    }

		// THROW an exception
    stringstream ss;
    ss << "Matter("<<this->name<<") type("<<this->containerType<<") does not contain id("<<lid<<")";
    THROW(O_LispError(ss.str()));
}

//
// 	hasContentWithStorageId
//
bool	O_Matter::hasContentWithStorageId( int lid )
{
MatterVectorIterator	aCur;
RPMatter			c;
    LOG(BF("Looking in container(%s) type(%c) for content with storageId(%d)") % this->name.c_str() % this->containerType % lid ); // vp0(( "Looking in container(%s) type(%c) for content with storageId(%d)",this->name.c_str(),this->containerType,lid));
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++ ) {
	c = (*aCur);
	LOG(BF("Looking at content with id(%d)") % c->getId() ); // vp0(( "Looking at content with id(%d)",c->getId()));
        if ( c->getStorageId() == lid ) {
            return( true );
        }
    }
    return( false);
}
#endif //]


//
// contentIndexWithId
//
int	O_Matter::contentIndexWithId( int lid )
{
MatterVectorIterator	aCur;
int				i;
char				msg[255];
char				str1[255];
RPMatter			c;
    i = 0;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++, i++ ) {
	c = *aCur;
        if ( c->getId() == lid ) {
            return( i );
        }
    }
    strncpy( str1, &(this->name[0]), this->name.length() );
    str1[this->name.length()] = '\0';
    sprintf( msg, "container (%s) does not contain id (%d)", str1, lid );
    THROW(O_LispError("Content with id was not found"));
}



//
// contentIndex
//
int	O_Matter::contentIndex( RPMatter cc)
{
MatterVectorIterator	aCur;
int				i;
char				msg[255];
char				str1[255];
char				str2[255];
    i = 0;
    for ( aCur=this->contents.begin();aCur!=this->contents.end(); aCur++, i++ ) {
        if ( (*aCur) == cc ) {
            return( i );
        }
    }
    strncpy( str1, &(this->name[0]), this->name.length() );
    str1[this->name.length()] = '\0';
    strncpy( str2, &(cc->getName()[0]), (cc->getName()).length() );
    str2[(cc->getName()).length()] = '\0';
    sprintf( msg, "container (%s) does not contain (%s @%lX)", str1, str2, (unsigned long)(&cc) );
    THROW( O_LispError("Content not found" ));
}


//
// addMatter
//
void	O_Matter::addMatter( const RPMatter cp )
{
RPMatter	ctemp;
    ASSERT_NOT_NULL(cp);
    LOG(BF("Adding: %s of type: %c") % cp->getName().c_str() % cp->getMatterType()  ); // vp0(( "Adding: %s of type: %c",cp->getName().c_str(),cp->getMatterType() ));
    ctemp = this->sharedThis<O_Matter>();
    cp->setContainedBy(ctemp);
    LOG(BF("Adding %c:0x%08x to parent %c:0x%08x") % (cp->getMatterType()) % (cp.get()) % (this->getMatterType()) % (this ) ); // vp0(( "Adding %c:0x%08x to parent %c:0x%08x", cp->getMatterType(),cp.get(), this->getMatterType(),this ));
    	// Always add the content to the end of the vector
    // A lot depends on Residues maintaining the order of Atoms
    // throughout the various passes of building databases
    this->contents.push_back(cp);
    if ( this->_Id == UNDEFINED_ID )
    {
	this->_Id = this->_NextContentId;
	this->_NextContentId++;
    }
    LOG(BF("Finished adding") ); // vp0(("Finished adding" ));
}

//
// addMatterRetainId
//
// Add the container but retain the containers id
// This is used when we load a container from a file
//
void	O_Matter::addMatterRetainId( const RPMatter cp )
{
RPMatter	ctemp;
    LOG(BF("addMatterRetainId to %s adding container %s") % this->description().c_str() % cp->description().c_str()  ); // vp0(( "addMatterRetainId to %s adding container %s", this->description().c_str(), cp->description().c_str() ));
    ctemp = this->sharedThis<O_Matter>();
    cp->setContainedBy(ctemp);
    LOG(BF("Adding %c:0x%08x to parent %c:0x%08x") % (cp->getMatterType()) % (cp.get()) % (this->getMatterType()) % (this ) ); // vp0(( "Adding %c:0x%08x to parent %c:0x%08x", cp->getMatterType(),cp.get(), this->getMatterType(),this ));
    	// Always add the content to the end of the vector
    // A lot depends on Residues maintaining the order of Atoms
    // throughout the various passes of building databases
    this->contents.push_back(cp);
    if (this->_NextContentId <= cp->_Id ) 
    {
	this->_NextContentId = cp->_Id+1;
    }
    LOG(BF("Finished adding") ); // vp0(("Finished adding" ));
}

//
//	setId
//
//	Set the id of the contained object and update
//	nextContentId if it is too small
//
void	O_Matter::setId(int i)
{
    if ( this->_NextContentId < i ) {
	this->_NextContentId = i+1;
    }
    this->_Id = i;
}


//
// applyTransformToAtoms
//


void	O_Matter::applyTransformToAtoms( const Matrix& m )
{
MatterVectorIterator	a;
    LOG(BF("Transforming all atoms with:%s") % (m.asString().c_str() ) ); // vp0(( "Transforming all atoms with:%s", m.asString().c_str() ));
    for ( a=this->contents.begin(); a!=this->contents.end(); a++ ) {
	(*a)->applyTransformToAtoms(m);
    }
}




void	O_Matter::invertStructureAndRestraints()
{
		// First invert all of the contained objects
    MatterVectorIterator	a;
    for ( a=this->contents.begin(); a!=this->contents.end(); a++ ) {
	(*a)->invertStructureAndRestraints();
    }
		//
		//Then flip any restraints
    if ( this->hasRestraints() )
    {
	O_RestraintList::iterator it;
	for ( it=this->beginRestraints(); it!=this->endRestraints(); it++ )
	{
	    (*it)->invertStereochemistryOfRestraint();
	}
    }
}


void	O_Matter::translateAllAtoms(Vector3 trans)
{_F(this->lisp());
    Matrix transform;
    transform.translate(&trans);
    this->applyTransformToAtoms(transform);
}


bool	O_Matter::isContainedBy(RPMatter container)
{_F(this->lisp());
    RPMatter outer = this->sharedThis<O_Matter>();
    while ( 1 )
    {
	if ( outer == container ) return true;
	if ( !outer->containedByValid() ) return false;
	outer = outer->containedByLock();
    }
}


bool	O_Matter::testConsistancy(const RPMatter parentShouldBe )
{
MatterVectorIterator	a;
RPMatter			c;
    if ( this->containedByValid() ) {
        if ( (parentShouldBe != RPMatter(this->containedBy())) ) {
	    LOG(BF("O_Matter::testConsistancy failed!") ); // vp0(( "O_Matter::testConsistancy failed!" ));
	    LOG(BF("  My name/type = %s/%c") % this->getName().c_str() % this->getMatterType()  ); // vp0(( "  My name/type = %s/%c", this->getName().c_str(), this->getMatterType() ));
//	    LOG(BF("  My parent address = %x  was supposed to be: %x") % &(RPMatter(this->containedBy))() % &parentShouldBe  ); // vp0(( "  My parent address = %x  was supposed to be: %x",&(RPMatter(this->containedBy))(), &parentShouldBe ));
	}
	return false;
    } else {
	LOG(BF("  Parentage ok") ); // vp0(( "  Parentage ok" ));
    }
    c = this->sharedThis<O_Matter>();
    for ( a=this->contents.begin(); a!=this->contents.end(); a++ ) {
	c  = *a;
	if ( !(c->testConsistancy(this->sharedThis<O_Matter>())) ) {
	    LOG(BF("Child failed consistancy test") ); // vp0(("Child failed consistancy test"));
	    return false;
	}
    }
    return true;
}


void	O_Matter::reparent(RPMatter	newParent)
{
RPMatter			oldParent;
MatterVectorIterator	x;
WPMatter			wctemp;

//    oldParent = this->containedBy();
    this->setContainedBy(newParent);
    newParent->addMatter(this->sharedThis<O_Matter>());
}


int	O_Matter::totalNetResidueCharge()
{_F(this->lisp());
Loop	l;
    l.loopTopGoal(this->sharedThis<O_Matter>(),RESIDUES);
    int netCharge = 0;
    RPResidue	r;
    while ( l.advanceLoopAndProcess() )
    {
        r = l.getResidue();
	netCharge += r->getNetCharge();
    }
    return netCharge;
}



void	O_Matter::setAllAtomMasks(int m)
{_F(this->lisp());
Loop	l;
    l.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    RPAtom	a;
    while ( l.advanceLoopAndProcess() )
    {
        a = l.getAtom();
	a->setMask(m);
    }
}

/*
__BEGIN_DOC( candoScript.matter.setAtomAliasesForResiduesNamed, setAtomAliasesForResiduesNamed)
\scriptCmd{extendAliases}{Cons::residuesAndInterestingAtomNames Cons::atomAliases}\par

Lookup the residues in the Matter and set the atom aliases of the atoms.


\begin{verbatim}
setAtomAliasesForResiduesNamed (:
        (: 'glu(S) (aliasAtoms 'OE ) )
        (: 'glu(R) (aliasAtoms 'OE ) )
    )
    (atomAliases 'carbO )
\end{verbatim}
__END_DOC
 */
void	O_Matter::setAtomAliasesForResiduesNamed(RPCons parts, RPCons atomAliases )
{_F(this->lisp());
    if ( this->isOfClass<O_Atom>() )
    {
	THROW(O_LispError("Needs Aggregate, Molecule or Residue"));
    }
    LOG(BF("setAtomAliasesForResiduesNamed with parts(%s) atomAliases(%s)") % parts->__repr__().c_str() % atomAliases->__repr__().c_str()  ); // vp0(("setAtomAliasesForResiduesNamed with parts(%s) atomAliases(%s)", parts->__repr__().c_str(), atomAliases->__repr__().c_str() ));
    map<string,RPCons> residueNamesToAliasAtoms;
    for ( RPCons cur = parts; cur->notNil(); cur=cur->cdr() )
    {
	RPCons oneExtend = cur->car<O_Cons>();
	if ( oneExtend->length() != 2 )
	{
	    THROW(O_LispError("Each entry must have two elements: "+oneExtend->__repr__() ));
	}
	RPText residueName = oneExtend->car<O_Text>();
	RPCons aliasAtoms = oneExtend->ocadr()->as<O_Cons>();
	LOG(BF("residueName(%s) aliasAtoms(%s)") % residueName->get().c_str() % aliasAtoms->__repr__().c_str() ); // vp0(("residueName(%s) aliasAtoms(%s)", residueName->get().c_str(), aliasAtoms->__repr__().c_str()));
	residueNamesToAliasAtoms[residueName->get()] = aliasAtoms;
    }
    	//
	// Now set the alias atoms of the residues
	//
    Loop lResidues;
    lResidues.loopTopGoal(this->sharedThis<O_Matter>(),RESIDUES);
    while ( lResidues.advanceLoopAndProcess() )
    {
	RPResidue res = lResidues.getResidue();
	if ( residueNamesToAliasAtoms.count(res->getName())>0 )
	{
	    LOG(BF("%s:%d Setting aliases for residue(%s)") % (__FILE__) % (__LINE__) % (res->getName().c_str()) ); // vp0(( "%s:%d Setting aliases for residue(%s)", __FILE__,__LINE__,res->getName().c_str()));
	    RPCons aliasAtoms = residueNamesToAliasAtoms[res->getName()];
	    LOG(BF("setting aliases for residueName(%s) aliasAtoms(%s) atomAliases(%s)") % res->getName().c_str() % aliasAtoms->__repr__().c_str() % atomAliases->__repr__().c_str() ); // vp0(("setting aliases for residueName(%s) aliasAtoms(%s) atomAliases(%s)", res->getName().c_str(), aliasAtoms->__repr__().c_str(), atomAliases->__repr__().c_str()));
	    res->setAliasesForAtoms(aliasAtoms,atomAliases);
	} else
	{
	    LOG(BF("%s:%d Not setting aliases for residue(%s)") % (__FILE__) % (__LINE__) % (res->getName().c_str()) ); // vp0(( "%s:%d Not setting aliases for residue(%s)", __FILE__,__LINE__,res->getName().c_str()));
	}
    }
}




Vector3	O_Matter::geometricCenter() {
Vector3	sum;
int	count;
RPAtom	a;
Loop	l;
RPMatter	c;

    c = this->sharedThis<O_Matter>();
    sum.set(0,0,0);
    count = 0;
    l.loopTopGoal( c, ATOMS );
    while ((l.advanceLoopAndProcess())) {
	a = l.getAtom();
	sum = sum + a->getPosition();
	count++;
    }
    LOG(BF("geometricCenterOfMatter number of atoms = %d") % count  ); // vp0(( "geometricCenterOfMatter number of atoms = %d", count ));
    if ( count != 0 ) {
        sum = sum*(1.0/count);
    }
    LOG(BF("Geometric center = %f, %f, %f") % sum.getX() % sum.getY() % sum.getZ()  ); // vp0(( "Geometric center = %f, %f, %f", sum.getX(), sum.getY(), sum.getZ() ));
    return sum;
}


RPBoundingBox O_Matter::boundingBox(double pad) 
{_F(this->lisp());
Vector3	sum;
int	count;
RPAtom	a;
Loop	l;
RPMatter	c;

    c = this->sharedThis<O_Matter>();
    sum.set(0,0,0);
    count = 0;
    RPBoundingBox bbox = O_BoundingBox::create(this->lisp());
    l.loopTopGoal( c, ATOMS );
    while ((l.advanceLoopAndProcess())) {
	a = l.getAtom();
	bbox->expandToEncompassPoint(a->getPosition());
	count++;
    }
    bbox->pad(pad);
    return bbox;
}


RPCons O_Matter::contentsAsCons()
{_F(this->lisp());
    RPCons cur = O_Cons::nil(this->lisp());
    vector<RPMatter>::iterator	it;
    for ( it=this->contents.end()-1; it>=this->contents.begin(); it-- )
    {
	cur = O_Cons::create(*it,cur,this->lisp());
    }
    return cur;
}



RPObjectList	O_Matter::allAtoms()
{_F(this->lisp());
RPObjectList	atoms;
Loop		la;
    atoms = this->lisp()->create<O_ObjectList>();
    la.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( la.advanceLoopAndProcess() )
    {
        atoms->append(la.getAtom());
    }
    return atoms;
}


RPObjectList	O_Matter::allAtomsOfElement(Element element)
{_F(this->lisp());
RPObjectList	atoms;
Loop		la;
RPAtom		a;
    atoms = this->lisp()->create<O_ObjectList>();
    la.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( la.advanceLoopAndProcess() )
    {
        a = la.getAtom();
	if ( a->getElement() == element )
	{
            atoms->append(a);
	}
    }
    return atoms;
}


RPResidue	O_Matter::aliasResidueOrNil(RPAlias alias)
{_F(this->lisp());
    Loop lRes;
    lRes.loopTopGoal(this->sharedThis<O_Matter>(),RESIDUES);
    while ( lRes.advance() )
    {
	if ( lRes.getResidue()->recognizesMonomerAlias(alias->getMonomerAlias()) )
	{
	    return lRes.getResidue();
	}
    }
    return O_Residue::nil(this->lisp());
}

RPResidue O_Matter::aliasResidue(RPAlias alias)
{
    RPResidue a = this->aliasResidueOrNil(alias);
    if ( a->notNil() ) return a;
    THROW(O_LispError("could not find aliasResidue"));
}

RPAtom	O_Matter::aliasAtomOrNil(RPAlias alias)
{
    RPResidue res = this->aliasResidueOrNil(alias);
    if ( res->isNil() ) return O_Atom::nil(this->lisp());
    return res->atomWithAliasOrNil(alias->getAtomAlias());
}

RPAtom O_Matter::aliasAtom(RPAlias alias)
{
    RPAtom a = this->aliasAtomOrNil(alias);
    if ( a->notNil() ) return a;
    THROW(O_LispError("could not find aliasAtom"));
}





RPCons O_Matter::allAtomsOfElementAsList(Element element)
{_F(this->lisp());
RPCons		list;
Loop		la;
RPAtom		a;
    list = O_Cons::nil(this->lisp());
    la.loopTopGoal(this->sharedThis<O_Matter>(),ATOMS);
    while ( la.advanceLoopAndProcess() )
    {
        a = la.getAtom();
	if ( a->getElement() == element )
	{
	    list = O_Cons::create(a,list,this->lisp());
	}
    }
    return list;
}


void	O_Matter::archiveBase(RPNode node )
{_F(this->lisp());
    node->attribute<string>("name",this->name);
    LOG(BF("Got name(%s)") % this->name.c_str()  ); // vp0(( "Got name(%s)", this->name.c_str() ));
    node->attribute<int>("id",this->_Id);
    node->archiveSymbolMapIfDefined("properties",this->_Properties);
//    this->containerContainedBy = node->archiveWeakPointer("parent",
//    		this->containerContainedBy);

#ifdef	DEBUG_ON
    if ( node->saving() ) {
        LOG(BF("About to archive the contents of a O_Matter %d objects") % this->contents.size()  ); // vp0(( "About to archive the contents of a O_Matter %d objects", this->contents.size() ));
    }
#endif
    node->archiveObjectVector<O_Matter>("c",this->subMatter()+"s",this->contents);
    LOG(BF("Status") ); // vp0(( "Status"));
    if ( node->loading() ) {
	_BLOCK_TRACEV(("serializing container contents, there are %d objects", this->contents.size() ));
        	// Make sure all contents have us as a parent
	RPMatter c = this->sharedThis<O_Matter>();
	vector<RPMatter>::iterator ai;
	for ( ai=this->contents.begin(); ai!=this->contents.end(); ai++ ) {
	    (*ai)->setContainedBy(c);
	}
    }
    LOG(BF("Status") ); // vp0(( "Status"));
}




/*
__BEGIN_DOC( candoScript.general.contentWithName, contentWithName)
\scriptCmd{contentWithName}{object:matter name:text}

Return the content of the Matter(Aggregate/Molecule/Residue) with the name \scriptArg{name}.
__END_DOC
 */
RPObject	prim_contentWithName( RPExecutable e, RPCons args, RPEnvironment environ, RPLisp lisp)
{
    RPMatter matter = args->listref<O_Matter>(0);
    RPText name = args->listref<O_Text>(1);
    return matter->contentWithName(name->get());
}

/*! Subclass this method
 */
RPRestraintList	O_Matter::getRestraints()
{
    return O_RestraintList::nil(this->lisp());
}

RPRender O_Matter::rendered(RPKeyedArguments kopts)
{
    return O_Render::nil(this->lisp());
};

class	Matter_Exposer : public Exposer
{
void exposeCando()
{
    class_<O_Matter>(this->lisp())
    	.def( "setAtomAliasesForResiduesNamed", &O_Matter::setAtomAliasesForResiduesNamed)
        .def("translateAllAtoms",&O_Matter::translateAllAtoms)
        .def("connectAllCloseAtoms",&O_Matter::connectAllCloseAtoms)
        .def("aliasAtom",&O_Matter::aliasAtom)
        .def("aliasResidue",&O_Matter::aliasResidue)
        .def("aliasAtomOrNil",&O_Matter::aliasAtomOrNil)
        .def("aliasResidueOrNil",&O_Matter::aliasResidueOrNil)
	.def("getMatterType",&O_Matter::getMatterType)
	.def("getId",&O_Matter::getId)
	.def("numberOfAtoms",&O_Matter::numberOfAtoms)
	.def("setName",&O_Matter::setName)
	.def("getName",&O_Matter::getName_notConst)
	.def("boundingBox",&O_Matter::boundingBox)
	.def("contentsAsCons",&O_Matter::contentsAsCons)
	.def("allAtoms",&O_Matter::allAtoms)
	.def("invertStructureAndRestraints",&O_Matter::invertStructureAndRestraints)
	.def("allAtomsOfElementAsList",&O_Matter::allAtomsOfElementAsList)
//	.def("get_StorageId",&O_Matter::get_StorageId)
	.def("firstAtomWithName",&O_Matter::firstAtomWithName)
	.def("addMatter",&O_Matter::addMatter)
	.def("containedBy",&O_Matter::containedByLock)
	.def("setAllAtomMasks",&O_Matter::setAllAtomMasks)
	.def("hasContentWithName",&O_Matter::hasContentWithName)
	.def("contentWithName",&O_Matter::contentWithName)
	.def("makeAllAtomNamesInEachResidueUnique",&O_Matter::makeAllAtomNamesInEachResidueUnique)
	.def("contentIndexWithName",&O_Matter::contentIndexWithName)
	.def("contentWithId",&O_Matter::contentWithId)
//	.def("contentWith_StorageId",&O_Matter::contentWith_StorageId)
	.def("hasContentWithId",&O_Matter::hasContentWithId)
//	.def("hasContentWith_StorageId",&O_Matter::hasContentWith_StorageId)
	.def("contentIndexWithId",&O_Matter::contentIndexWithId)
	.def("contentIndex",&O_Matter::contentIndex)
	.def("contentAt",&O_Matter::contentAt)
	.def("contentSize",&O_Matter::contentSize)
	.def("randomizeAtomPositions",&O_Matter::randomizeAtomPositions)
	.def("perturbAtomPositions",&O_Matter::perturbAtomPositions)
	.def("fillInImplicitHydrogensOnCarbon",&O_Matter::fillInImplicitHydrogensOnCarbon)
	.def("applyTransformToAtoms",&O_Matter::applyTransformToAtoms)
	.def("testConsistancy",&O_Matter::testConsistancy)
	.def("geometricCenter", &O_Matter::geometricCenter )
	.def("getRestraints",&O_Matter::getRestraints)
	.def("calculateVirtualAtomPositions",&O_Matter::calculateVirtualAtomPositions)
    ;
}
void exposePython()
{
#ifdef USEBOOSTPYTHON
    boost::python::enum_<MatterIdsEnum>("MatterIds")
    	.value("containerId", containerId )
    	.value("aggregateId", aggregateId)
	.value("moleculeId", moleculeId)
	.value("residueId", residueId)
	.value("atomId", atomId)
	.value("bondId", bondId)
    ;

    boost::python::class_<O_Matter,
                boost::shared_ptr<O_Matter>,
		boost::python::bases <O_Object>,
		boost::noncopyable > ("Matter", boost::python::no_init )
//	.def(boost::python::init<int>())
    	.def( "setAtomAliasesForResiduesNamed", &O_Matter::setAtomAliasesForResiduesNamed)
	.def("getMatterType",&O_Matter::getMatterType)
	.def("getId",&O_Matter::getId)
	.def("boundingBox",&O_Matter::boundingBox)
	.def("allAtoms",&O_Matter::allAtoms)
	.def("invertStructureAndRestraints",&O_Matter::invertStructureAndRestraints)
	.def("allAtomsOfElement",&O_Matter::allAtomsOfElement)
//	.def("get_StorageId",&O_Matter::get_StorageId)
	.def("setName",&O_Matter::setName)
	.def("getName",&O_Matter::getName_notConst)
	.def("addMatter",&O_Matter::addMatter)
	.def("fillInImplicitHydrogensOnCarbon",&O_Matter::fillInImplicitHydrogensOnCarbon)
	.def("getRestraints",&O_Matter::getRestraints)
	.def("makeAllAtomNamesInEachResidueUnique",&O_Matter::makeAllAtomNamesInEachResidueUnique)
	.def("containedBy",&O_Matter::containedByLock)
	.def("setAllAtomMasks",&O_Matter::setAllAtomMasks)
	.def("hasContentWithName",&O_Matter::hasContentWithName)
	.def("firstAtomWithName",&O_Matter::firstAtomWithName)
	.def("contentWithName",&O_Matter::contentWithName)
	.def("contentIndexWithName",&O_Matter::contentIndexWithName)
	.def("contentWithId",&O_Matter::contentWithId)
	.def("contentsAsCons",&O_Matter::contentsAsCons)
//	.def("contentWith_StorageId",&O_Matter::contentWith_StorageId)
	.def("hasContentWithId",&O_Matter::hasContentWithId)
//	.def("hasContentWith_StorageId",&O_Matter::hasContentWith_StorageId)
	.def("contentIndexWithId",&O_Matter::contentIndexWithId)
	.def("contentIndex",&O_Matter::contentIndex)
	.def("randomizeAtomPositions",&O_Matter::randomizeAtomPositions)
	.def("perturbAtomPositions",&O_Matter::perturbAtomPositions)
	.def("contentAt",&O_Matter::contentAt)
	.def("contentSize",&O_Matter::contentSize)
	.def("applyTransformToAtoms",&O_Matter::applyTransformToAtoms)
	.def("testConsistancy",&O_Matter::testConsistancy)
	.def("calculateVirtualAtomPositions",&O_Matter::calculateVirtualAtomPositions)
	.def("geometricCenter",
		&O_Matter::geometricCenter,
		boost::python::return_value_policy<boost::python::return_by_value>() )
	.def( "__eq__", &O_Matter::eq)
    ;
#endif
}
};

OLD_CLASS_EXPOSE(O_Matter,Matter_Exposer);

};  // namespace mbb





