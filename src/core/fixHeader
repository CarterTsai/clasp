#! /usr/bin/python
import sys
import re


classDef_re = re.compile("^class\\s+(\\w+)\\s*:\\s*public\\s+([\\w:]+)\\s*{$")
findDef_re = re.compile("DEFINE_CLASS\\(\\s*(\\w+)\\s*,\\s*\"(\\w+)\"\\s*,\\s*([\\w:]+)\\s*\\)")

class ClassDefinition:
    def __init__(self,fileName,lines,macroLineNumber,classSymbol,className,baseSymbol):
        self._FileName = fileName
        self._Lines = lines
        self._DEFINE_CLASS_LineNumber = macroLineNumber
	self._ClassSymbol = classSymbol
	self._ClassName = className
	self._BaseSymbol = baseSymbol
	self.checkOk()
	self._EndLineNumber = self.findClosingBrace()

    def findClosingBrace(self):
	lin = self._DEFINE_CLASS_LineNumber-1
	braceCount = 0
	while lin < len(lines):
	    line = lines[lin]
	    braceCount += line.count("{")
	    braceCount -= line.count("}")
	    if ( braceCount <= 0 ):
	    	if ( line[0] != "}" ):
		    raise Exception, "**** Closing brace problem in file: %s  class: %s"%(self._FileName,self._ClassSymbol)
		return lin
	    lin += 1
        raise Exception, "Could not find closing brace"


    def checkOk(self):
        global classDef_re
	line = self._Lines[self._DEFINE_CLASS_LineNumber-1]
	classDefMatch = classDef_re.match(line)
	if ( not classDefMatch ):
	    raise Exception, "There is a problem with class: %s"%self._ClassSymbol
	classSymbol = classDefMatch.group(1)
	baseSymbol = classDefMatch.group(2)
        if ( self._ClassSymbol != classSymbol):
	    raise Exception, "Class class symbols don't match"
        if ( self._BaseSymbol != baseSymbol ):
	    raise Exception, "Base class symbols don't match"
	return True

    def dump(self):
        print("-------------")
	print("vvvv START%5d: %s"%(self._DEFINE_CLASS_LineNumber,self._Lines[self._DEFINE_CLASS_LineNumber]))
	print("^^^^   END%5d: %s"%(self._EndLineNumber,self._Lines[self._EndLineNumber]))
        startLine = self._DEFINE_CLASS_LineNumber
        for l in range(self._DEFINE_CLASS_LineNumber-1,self._EndLineNumber+1):
            print("  DEF-%3d: %s"%((l),self._Lines[l]))

    def changeCode(self,lines):
    	raise Exception, "Implement me"


    def fixLines(self):
        self._Lines[self._DEFINE_CLASS_LineNumber-1] = "SMART(%s);"%self._ClassName
	self._Lines[self._DEFINE_CLASS_LineNumber] = "__BEGIN_CLASS_DEFINITION(%s,%s,%s) // {"%(self._ClassSymbol,self._ClassName,self._BaseSymbol)
	self._Lines[self._EndLineNumber] = "__END_CLASS_DEFINITION(%s) //}"%self._ClassSymbol

def findClassDefinitions(fileName,lines):
    classDefs = []
    for defineLineNum in range(0,len(lines)):
        m = findDef_re.match(lines[defineLineNum])
	if ( m ):   # We found the DEFINE_CLASS line
	    classSymbol = m.group(1)
	    className = m.group(2)
	    baseSymbol = m.group(3)
	    classDefMatch = classDef_re.match(lines[defineLineNum-1])
	    if ( not classDefMatch ):
		raise Exception, "!!!!!!!!!    There is a problem with class: %s"%classSymbol
	    classDef = ClassDefinition(fileName,lines,defineLineNum,classSymbol,className,baseSymbol)
	    classDef.dump()
	    classDefs.append(classDef)
    return classDefs
	    
       
fileNames = sys.argv[1:]

for fileName in fileNames:
    fin = open(fileName,"r")
    lines = []
    for l in fin.readlines():
        lines.append(l.rstrip())
    fin.close()
    classDefinitions  = findClassDefinitions(fileName,lines)
    for cd in classDefinitions:
        cd.fixLines()
    fout = open(fileName,"w")
    for l in lines:
        fout.write("%s\n"%l)
    fout.close()

