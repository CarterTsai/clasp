

(defvar *a* (SymbolVectorMap))
(put *a* (SymbolVector '(:a :b)) 1)
(put *a* (SymbolVector '(:a :c)) 2)
(put *a* (SymbolVector '(:x :y)) 3)
(let ( (keys (keysAsCons *a*)))
  (print (% "Number of keys: %d" (length keys)))
  (print (% "keys: %s" (repr keys))))
(let ( (one (get *a* (SymbolVector '(:a :c)))))
  (print (% "value = %d" one ) ))
(defvar *x* (SymbolVector '(:m :n :o)))
(defvar *y* (SymbolVector '(:m :n :po)))
(print (% "equal *x*[%s] *y*[%s] == %d" (repr *x*) (repr *y*) (equal *x* *y*)))
(print (% "le *x*[%s] *y*[%s] == %d" (repr *x*) (repr *y*) (le *x* *y*)))
(print (% "ge *x*[%s] *y*[%s] == %d" (repr *x*) (repr *y*) (ge *x* *y*)))
