"<anonymous namespace>::ForceCodegenLinking"
"<anonymous namespace>::ForceInterpreterLinking"
"<anonymous namespace>::ForceJITLinking"
"<anonymous namespace>::ForceMCJITLinking"
"boost::container::ordered_range_t"
"boost::container::ordered_unique_range_t"
"boost::filesystem::path"
"boost::math::constants::detail::constant_initializer2::initializer"
"boost::math::constants::detail::constant_initializer::initializer"
"boost::math::detail::bessel_i0_initializer::init"
"boost::math::detail::bessel_i1_initializer::init"
"boost::math::detail::bessel_j0_initializer::init"
"boost::math::detail::bessel_j1_initializer::init"
"boost::math::detail::bessel_k0_initializer::init"
"boost::math::detail::bessel_k1_initializer::init"
"boost::math::detail::bessel_y0_initializer::init"
"boost::math::detail::bessel_y1_initializer::init"
"boost::math::detail::digamma_initializer::init"
"boost::math::detail::erf_initializer::init"
"boost::math::detail::erf_inv_initializer::init"
"boost::math::detail::expint_1_initializer::init"
"boost::math::detail::expint_i_initializer::init"
"boost::math::detail::expm1_initializer::init"
"boost::math::detail::igamma_initializer::init"
"boost::math::detail::lgamma_initializer::init"
"boost::math::detail::log1p_initializer::init"
"boost::math::detail::min_shift_initializer::init"
"boost::math::detail::owens_t_initializer::init"
"boost::math::detail::zeta_initializer::init"
"boost::math::lanczos::lanczos_initializer::init"
"boost::math::lanczos::lanczos_initializer<boost::math::lanczos::lanczos17m64, long double>::init"
"boost::no_property"
"boost::object_cache::data"
"boost::parameter::void_"
"boost::static_mutex"
"boost::unordered::piecewise_construct_t"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::QualType, internal::TypeMatcherhasDeducedTypeGetter, internal::TypeTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::AutoType, void, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::QualType, internal::TypeMatcherhasElementTypeGetter, internal::TypeTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::ArrayType, clang::ComplexType, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::QualType, internal::TypeMatcherhasValueTypeGetter, internal::TypeTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::AtomicType, void, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::QualType, internal::TypeMatcherinnerTypeGetter, internal::TypeTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::ParenType, void, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::QualType, internal::TypeMatcherpointeeGetter, internal::TypeTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::BlockPointerType, clang::MemberPointerType, clang::PointerType, clang::ReferenceType>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::TypeLoc, internal::TypeLocMatcherhasElementTypeGetter, internal::TypeLocTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::ArrayType, clang::ComplexType, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::TypeLoc, internal::TypeLocMatcherhasValueTypeGetter, internal::TypeLocTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::AtomicType, void, void, void>)>::Func"
"clang::ast_matchers::internal::TypeTraversePolymorphicMatcher<clang::TypeLoc, internal::TypeLocMatcherpointeeGetter, internal::TypeLocTraverseMatcher, void (clang::ast_matchers::internal::TypeList<clang::BlockPointerType, clang::MemberPointerType, clang::PointerType, clang::ReferenceType>)>::Func"
"reg::type_id"
"std::__1::adopt_lock_t"
"std::__1::allocator_arg_t"
"std::__1::defer_lock_t"
"std::__1::locale::id"
"std::__1::piecewise_construct_t"
"std::__1::try_to_lock_t"
"std::type_info"
;;; Warning: Add support for contains-smart-pointers-p for #S(DEPENDENT-SIZED-ARRAY-CTYPE :DESCRIPTION "char [sizeof(T)]")
