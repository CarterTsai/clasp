#! /usr/bin/python
import sys
import re

classDef_re = re.compile("^class\\s+(\\w+)\\s*:\\s*public\\s+([\\w:]+)\\s*{$")
beginDef_re = re.compile("__BEGIN_CLASS_DEFINITION\\(\\s*(\\w+)\\s*,\\s*(\\w+)\\s*,\\s*([\\w:]+)\\s*\\)")
endDef_re = re.compile("__END_CLASS_DEFINITION")
initializeDef_re = re.compile("\\s+void\\s+initialize\\(\\);")
initializeBody_re = re.compile("void\\s+([\w]+)::initialize\\(\s*\\)")




class ClassDefinition:
    def __init__(self,headerLines,sourceLines,beginLineNumber,classSymbol,className,baseSymbol):
        self._HeaderLines = headerLines
        self._SourceLines = sourceLines
	self._ClassSymbol = classSymbol
	self._ClassName = className
	self._BaseSymbol = baseSymbol
	self._HeaderLineNumbers = {}
	self._HeaderLineNumbers["begin"] = beginLineNumber
	self._SourceLineNumbers = {}
	self._InitializeDefLineNumber = None
	self._InitializeBodyLineNumber = None

    def insertHeaderLineNumber(self,lineNumber):
	for key,val in self._HeaderLineNumbers.iteritems():
	    if ( val > lineNumber ):
	        self._HeaderLineNumbers[key] += 1

    def setHeaderLineNumber(self,name,lineNum):
        assert name not in self._HeaderLineNumbers, "Line number named: %s already defined"%name
        self._HeaderLineNumbers[name] = lineNum

    def getHeaderLineNumber(self,name):
        return self._HeaderLineNumbers[name]

    def hasHeaderLineNumber(self,name):
        return name in self._HeaderLineNumbers

    def insertSourceLineNumber(self,lineNumber):
	for key,val in self._SourceLineNumbers.iteritems():
	    if ( val > lineNumber ):
	        self._SourceLineNumbers[key] += 1

    def setSourceLineNumber(self,name,lineNum):
        assert name not in self._SourceLineNumbers, "Line number named: %s already defined"%name
        self._SourceLineNumbers[name] = lineNum

    def getSourceLineNumber(self,name):
        return self._SourceLineNumbers[name]

    def hasSourceLineNumber(self,name):
        return name in self._SourceLineNumbers




    def getClassName(self):
        return self._ClassSymbol

    def getBaseClassName(self):
        return self._BaseSymbol

    def dump(self):
        print("-------------")
	print("vvvv START%5d: %s"%(self._DEFINE_CLASS_LineNumber,self._Lines[self._DEFINE_CLASS_LineNumber]))
	print("^^^^   END%5d: %s"%(self._EndLineNumber,self._Lines[self._EndLineNumber]))
        startLine = self._BeginLineNumber
        for l in range(self._BeginLineNumber-1,self._EndLineNumber+1):
            print("  DEF-%3d: %s"%((l),self._Lines[l]))

    def changeCode(self,lines):
    	raise Exception, "Implement me"



class Code:
    def __init__(self,headerFileName,sourceFileName):
        self._HeaderFileName = headerFileName
	self._SourceFileName = sourceFileName
	self._HeaderLines = []
	fin = open(headerFileName,"r")
	for l in fin.readlines():
	    self._HeaderLines.append(l.rstrip())
	fin.close()
	self._SourceLines = []
	fin = open(sourceFileName,"r")
	for l in fin.readlines():
	    self._SourceLines.append(l.rstrip())
	fin.close()
	self._Classes = {}
	self.parseFiles()

    def parseFiles(self):
    		# 
		# parse header
		#
	currentClass = None
	for ln in range(0,len(self._HeaderLines)):
	    line = self._HeaderLines[ln]
	    m = beginDef_re.match(line)
	    if ( m ):   # We found the __BEGIN_CLASS_DEFINITION line
		classSymbol = m.group(1)
	        if __debug__:
		    print("Found class symbol: %s"%classSymbol)
		className = m.group(2)
		baseSymbol = m.group(3)
		classDef = ClassDefinition(self._HeaderLines,self._SourceLines,ln,classSymbol,className,baseSymbol)
		self._Classes[classSymbol] = classDef
		currentClass = classDef
		continue
	    m = endDef_re.match(line)
	    if ( m ):   # We found __END_CLASS_DEFINITION
	        currentClass.setHeaderLineNumber("end",ln)
		currentClass = None
		continue
	    m = initializeDef_re.match(line)
	    if ( m ):   # We found void initialize
	        if ( currentClass != None ):
	            currentClass.setHeaderLineNumber("init",ln)
		continue

		#
		# parse body
		#
	if __debug__:
	    print("Parsing body")
	for ln in range(0,len(self._SourceLines)):
	    line = self._SourceLines[ln]
	    m = initializeBody_re.match(line)
	    if ( m ):   # We found the __BEGIN_CLASS_DEFINITION line
		classSymbol = m.group(1)
		if ( classSymbol in self._Classes ):
		    currentClass = self._Classes[classSymbol]
		    currentClass.setSourceLineNumber("init",ln)
		    if __debug__:
			print("Found source initialize for: %s"%classSymbol)
		    continue

    def replaceHeaderLine(self,text,lineNumber):
        self._HeaderLines[lineNumber] = text

    def getSourceLine(self,lineNumber):
        return self._SourceLines[lineNumber]


    def replaceSourceLine(self,text,lineNumber):
        self._SourceLines[lineNumber] = text

    def insertHeaderLine(self,text,lineNumber):
        self._HeaderLines.insert(lineNumber,text)
	for c in self._Classes.values():
	    c.insertHeaderLineNumber(lineNumber)

    def insertSourceLine(self,text,lineNumber):
        self._SourceLines.insert(lineNumber,text)
	for c in self._Classes.values():
	    c.insertSourceLineNumber(lineNumber)

    def getClassDefinitions(self):
        return self._Classes.values()

    def dumpHeader(self):
        print("----------- header dump -------------")
        for l in self._HeaderLines:
	    print l

    def dumpSource(self):
        print("----------- source dump -------------")
        for l in self._SourceLines:
	    print l


    def saveAll(self):
        fout = open(self._HeaderFileName,"w")
        for l in self._HeaderLines:
	    fout.write("%s\n"%l)
	fout.close()
        fout = open(self._SourceFileName,"w")
        for l in self._SourceLines:
	    fout.write("%s\n"%l)
	fout.close()
	
    


fileNames = [
"symbol.cc",
"intrinsics.cc",
"exhaustiveSearch.cc",
"search.cc",
"alias.cc",
"cons.cc",
"candoScript.cc",
"nameSpace.cc",
"lisp.cc",
"gaussianInterface.cc",
"gamessInterface.cc",
"builderDatabaseDependent.cc",
"externalInterface.cc",
"conformationExplorer.cc",
"superposableConformationCollection.cc",
"intArray.cc",
"zMatrix.cc",
"conformationCollection.cc",
"structureComparer.cc",
"superposeScorer.cc",
"chimera.cc",
"objectSet.cc",
"command.cc",
"commandOligomer.cc",
"numerics.cc",
"model.cc",
"render.cc",
"geometryScorer.cc",
"monomerPack.cc",
"scorer.cc",
"statusTracker.cc",
"hits.cc",
"stringList.cc",
"atomIndexer.cc",
"fragmentHolder.cc",
"scaffoldHolder.cc",
"builder.cc",
"oligomerBuilder.cc",
"coordinateDatabase.cc",
"frameTransform.cc",
"scaffold.cc",
"frame.cc",
"fragmentCoordinates.cc",
"monomerCoordinates.cc",
"structureList.cc",
"extractFragment.cc",
"anchor.cc",
"objectDictionary.cc",
"fragment.cc",
"boundFrame.cc",
"frameRecognizer.cc",
"objectList.cc",
"values.cc",
"quickDom.cc",
"extractScaffold.cc",
"chemInfo.cc",
"holder.cc",
"xmlLoadArchive.cc",
"xmlSaveArchive.cc",
"archiveNode.cc",
"archive.cc",
"extractFrame.cc",
"bitVector.cc",
"twister.cc",
"largeSquareMatrix.cc",
"lightProfiler.cc",
"randomGenerators.cc",
"stereochemistry.cc",
"constitution.cc",
"topology.cc",
"plug.cc",
"coordinateArray.cc",
"monomerSet.cc",
"monomerContext.cc",
"monomerGroup.cc",
"aggregate.cc",
"atom.cc",
"atomGrid.cc",
"bond.cc",
"matter.cc",
"coordSys.cc",
"coupling.cc",
"exceptions.cc",
"foundation.cc",
"loop.cc",
"macroModel.cc",
"matrix.cc",
"mbbCoreTools.cc",
"molecule.cc",
"mySaxInterface.cc",
"nVector.cc",
"oligomer.cc",
"pythonCallback.cc",
"residue.cc",
"restraint.cc",
"spanningLoop.cc",
"spline.cc",
"monomer.cc",
"superposeEngine.cc",
"builderDatabase.cc",
"torsionDriver.cc",
"vector2.cc",
"vector3.cc",
"vector4.cc",
"virtualSphere.cc",
"stringSet.cc",
"moe.cc",
"mol2.cc",
"transformCascade.cc",
"numericalFunction.cc",
"builderState.cc",
"deer.cc",
"confSearchDatabase.cc",
"energyAnchorRestraint.cc",
"energyAngle.cc",
"energyAtomTable.cc",
"energyChiralRestraint.cc",
"energyDihedral.cc",
"energyFunction.cc",
"energyImproperRestraint.cc",
"energyNonbond.cc",
"energyStretch.cc",
"ffAngleDb.cc",
"ffBaseDb.cc",
"ffItorDb.cc",
"ffNonbondDb.cc",
"ffPtorDb.cc",
"ffStretchDb.cc",
"ffTypesDb.cc",
"ffVdwDb.cc",
"forceField.cc",
"linearAlgebra.cc",
"minimizer.cc",
"minimizerLog.cc",
"profiler.cc",
"jobHistory.cc",
"jobArchive.cc",
"moleculeJob.cc",
]

if ( len(sys.argv) > 1 ):
    fileNames = sys.argv[1:]

for fileName in fileNames:
    sourceFileName = fileName
    headerFileName = fileName.rpartition(".")[0]+".h"
    if __debug__:
        print(" header= %30s  source = %30s"%(headerFileName,sourceFileName))
    code = Code(headerFileName,sourceFileName)
    for c in code.getClassDefinitions():
        if __debug__:
	    print("Examining class: %s"%c.getClassName())
	if ( c.hasSourceLineNumber("init") ):
	   if ( not c.hasHeaderLineNumber("init") ):
	       if __debug__:
	           print("%s   %s needs initialize"%(headerFileName,c.getClassName() ))
	       code.insertHeaderLine("public:",c.getHeaderLineNumber("begin")+1)
	       code.insertHeaderLine("\tvoid initialize();",c.getHeaderLineNumber("begin")+2)
	   #
	   # Setup the call to the baseClass::initialize
	   #
	   initBody = code.getSourceLine(c.getSourceLineNumber("init"))
	   print "Initialize body: %s"%initBody
	   if ( c.getBaseClassName() != "O_Object" ):
	       initBaseClass = "    this->%s::initialize();"%c.getBaseClassName()
	       print "adding to initialize body: %s"%initBaseClass
	       code.insertSourceLine(initBaseClass,c.getSourceLineNumber("init")+2)
#    code.dumpHeader()
#    code.dumpSource()
    code.saveAll()
