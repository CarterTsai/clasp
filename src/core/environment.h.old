       
       
#ifndef	Environment_H //[
#define Environment_H



#include <stdio.h>
#include <string>
#include <vector>
#include <set>
#include "foundation.h"
#include "object.h"
#include "symbol.h"
#include "holder.h"
#include "stringSet.fwd.h"
#include "serialize.fwd.h"
#include "environment.fwd.h"
#include "multipleValues.fwd.h"
#include "activationFrame.fwd.h"
#include "cons.h"

namespace core
{

    SMART(ObjectDictionary);
    SMART(Lisp);
    SMART(Name);


    SMART(FormBinder);
    class FormBinder_O : public T_O
    {
	LISP_BASE1(T_O);
	LISP_CLASS(CorePkg,FormBinder_O,"FormBinder");
    private:
	SymbolMap<Function_O>		_Bindings;

    public:
	typedef SymbolMap<Function_O>::iterator		iterator;
	typedef SymbolMap<Function_O>::const_iterator		const_iterator;
    public:
	void		extend(Symbol_sp sym, Function_sp val);
	void		update(Symbol_sp sym, Function_sp val);
	T_sp	lookup(Symbol_sp sym) const;
	const_iterator	find(Symbol_sp sym) const;
	iterator	find(Symbol_sp sym);
	iterator	begin() { return this->_Bindings.begin();};
	iterator	end() { return this->_Bindings.end();};
	const_iterator	begin() const { return this->_Bindings.begin();};
	const_iterator	end() const { return this->_Bindings.end();};

	uint size() { return this->_Bindings.size();};
	string allKeysAsString();
	string allKeysAsStringSet();
	Cons_sp allKeysAsCons();

	string		summaryOfContents() const;


	DEFAULT_CTOR_DTOR(FormBinder_O);
    };






    SMART(Binder);
    class Binder_O : public T_O
    {
	LISP_BASE1(T_O);
	LISP_CLASS(CorePkg,Binder_O,"Binder");
	DECLARE_INIT();
	DECLARE_SERIALIZE();
    public:
	void archiveBase(ArchiveP node);
    private:
	IndexedSymbolMap<T_O>	_Bindings;
    public:
	/*! Create a Binder from a Cons of
	 * :xxxxx yyyyy pairs
	 * Provide the valid keywords in (validKeywords)
	 * If any of the :xxxx parts of the cons is not in
	 * (validKeywords) throw an exception.
	 */
	static Binder_sp createFromKeywordCons(Cons_sp cons,const char* validKeywords[], Lisp_sp lisp);
    public:
	typedef IndexedSymbolMap<T_O>::iterator		iterator;
	typedef IndexedSymbolMap<T_O>::const_iterator	const_iterator;
    public:
	/*! Pass a "" terminated list of 
	 * keyword strings and if the binder has
	 * any values that aren't in the list then throw
	 * an exceptions
	 */
	void	throwIfKeysArentInKeywordList(const char* validOptions[] );

	iterator	begin() { return this->_Bindings.begin();};
	iterator	end() { return this->_Bindings.end();};
	const_iterator	begin() const { return this->_Bindings.begin();};
	const_iterator	end() const { return this->_Bindings.end();};

	uint size() { return this->_Bindings.size();};

	string otherSymbolNamesWithIdentifierName(Symbol_sp sym);

	T_sp indexed_value(int idx) const { return this->_Bindings.indexed_value(idx);};
	void update_indexed_value(int idx, T_sp val) { this->_Bindings.update_indexed_value(idx,val);};
	void erase();
	T_sp	extend(Symbol_sp sym, T_sp val);
	void		update(Symbol_sp sym, T_sp val);
	T_sp	lookup(Symbol_sp sym) const;
	T_sp	lookupSymbol(Symbol_sp sym) const {return this->lookup(sym);};
	T_sp	lookup(const string& package, const string& symStr) const;

	bool		contains(Symbol_sp sym) const;
	const_iterator	find(Symbol_sp sym) const;
	iterator	find(Symbol_sp sym);

	string		summaryOfContents() const;
	string	description() const { return this->summaryOfContents();};
	string allKeysAsString() const;
	StringSet_sp allKeysAsStringSet() const;
	Cons_sp allKeysAsCons() const;
	Cons_sp allKeysAsConsOfKeywordSymbols() const;
	Cons_sp allValuesAsCons() const;

	void addAllBindings(Binder_sp b);

	bool	canRender() { return true; };
	Render_sp rendered(Cons_sp options);

	/*! Return true if this binder contains the symbol
	 * that you get when you search for the kw
	 */
	bool		containsSymbolFromString(const string& kw);
	T_sp	valueSymbolFromString(const string& kw);

	/*! Return the value for the symbol/string 
	 * or the default
	 */
	T_sp valueOrDefault(const string& kw, T_sp defVal);
	bool boolValueOrDefault(const string& kw, bool defVal);
	int  intValueOrDefault(const string& kw, int defVal);
	int  intValueOrDefault(Symbol_sp, int defVal);
	string stringValueOrDefault(const string& kw, const string& defVal);
	/* Set the value if provided otherwise do nothing.
	 * Return true if the value was provided
	 */
	bool setBoolValueIfAvailable(bool& dest, const string& kw);
	bool setIntValueIfAvailable(int& dest, const string& kw);
	bool setStringValueIfAvailable(string& dest, const string& kw);



	DEFAULT_CTOR_DTOR(Binder_O);
    };




























    class Environment_O : public T_O
    {
	LISP_BASE1(T_O);
	LISP_CLASS(CorePkg,Environment_O,"Environment");
    public:
    protected:
	//! Use setParent to update this
    	Environment_sp	_ParentEnvironment;
	uint		_Id;
	uint		_Depth;
	//! Compiler information
	SymbolMap<T_O>	_MetaData;
    public:
	void initialize();
    public:
	uint getId() const { return this->_Id;};
	uint getDepth() const { return this->_Depth;};
	void setParent(Environment_sp environ);
	Environment_sp getParentEnvironment() const;
    public:
	/*! Associate a symbol in the current environment to some meta-data */
	T_sp setf_metaData(Symbol_sp key, T_sp val) {this->_MetaData.set(key,val); return val;};
	/*! Push metadata into a Cons associated with the symbol */
	Cons_sp push_metaData(Symbol_sp key, T_sp val);

	/*! Lookup metadata in the current SymbolMap - return two values
	  The first is the value found or nil and the second is t if a value is found or nil if not */
	MultipleValues_sp metaData(core::Symbol_sp key) const;

	/*! Lookup metadata in the linked list of environments return is like metaData(sym) */
	MultipleValues_sp lookupMetaData(Symbol_sp key) const;

    public:
	/*! Return a summary of the contents of only this environment
	 */
	virtual string summaryOfContents() const;
    private:
	void _environmentStackFill(int level, stringstream& sout);
    public:
	virtual ActivationFrame_sp activationFrame() const { if (this->isNil()) return ActivationFrame_O::_nil; SUBIMP();};
    public:
	// Indexed lookup of values
	Cons_sp classifyValue(Symbol_sp sym) const;
	virtual T_sp lookupValue(int depth, int index) const;
    public:
	string environmentStackAsString();

	/*! Search down the stack for the symbol
	 * If not found return end()
	 */
	virtual bool _findValue(Symbol_sp sym, int& depth, int& index, T_sp& value) const;
	virtual bool findValue(Symbol_sp sym, int& depth, int& index, T_sp& value) const;


	/*! Search down the stack for the symbol
	 * If not found return end()
	 */
	virtual bool _findFunction(Symbol_sp sym, int& depth, int& index, Function_sp& value) const;
	virtual bool findFunction(Symbol_sp sym, int& depth, int& index, Function_sp& value) const;

	/*! If the symbol is not found return nil 
	 If it is lexical return `(lexical-var ,symbol ,depth . ,index)
	 If it is a dynamic variable return `(special-var . ,symbol)
	*/
	Cons_sp classifyLookup(Symbol_sp sym) const;

	virtual T_sp lookup(Symbol_sp sym) const;
	virtual T_sp lookup(const string& package,const string& symStr) const;

	virtual void updateValue(Symbol_sp sym, T_sp value);
//	virtual bool updateValueDontThrow(Symbol_sp sym, T_sp value);


    public: // extend the environment with forms
	/*! Lookup the Form, if it doesn't exist return nil */
	virtual Function_sp lookup_function(Symbol_sp sym);

	/*! Classify function lookup
	  If the function is not found return nil
	  If the function is lexical return `(lexical-function ,symbol ,depth . ,index)
	  If the function is not lexical return `(special-function . ,symbol )
	*/
	virtual Cons_sp classifyFunctionLookup(Symbol_sp sym) const;
	


	/*! Lookup the SymbolMacro, if it doesn't exist return nil */
	Function_sp lookupSymbolMacro(Symbol_sp sym, bool& found) const;

	virtual string __repr__() const;


	/*! Lookup a tagbody tag in the lexical environment and return the environment
	  that defines it return nil if you don't find it*/
	virtual Environment_sp find_tagbody_tag_environment(Symbol_sp tag) const;


	/*! Lookup a tagbody tag in the lexical environment and return the environment
	  that defines it return nil if you don't find it*/
	virtual Environment_sp find_block_named_environment(Symbol_sp tag) const;


	/*! Dump the environment and its parents to the screen - call from gdb*/
	void dump();

	Environment_O(const MetaClass_sp& mc) : Base(mc) {};
	virtual ~Environment_O() {};
    };













    struct SavedSpecial
    {
	Symbol_sp 	_Symbol;
	T_sp 		_SavedValue;
    };


    class ValueEnvironment_O : public Environment_O
    {
	LISP_BASE1(Environment_O);
	LISP_CLASS(CorePkg,ValueEnvironment_O,"ValueEnvironment");
    public:
	typedef	map<Symbol_sp,int>::iterator		symbol_iterator;
	typedef	map<Symbol_sp,int>::const_iterator	const_symbol_iterator;
    protected:
	/*! Maps symbols to their index within the activation frame or if the index is -1 then the symbol is locally special */
	map<Symbol_sp,int>			_SymbolIndex;
	ActivationFrame_sp 			_ActivationFrame;
    public:
	static ValueEnvironment_sp createSingleTopLevelEnvironment();

	/*! Create an environment that extends a parent environment,
	 Pass a Cons of 2-element conses that contain either `(lexical ,symbol-name) or `(special ,symbol-name) 
	that distinguish if the symbol-name is a lexical one or a special one */
	static ValueEnvironment_sp createForLambdaListHandler(LambdaListHandler_sp llh, Environment_sp parent);
	/*! Create a fixed size environment for passing values to a function.
	 This is used to maintain runtime-environment information. */
	static ValueEnvironment_sp createForArgumentPassing(int numberOfArguments, Environment_sp parent);

    private:
	void setupForLambdaListHandler(LambdaListHandler_sp llh, Environment_sp parent);
    public:
	virtual T_sp lookupValue(int depth, int index) const;
    public:
	/*! Return a summary of the contents of only this environment
	 */
	virtual string summaryOfContents() const;
    private:
	void _environmentStackFill(int level, stringstream& sout);
    public:
	string environmentStackAsString();

	string allLocalNames() const;
	Cons_sp allLocalNamesAsCons() const;

	/*! Search down the stack for the symbol
	 * If not found return end()
	 */
	bool _findValue(Symbol_sp sym, int& depth, int& level, T_sp& value) const;

	/*! Return the depth/index of the symbol as a Cons or nil if it isn't a lexical variable */
	Cons_sp lexical_variable_p(Symbol_sp sym) const;

	void updateValue(Symbol_sp sym, T_sp value);


	/*! Extend the binder with the symbol/value pair and return the value */
	T_sp new_binding(Symbol_sp sym, int idx, T_sp value);

	ActivationFrame_sp activationFrame() const { if (this->isNil() ) return ActivationFrame_O::_nil; return this->_ActivationFrame; };
	bool activationFrameElementBoundP(int idx) const;
#if 0
	/*! If the symbol is global then look in the global stack
	 * Otherwise look up the local stack.  If the symbol isn't found then throw an exception
	 */
	T_sp oget(Symbol_sp sym);

	template <class o_class>
	    boost::shared_ptr<o_class> get(Symbol_sp sym)
	{
	    return safe_downcast<o_class>(this->oget(sym));
	}

#endif


	/*! Dump the environment and its parents to the screen - call from gdb*/
	void dump();

	ValueEnvironment_O(const MetaClass_sp& mc);
	virtual ~ValueEnvironment_O();
    };







    class HandlerHolder
    {
    private:
	MetaClass_sp		_Condition;
	Function_sp	_Handler;
    public:
	HandlerHolder() {};
	void setup(MetaClass_sp mc, Function_sp exec)
	{
	    this->_Condition = mc;
	    this->_Handler = exec;
	}
	MetaClass_sp getCondition() { return this->_Condition;};
	Function_sp getHandler() { return this->_Handler;};
    };




    



    SMART(BlockEnvironment);
    class BlockEnvironment_O : public Environment_O
    {
	LISP_BASE1(Environment_O);
	LISP_CLASS(CorePkg,BlockEnvironment_O,"BlockEnvironment");
    public:
	void	initialize();
	void	archiveBase(ArchiveP node);
    private:
	BlockFrame_sp 	_BlockFrame;
    public:
	typedef vector<HandlerHolder>::iterator	handlerIterator;
    public:
	static BlockEnvironment_sp create(Environment_sp parent);
	static BlockEnvironment_sp create(Symbol_sp blockSymbol, Environment_sp parent);
    public:
	virtual string summaryOfContents() const;
	ActivationFrame_sp activationFrame() const { if (this->isNil() ) return ActivationFrame_O::_nil; return this->_BlockFrame; };
    public:

	Symbol_sp getBlockSymbol() const { return this->_BlockFrame->getBlockSymbol();};
	void setBlockSymbol(Symbol_sp sym) { this->_BlockFrame->setBlockSymbol(sym);};


	/*! Lookup a tagbody tag in the lexical environment and return the environment
	  that defines it return nil if you don't find it*/
	virtual Environment_sp find_block_named_environment(Symbol_sp tag) const;


	DEFAULT_CTOR_DTOR(BlockEnvironment_O);
    };



    SMART(FunctionEnvironment);
    class FunctionEnvironment_O : public Environment_O
    {
	LISP_BASE1(Environment_O);
	LISP_CLASS(CorePkg,FunctionEnvironment_O,"FunctionEnvironment");
    public:
	void	initialize();
	void	archiveBase(ArchiveP node);
    protected:
	map<Symbol_sp,int>	_FunctionIndices;
	FunctionFrame_sp 	_FunctionFrame;
    public:
	/*! Create an environment that extends a parent environment
	 */
	static FunctionEnvironment_sp create(Environment_sp parent);
	static FunctionEnvironment_sp create(int numEntries, Environment_sp parent);
	ActivationFrame_sp activationFrame() const { if (this->isNil() ) return ActivationFrame_O::_nil; return this->_FunctionFrame; };
    public:
	virtual string summaryOfContents() const;

	/*! Extend the environment with the form bound to the symbol */
	void bind_function(Symbol_sp sym, Function_sp form);

	/*! Search down the stack for the symbol
	 * If not found return end()
	 */
	bool _findFunction(Symbol_sp sym, int& depth, int& level, Function_sp& func) const;

    public:


	DEFAULT_CTOR_DTOR(FunctionEnvironment_O);
    };


}; // namespace core


namespace core
{
    FORWARD(TagbodyEnvironment);
    class TagbodyEnvironment_O : public Environment_O
    {
	LISP_BASE1(Environment_O);
	LISP_CLASS(CorePkg,TagbodyEnvironment_O,"TagbodyEnvironment");
	DECLARE_INIT();
//    DECLARE_ARCHIVE();
    public: // Simple default ctor/dtor
	DEFAULT_CTOR_DTOR(TagbodyEnvironment_O);
    public: // ctor/dtor for classes with shared virtual base
//    explicit TagbodyEnvironment_O(core::MetaClass_sp const& mc) : T_O(mc), Environment(mc) {};
//    virtual ~TagbodyEnvironment_O() {};
    public:
	void initialize();
    public:
	typedef SymbolMap<Cons_O>::iterator		iterator;
	typedef SymbolMap<Cons_O>::const_iterator	const_iterator;
    private: // instance variables here
	SymbolMap<Cons_O>	_Tags;
	TagbodyFrame_sp 	_TagbodyFrame;
    public: // Functions here
	static TagbodyEnvironment_sp create(Environment_sp env);
    public:
	ActivationFrame_sp activationFrame() const { if (this->isNil() ) return ActivationFrame_O::_nil; return this->_TagbodyFrame; };
	const_iterator begin() const { return this->_Tags.begin(); };
	const_iterator end() const { return this->_Tags.end(); };
	iterator begin() { return this->_Tags.begin(); };
	iterator end() { return this->_Tags.end(); };

	/*! Associate a tag(Symbol) with the position in the tagbody (tag|form)* list */
	void addTag(Symbol_sp tag, Cons_sp tagbodyPos);

	/*! Look for the tag in the environment */
	const_iterator find(Symbol_sp tag) const;

	/*! Return all of the allowed tags as a string */
	string tagsAsString() const;


	/*! Lookup a tagbody tag in the lexical environment and return the environment
	  that defines it return nil if you don't find it*/
	virtual Environment_sp find_tagbody_tag_environment(Symbol_sp tag) const;

	
    }; // TagbodyEnvironment class
    
}; // core namespace




namespace core
{
    // A simple environment that maps symbols to objects to allow me to 
    // call old style make_init functions
    class GlueEnvironment_O : public Environment_O
    {
	LISP_BASE1(Environment_O);
	LISP_CLASS(CorePkg,GlueEnvironment_O,"GlueEnvironment");
    protected:
	/*! Maps symbols to their index within the activation frame or if the index is -1 then the symbol is locally special */
	SymbolMap<T_O> 		_Map;
	Cons_sp 		_Args;
    public:
	/*! Create an environment that extends a parent environment,
	 Pass a Cons of 2-element conses that contain either `(lexical ,symbol-name) or `(special ,symbol-name) 
	that distinguish if the symbol-name is a lexical one or a special one */
	static GlueEnvironment_sp create(Cons_sp parts);

	/*! Return the arguments as a list */
	Cons_sp args() const { return this->_Args;};

	T_sp lookup(Symbol_sp val) const
	{
	    SymbolMap<T_O>::const_iterator it = this->_Map.find(val);
	    return it->second;
	}

	GlueEnvironment_O(const MetaClass_sp& mc) : Base(mc) {};
	virtual ~GlueEnvironment_O() {};
    };
};



















    

TRANSLATE(core::FormBinder_O);
TRANSLATE(core::Binder_O);



TRANSLATE(core::Environment_O);
TRANSLATE(core::ValueEnvironment_O);
TRANSLATE(core::FunctionEnvironment_O);
TRANSLATE(core::BlockEnvironment_O);
TRANSLATE(core::TagbodyEnvironment_O);


TRANSLATE(core::GlueEnvironment_O);










#endif //]


