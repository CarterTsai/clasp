
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////





#if 0



#if 0

void	Dumb_QBIterator::randomizeSequence()
{
int*	iP;
int	rnd;
    *(this->headPadPos) = this->database->indexOfNullMonomer();
    rnd = (int)floor((REAL)(rand())/(REAL)(RAND_MAX)*this->database->numberOfHeads);
    *(this->headPos) = this->database->indexOfHead(rnd);
    for (iP=this->bodyFirst;iP<=this->bodyLast;iP++) {
	rnd = (int)floor((REAL)(rand())/(REAL)(RAND_MAX)*this->database->numberOfBodies);
	*iP = this->database->indexOfBody(rnd);
    }
    rnd = (int)floor((REAL)(rand())/(REAL)(RAND_MAX)*this->database->numberOfTails);
    *(this->tailPos) = this->database->indexOfTail(rnd);
    *(this->tailPadPos) = this->database->indexOfNullMonomer();
}



void	Dumb_QBIterator::setSequenceFromMonomerNames(VectorStrings names)
{
VectorStrings::iterator	name;
int*			iP;
int			i;
    this->setLength(names.size()-2);
    *(this->headPadPos) = this->database->indexOfNullMonomer();
    *(this->headPos) = this->database->indexForName(names[0]);
    *(this->tailPos) = this->database->indexForName(names[names.size()-1]);
    *(this->tailPadPos) = this->database->indexOfNullMonomer();
    for ( iP=this->bodyFirst,i=1;iP<=this->bodyLast;iP++,i++ ){
	*iP = this->database->indexForName(names[i]);
    }
}


//
//	incrementSequence
//
//	Advance to the next valid sequence
//	Return true if successful, false if we reached past the
//	last sequence.
//
//	Start at the tail and work back.
bool	Dumb_QBIterator::incrementSequence()
{
int*	iP;
		// Increment the tail
    (*(this->tailPos))++;
    if ( *(this->tailPos) < this->database->endTailIndex ) { return true; }
    *(this->tailPos) = this->database->indexOfTail(0);
    		// Now advance to the next body
    iP = this->bodyLast;
    while ( iP >= this->bodyFirst ) {
	(*iP)++;
	if ( *iP < this->database->endBodyIndex ) { return true; }
	*iP = this->database->indexOfBody(0);
	iP--;
    }
    		// Now advance to the next head
    (*(this->headPos))++;
    if ( *(this->headPos) < this->database->endHeadIndex ) { return true; }
    *(this->headPos) = this->database->indexOfHead(0);
    return false;
}


void	Dumb_QBIterator::buildStructure()
{
QBMatrix	m;
QBPoint	*curPoint;
int*		prevSeq;
int*		curSeq;
int*		nextSeq;
int		sequencePos,i;
QBTrimerPoints*	skelConf;

    this->numberOfPoints = 0;
    curPoint = &(this->points[0]);
    curSeq = this->headPos;
    prevSeq = curSeq-1;
    nextSeq = curSeq+1;
    m.identity();
    sequencePos = 1;
    IFDEBUG({
		printf( "Dumb_QBIterator::buildStructure building structure\n" );
	})
    for (   ; 
	    curSeq <=  this->tailPos; 
	    prevSeq++,curSeq++,nextSeq++,sequencePos++ ) {
	VP0(("About to get skelConf\n"));
	skelConf = this->database->conformationInContext(*prevSeq,
							*curSeq,
							*nextSeq);
	if (!skelConf->valid) {
	    return;
	}
	ASSERT(skelConf->valid);
		// multiply the current compliment of points by the matrix
		// and stick them in the indexedPoint array
	IFDEBUG({printf("Dumb_QBIterator::buildStructure ------- Transforming points with matrix:\n");
		m.dump();
		})
	for ( i=0;i<skelConf->pointCount;i++ ){
	    *curPoint = skelConf->points[i];
	    curPoint->index = sequencePos;
	    curPoint->pos.transformUsingMatrix(&m);
	IFDEBUG({printf("Dumb_QBIterator::buildStructure point before: "); skelConf->points[i].pos.dump();
		printf("point after: "); curPoint->pos.dump();
		})
	    curPoint++;
	    this->numberOfPoints++;
	}
	IFDEBUG({printf("Dumb_QBIterator::buildStructure Forward matrix to multiply by:\n");
		skelConf->forward.dump();
		})
	m.multiplyByMatrix(&(skelConf->forward));
    }
}


string	Dumb_QBIterator::sequenceAsString()
{
int	*iP;
string	result;
    result = "";
    for (iP=this->headPos;iP<this->tailPos;iP++ ){
	result += this->database->monomerNames[*iP];
	result += " ";
    }
    result += this->database->monomerNames[*iP];
    return result;
}

//
//	testForCollision
//
//	Test the current structure to see if there are any collisions
//
//	Return true if so otherwise false
//
bool	Dumb_QBIterator::testForCollision()
{
QBPoint	*spCur;
QBPoint	*spCmp;
QBPoint	*spEnd;
REAL		diffx, diffy, diffz;
REAL		distSquared;

    spEnd = &(this->points[this->numberOfPoints]);
    spCur = this->points;
    	// Advance to the first JOINT_CENTER point
    while (spCur<spEnd && spCur->type != JOINT_CENTER) spCur++;
    while ( spCur<spEnd ) {
	if ( spCur->type == JOINT_CENTER ) {
		    // Put the comparison pointer two points after
	    spCmp = spCur+2;
		    // Advance to the next JOINT_CENTER point at least two
		    // monomers away
	    while (spCmp<spEnd && (spCmp->index<spCur->index+2)) spCmp++;
	    while (spCmp<spEnd) {
		if (spCmp->type == JOINT_CENTER) {
			    // first check if its in the box
		    diffx = (REAL)fabs(spCmp->pos.x - spCur->pos.x);
		    diffy = (REAL)fabs(spCmp->pos.y - spCur->pos.y);
		    diffz = (REAL)fabs(spCmp->pos.z - spCur->pos.z);
		    if ((diffx < this->monomerCollisionRadiusTimes2Squared) &&
			(diffy < this->monomerCollisionRadiusTimes2Squared) &&
		    	(diffz < this->monomerCollisionRadiusTimes2Squared)) {
		        distSquared = diffx*diffx+diffy*diffy+diffz*diffz;
		        if ( distSquared < this->monomerCollisionRadiusTimes2Squared)
			    return true;
		    }
		}
		spCmp++;
	    }
	}
	spCur++;
    }
    return false;
}





//###################################################################
//###################################################################
//###################################################################
//###################################################################
//###################################################################
// ################################################################
// ################################################################
// ################################################################
//
//	QBSphereSearch methods
//
//

Dumb_QBSearch::~Dumb_QBSearch()
{
    REF_DELETE("Dumb_QBSearch");
#ifdef USEPYTHON
    if ( this->POPythonHitCallback) {
       Py_XDECREF( this->POPythonHitCallback );  /* Dispose of previous callback */
    }
    if ( this->POPythonPeriodicCallback) {
       Py_XDECREF( this->POPythonPeriodicCallback );  /* Dispose of previous callback */
    }
#endif
}

#ifdef	USEPYTHON
void	Dumb_QBSearch::setPythonPeriodicCallback(PyObject* callback)
{
PyObject *result = NULL;

    if (!PyCallable_Check(callback)) {
	PyErr_SetString(PyExc_TypeError, "parameter must be callable");
printf( "callback isnt callable!!!! %x\n", callback );
	return;
    }
    Py_XINCREF(callback);         /* Add a reference to new callback */
    if ( this->POPythonPeriodicCallback != NULL ){
	Py_XDECREF( this->POPythonPeriodicCallback );  /* Dispose of previous callback */
    }
    this->POPythonPeriodicCallback = callback;       /* Remember new callback */
}



void	Dumb_QBSearch::setPythonHitCallback(PyObject* callback)
{
PyObject *result = NULL;

    if (!PyCallable_Check(callback)) {
	PyErr_SetString(PyExc_TypeError, "parameter must be callable");
	return;
    }
    Py_XINCREF(callback);         /* Add a reference to new callback */
    if ( this->POPythonHitCallback != NULL ){
	Py_XDECREF( this->POPythonHitCallback );  /* Dispose of previous callback */
    }
    this->POPythonHitCallback = callback;       /* Remember new callback */
}
#endif



bool	Dumb_QBSearch::handleHitCallback()
{
#ifdef	USEPYTHON
    long	res;
    if ( this->POPythonHitCallback ) {
	int a;
	PyObject *arglist;
	PyObject *result;

		    // Time to call the callback 
	arglist = NULL;
	result = PyEval_CallObject(this->POPythonHitCallback, 
						arglist);
//		Py_DECREF(arglist);
	if (result == NULL) {
	    MESSAGE(( "No result: %d\n", __LINE__));
	    return false; /* Pass error back */
	}
	res = PyInt_AsLong(result);
	Py_DECREF(result);
	    // If the callback returns zero then stop searching
	if (!res) {
	    MESSAGE(( "Result was zero : %d\n", __LINE__));
	    return false;
	}
    }
#endif
    return true;
}




bool	Dumb_QBSearch::handlePeriodicCallback()
{
#ifdef	USEPYTHON
    long	res;
    if ( this->POPythonPeriodicCallback ) {
	int a;
	PyObject *arglist;
	PyObject *result;

		    // Time to call the callback 
	arglist = NULL;
	result = PyEval_CallObject(this->POPythonPeriodicCallback, 
						arglist);
//		Py_DECREF(arglist);
	if (result == NULL) {
	    MESSAGE(( "No result: %d\n", __LINE__));
	    return false;
	}
	res = PyInt_AsLong(result);
	Py_DECREF(result);
	    // If the callback returns zero then stop searching
	if (!res) {
	    MESSAGE(( "Returned false %d\n", __LINE__));
	    return false;
	}
    }
#endif
    return true;
}


//#############################################################
//#############################################################
//#############################################################
//#############################################################
//#############################################################
//
//	QBSearchForSpheres
//
//
//
//
//
//
//	processHit
//
//	Return true if its an actual hit
//
bool	Dumb_QBSearchForSpheres::processHit()
{
    if ( this->getBestScore(this->averageRadius) < this->score ) {
	this->setBestScore(this->averageRadius,this->score);
	return true;
    } else {
		// Its a hit if its within a certain factor of the best score
	if ( (this->score/this->getBestScore(this->averageRadius)) > this->scoreCutOff ) {
	    return true;
	}
    }
    return false;
}

//
//	testForSphere
//
//	Test the current structure to see if it forms a sphere
//	that satisfies the criteria of the skeleton
//
//	Return true if its a hit, otherwise false
//
bool	Dumb_QBSearchForSpheres::scoreSphere()
{
Vector		center;
int		pnts;
QBPoint	*pnt;
REAL		diffx,diffy,diffz;
int		i;
REAL		score;
REAL		oneRad, deviation, rmsDev, radius;
REAL		radSum, rmsDevSum;
    center.zero();
    pnts = 0;
    for (i=0; i<this->sequence->numberOfPoints;i++) {
	pnt = this->sequence->getPointIndex(i);
	if (pnt->type == JOINT_CENTER) {
		center.add(&(pnt->pos));
		pnts++;
	}
    }
    ASSERT(pnts);
    		// Geometric center is in (center)
    center.timesScalar((REAL)(1.0/pnts));
    		// Now calculate the average radius^2
    radSum = 0.0;
    for (i=0; i<this->sequence->numberOfPoints;i++) {
	pnt = this->sequence->getPointIndex(i);
	if (pnt->type == JOINT_CENTER) {
	    diffx = pnt->pos.x-center.x;
	    diffy = pnt->pos.y-center.y;
	    diffz = pnt->pos.z-center.z;
	    radSum += (REAL)sqrt(diffx*diffx + diffy*diffy + diffz*diffz);
	}
    }
    radius = radSum/pnts;
    if ( radius > this->targetRadius ) return false;
    		// Now calculate the RMS deviation from radSquared
    rmsDevSum = 0.0;
    for (i=0; i<this->sequence->numberOfPoints;i++) {
	pnt = this->sequence->getPointIndex(i);
	if (pnt->type == JOINT_CENTER) {
		diffx = pnt->pos.x-center.x;
		diffy = pnt->pos.y-center.y;
		diffz = pnt->pos.z-center.z;
		oneRad = (REAL)sqrt(diffx*diffx + diffy*diffy + diffz*diffz);
		deviation = oneRad - radius;
		deviation *= deviation;
		rmsDevSum += deviation;
	}
    }
    rmsDev = (REAL)sqrt(rmsDevSum/pnts);
    		// Now score and decide if its a hit
//    score = (radSquared-this->targetRadiusSquared);
    	// If we are just scoring on how well we form a spherical cavity
    	// use this
    score = (REAL)sqrt(rmsDev*rmsDev);
    this->score = (REAL)(1.0/(fabs(score)+0.001));
    this->averageRadius = radius;
    this->rmsDevFromAverageRadius = rmsDev;
    return this->processHit();
}





//
//	buildAllSequencesSearchForSpheres
//
//	Does just that, it builds every sequence 
//	and checks to see if it forms a sphere
//	It returns when every possible sequence has been made
//	or if one of the callbacks returns false.
void Dumb_QBSearchForSpheres::buildAllSequencesSearchForSpheres()
{
bool	collision;
    this->initialize();
    this->sequence->initializeSequence();
    while (1) {
	this->sequence->buildStructure();
	collision = this->sequence->testForCollision();
	if ( !collision ) {
		if ( this->scoreSphere() ) {;
		if (!this->registerHitAndHandleHitCallback() ) {
				cout << "Hit callback has requested termination" << endl;
			goto DONE;
		}
		}
	} else {
		this->registerCollision();
	}
	if ( this->randomSearch ) {
		this->sequence->randomizeSequence();
	} else {
		if ( !this->sequence->incrementSequence() ) {
		goto DONE;
		}
	}
	if (!this->registerIterationAndHandlePeriodicCallback()) {
		cout << "Periodic callback has requested termination" << endl;
		goto DONE;
	}
    }
// loop
//	buildStructure
//	hit = scoreSphere

DONE:
    return;
}


//
//	buildRandomSequencesSearchForSpheres
//
//	Does just that, it builds random sequences for eternity
//	It depends on the callbacks to return false to exit
void Dumb_QBSearchForSpheres::buildRandomSequencesSearchForSpheres()
{
}





#endif


#endif
