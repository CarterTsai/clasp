;;
;; Using C++ backquote-attach-conses
;;


;;--read--------------
#|
( DEFMACRO WHEN ( PRED &REST BODY ) "Syntax: (when test {form}*)
If TEST evaluates to T, then evaluates FORMs and returns all values of the last
FORM. If not, simply return NIL." ( BACKQUOTE ( IF ( COMMA PRED ) ( PROGN ( COMMA-ATSIGN BODY ) ) nil )  ) )
|#----------

  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( CODE  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( CODE  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* CODE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LL  ) ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LL  ) ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  ) --> ( *BQ-LIST* INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA  )  ) ( *BQ-LIST* INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA  )  ) ( *BQ-LIST* INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* LAMBDA  ) INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LAMBDA  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LAMBDA  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* INNER-LAMBDA  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FUNCTION  )  ) ( *BQ-LIST* INNER-LAMBDA  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FUNCTION  )  ) ( *BQ-LIST* INNER-LAMBDA  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* FUNCTION  ) INNER-LAMBDA  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-ENV  ) ( *BQ-LIST* LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-ENV  ) ( *BQ-LIST* LOCAL-WHOLE  )  ) --> ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-FUNCTION  ) ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-FUNCTION  ) ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* APPLY  )  ) ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* APPLY  )  ) ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( LIST LOCAL-WHOLE LOCAL-ENV )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( LIST LOCAL-WHOLE LOCAL-ENV )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA-BLOCK  )  ) ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA-BLOCK  )  ) ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* LAMBDA-BLOCK  ) NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )macro set as:
( LAMBDA-BLOCK WHEN ( ::local-whole1743 ::local-env1744  ) ( APPLY ( FUNCTION ( LAMBDA ( ::whole1746 ::environment1747 ::macro-name1748 PRED &REST BODY ) ( ( PROGN ( BACKQUOTE ( IF ( COMMA PRED ) ( PROGN ( COMMA-ATSIGN BODY ) ) nil )  ) )  )  )  ) ::local-whole1743 ::local-env1744 ::local-whole1743  )  )

  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* NAME  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* QUOTE  )  ) ( *BQ-LIST* NAME  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* QUOTE  )  ) ( *BQ-LIST* NAME  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* T  )  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* T  )  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-QUOTE* ( T  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( FUNC  ) ( *BQ-QUOTE* ( T  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( FUNC  ) ( *BQ-QUOTE* ( T  )  )  ) --> ( *BQ-LIST* FUNC ( *BQ-QUOTE* ( T  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )  ) ( *BQ-LIST* FUNC ( *BQ-QUOTE* ( T  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )  ) ( *BQ-LIST* FUNC ( *BQ-QUOTE* ( T  )  )  )  ) --> ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FSET  )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FSET  )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* FSET  ) ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )
Breakpoint 10, core::gdb_hook (error=0x104999c28 "Could not find form(T) in the lexical/dynamic environment") at foundation.cc:83
(gdb) 











;; ------- using lisp

; --> Cons_O::nil
;;--read--------------
#|
( DEFMACRO WHEN ( PRED &REST BODY ) "Syntax: (when test {form}*)
If TEST evaluates to T, then evaluates FORMs and returns all values of the last
FORM. If not, simply return NIL." ( BACKQUOTE ( IF ( COMMA PRED ) ( PROGN ( COMMA-ATSIGN BODY ) ) nil )  ) )
|#----------

  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( CODE  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( CODE  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* CODE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LL  ) ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LL  ) ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  ) --> ( *BQ-LIST** INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA  )  ) ( *BQ-LIST** INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA  )  ) ( *BQ-LIST** INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )  ) --> ( *BQ-LIST** ( *BQ-QUOTE* LAMBDA  ) INNER-LL ( *BQ-APPEND* DECLARES ( *BQ-LIST* CODE  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LAMBDA  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-LAMBDA  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* INNER-LAMBDA  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FUNCTION  )  ) ( *BQ-LIST* INNER-LAMBDA  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FUNCTION  )  ) ( *BQ-LIST* INNER-LAMBDA  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* FUNCTION  ) INNER-LAMBDA  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-ENV  ) ( *BQ-LIST* LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-ENV  ) ( *BQ-LIST* LOCAL-WHOLE  )  ) --> ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( LOCAL-WHOLE  ) ( *BQ-LIST* LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-FUNCTION  ) ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( INNER-FUNCTION  ) ( *BQ-LIST* LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* APPLY  )  ) ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* APPLY  )  ) ( *BQ-LIST* INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( LIST LOCAL-WHOLE LOCAL-ENV )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( LIST LOCAL-WHOLE LOCAL-ENV )  ) ( *BQ-LIST* ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-LIST* ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA-BLOCK  )  ) ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* LAMBDA-BLOCK  )  ) ( *BQ-LIST* NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* LAMBDA-BLOCK  ) NAME ( LIST LOCAL-WHOLE LOCAL-ENV ) ( *BQ-LIST* ( *BQ-QUOTE* APPLY  ) INNER-FUNCTION LOCAL-WHOLE LOCAL-ENV LOCAL-WHOLE  )  )macro set as:
( LAMBDA-BLOCK WHEN ( ::local-whole1743 ::local-env1744  ) ( APPLY ( FUNCTION ( LAMBDA ( ::whole1746 ::environment1747 ::macro-name1748 PRED &REST BODY ) ( PROGN ( BACKQUOTE ( IF ( COMMA PRED ) ( PROGN ( COMMA-ATSIGN BODY ) ) nil )  ) )  )  ) ::local-whole1743 ::local-env1744 ::local-whole1743  )  )

  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( NAME  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-LIST* NAME  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* QUOTE  )  ) ( *BQ-LIST* NAME  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* QUOTE  )  ) ( *BQ-LIST* NAME  )  ) --> ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* T  )  ) ( *BQ-QUOTE* nil  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* T  )  ) ( *BQ-QUOTE* nil  )  ) --> ( *BQ-QUOTE* ( T  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( FUNC  ) ( *BQ-QUOTE* ( T  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( FUNC  ) ( *BQ-QUOTE* ( T  )  )  ) --> ( *BQ-LIST** FUNC ( *BQ-QUOTE* ( T  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )  ) ( *BQ-LIST** FUNC ( *BQ-QUOTE* ( T  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  )  ) ( *BQ-LIST** FUNC ( *BQ-QUOTE* ( T  )  )  )  ) --> ( *BQ-LIST** ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )
  |  1> CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FSET  )  ) ( *BQ-LIST** ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )  )
  |  <1  CORE:BACKQUOTE-ATTACH-CONSES ( ( ( *BQ-QUOTE* FSET  )  ) ( *BQ-LIST** ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )  ) --> ( *BQ-LIST** ( *BQ-QUOTE* FSET  ) ( *BQ-LIST* ( *BQ-QUOTE* QUOTE  ) NAME  ) FUNC ( *BQ-QUOTE* ( T  )  )  )
; --> nil
