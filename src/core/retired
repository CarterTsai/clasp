//
// (C) 2004 Christian E. Schafmeister
//


#ifndef FragmentCoordinates_H 
#define FragmentCoordinates_H
#include	"foundation.h"
#include	<stdio.h>
#include	<string>
#include	<vector>
#include	<set>
#include	"bond.h"
#include	"stringSet.h"
#include	"vector3.h"
//#include	"conformation.h"
#include	"atom.h"
#include	"residue.h"
//#include	"quickDom.h"
#include	"oligomer.h"
//#include	"monomerFragment.h"
//#include	"anchor.h"

namespace mbb {

using namespace	std;


inline string	ZMatrixExtractor_XmlName() { return "ZMatrixFragmentExtractor";};
inline string	XmlTag_Pass1Extractor() { return "Pass1Extractor";};
inline string	ZMatrixCoordinates_XmlName() { return "ZMatrixFragmentCoordinates";};
inline string	XmlTag_Pass1Coordinates() { return "Pass1Coordinates";};
inline string	CoreFragmentCoordinatesTable_XmlName() { return "CoreFragmentCoordinatesTable";};
inline string	FinishFragmentCoordinatesTable_XmlName() { return "FinishFragmentCoordinatesTable";};

double	calculateDihedral( const Vector3& va,
				const Vector3& vb,
				const Vector3& vc,
				const Vector3& vd );

double	calculateAngle( const Vector3& va,
				const Vector3& vb,
				const Vector3& vc );

double	calculateDistance( const Vector3& va,
				const Vector3& vb );

Vector3	buildOrigin( );

Vector3	buildUsingBond( double distance, const Vector3& vb );

Vector3	buildUsingBondAngle( double distance, const Vector3& vb,
			double angleRad, const Vector3& va );

Vector3	buildUsingBondAngleDihedral( double distance, const Vector3& vb,
			double angleRad, const Vector3& va,
			double dihedralRad, const Vector3& vd );



typedef	enum { fragmentCoordinates, cartesianFragmentCoordinates, zMatrixFragmentCoordinates } FragmentCoordinatesTypes;



//
// template class
//
class Dumb_FragmentCoordinates;
typedef	boost::shared_ptr<Dumb_FragmentCoordinates>	RPFragmentCoordinates;

class Dumb_FragmentCoordinates // : public boost::enable_shared_from_this<Dumb_FragmentCoordinates>
{
protected:
	string			_Name;
	bool			_IsExtractor;
	double			_FigureOfMerit;
	RPStringSet		_Flags;
	string			_Comment;
	vector<RPAnchor>	_Anchors;

	RPAnchor	findMatchingAnchor(RPAnchor& anchor);

public:
	Dumb_FragmentCoordinates();
	Dumb_FragmentCoordinates(const Dumb_FragmentCoordinates& );
	virtual ~Dumb_FragmentCoordinates();

	vector<RPAnchor>::iterator	begin_Anchors() { return this->_Anchors.begin(); };
	vector<RPAnchor>::iterator	end_Anchors() { return this->_Anchors.end(); };

	bool	getIsExtractor() { return this->_IsExtractor;};
	void	setIsExtractor(bool b) { this->_IsExtractor = b;};
	void	addAnchor(RPAnchor& a);
	RPAnchor	getAnchorForIndex(int i);
	void	parseAnchorsFromXmlChildren(RPQDomNode& n);
	int	getNumberOfAnchors() { return this->_Anchors.size();};

//	RPMonomerFragment	getFragment() { return this->_Fragment; };

	string	getName()	{return this->_Name;};
	void	setName(string n) {this->_Name = n;};

	string	getComment()	{return this->_Comment;};
	void	setComment(string n) {this->_Comment = n;};

	void	setFlags(string f);
	bool	testFlag(string f);

	double	getFigureOfMerit() { return this->_FigureOfMerit; };
	void	setFigureOfMerit(double fom) { this->_FigureOfMerit = fom;};

	virtual	RPStringSet	getTargetAtomNames();
#if 0 //[
	virtual	RPQDomNode	asXml();
	virtual	void		parseFromXml(RPQDomNode& n);
#endif //]

		//! Extract the coordinates from this monomer
	virtual	void	extract( RPMonomer mon );
		//! Build the coordinates for this monomer
//	virtual	bool	build( RPMonomer& mon );

	virtual bool	sameConformation(RPFragmentCoordinates& coord);

	virtual int	type() { return fragmentCoordinates; };

	virtual RPFragmentCoordinates copy();

};



class Dumb_ZMatrixFragmentCoordinates;
typedef	boost::shared_ptr<Dumb_ZMatrixFragmentCoordinates>	RPZMatrixFragmentCoordinates;



class Dumb_RotatableDihedral;
typedef	boost::shared_ptr<Dumb_RotatableDihedral>	RPRotatableDihedral;
//class Dumb_RotatableDihedral : public boost::enable_shared_from_this<Dumb_RotatableDihedral>
class Dumb_RotatableDihedral
{
private:
	string	name;
	string	target;
	string	bond;
	string	angle;
	string	dihedral;
public:

#ifdef	USEBOOSTPYTHON
	boost::python::list	boost_getOut();
	void		boost_setOut(boost::python::list);
#endif

	string		getName() { return this->name; };
	RPQDomNode	asXml();
	void		parseFromXml(RPQDomNode& n);

	ostream&	dumpToStream(ostream& out);
	void		dump();

	double	extractDihedral( RPMonomer mon );

	Dumb_RotatableDihedral();
	Dumb_RotatableDihedral(const Dumb_RotatableDihedral& d);
	virtual ~Dumb_RotatableDihedral();

};



// Constructor function

inline	RPRotatableDihedral new_RPRotatableDihedral() {
    return RPRotatableDihedral(new Dumb_RotatableDihedral());
}

inline	RPRotatableDihedral new_RPRotatableDihedral(RPRotatableDihedral d) {
    return RPRotatableDihedral(new Dumb_RotatableDihedral(*(d.get())));
}


//
//
//
//
//
//
//
//	ZMatrix class for storing coordinates using a ZMatrix
//
//
//
//
//
//
//


class Dumb_ZElement;
typedef	boost::shared_ptr<Dumb_ZElement>	RPZElement;

//! Defines destination atom-bond-angle-dihedral combination
class Dumb_ZElement
{
friend	class Dumb_ZMatrixFragmentCoordinates;
private:
	string	target;
	string	bond;
	string	angle;
//	string	relativeToDihedral;
	string	dihedral;
	bool	valuesSet;
	double	vBond;
	double	vAngle;
	double	vDihedral;
public:

	string	getTarget() { return this->target;};
	string	asString();
	void	parseFromString(string s);

	ostream&	dumpToStream(ostream& out);
	void		dump();

	void	extract(Dumb_ZMatrixFragmentCoordinates* zm, RPMonomer mon );
	void	build(Dumb_ZMatrixFragmentCoordinates* zm, RPMonomer& mon );

	bool	sameConformation(const RPZElement& other);
	Dumb_ZElement();
	Dumb_ZElement(string s);
	Dumb_ZElement(const Dumb_ZElement& );
	virtual ~Dumb_ZElement();

};



inline	RPZElement new_RPZElement() {
    return RPZElement(new Dumb_ZElement());
}


inline	RPZElement new_RPZElement(const RPZElement ze) {
    return RPZElement(new Dumb_ZElement(*(ze.get())));
}


inline	RPZElement new_RPZElement(string s) {
    return RPZElement(new Dumb_ZElement(s));
}





//! Defines destination atom-bond-angle-dihedral combination
class Dumb_ZMatrixFragmentCoordinates : public Dumb_FragmentCoordinates,public boost::enable_shared_from_this<Dumb_ZMatrixFragmentCoordinates>
{
private:
	vector<RPZElement>	_Elements;
//	map<string,double>	_DihedralStartValues;
public:

	Dumb_ZMatrixFragmentCoordinates();
		//! the ZMatrix owned by a MonomerFragment
	Dumb_ZMatrixFragmentCoordinates(const Dumb_ZMatrixFragmentCoordinates& zm );
	virtual ~Dumb_ZMatrixFragmentCoordinates();

	vector<RPZElement>::iterator begin_Elements() { return this->_Elements.begin(); };
	vector<RPZElement>::iterator end_Elements() { return this->_Elements.end(); };
	virtual RPFragmentCoordinates copy();

//	void	setPlugDescriptor(RPPlugDescriptor& p) { this->_PlugDescriptor = p; };
//	RPPlugDescriptor	getPlugDescriptor() { return this->_PlugDescriptor; };
	RPAnchor		getAnchor()	{if ( this->_Anchors.size() == 0 ) { THROW(MyErr("ZMatrixFragmentCoordinates with name: ", this->getName()," must have one anchor")); } return this->_Anchors[0];};

	RPZElement	getZElementWithTargetAtomName(const string& nm);

	virtual	void	extract( RPMonomer mon) ;
		/*! Build the coordinates for the monomer using the z-matrix
			use the dihedrals defined in the FragmentTemplate
		*/
	void	build( RPMonomer& mon );

	virtual RPQDomNode	asXml();
	virtual void	parseFromXml(RPQDomNode& n);

	virtual bool	sameConformation(RPFragmentCoordinates& coord);

	virtual	RPStringSet	getTargetAtomNames();

	void	setElementsFromString(string el);

#if 0
	bool	hasDihedral(string n) {
			return this->_DihedralStartValues.count(n);
	};
	double	getDihedralStartValue(string n) {
		if ( this->_DihedralStartValues.count(n) ) {
		    return this->_DihedralStartValues[n];
		} else {
		    return 0.0;
		}
	}
#endif
	virtual int	type() { return zMatrixFragmentCoordinates; };

};



inline	RPZMatrixFragmentCoordinates new_RPZMatrixFragmentCoordinates() {
    return RPZMatrixFragmentCoordinates(new Dumb_ZMatrixFragmentCoordinates());
}


inline	RPZMatrixFragmentCoordinates new_RPZMatrixFragmentCoordinates(RPZMatrixFragmentCoordinates&	zm) {
    return RPZMatrixFragmentCoordinates(new Dumb_ZMatrixFragmentCoordinates(*(zm.get())));
}











class O_AtomPosition;
typedef	boost::shared_ptr<O_AtomPosition>	RPAtomPosition;

//! Defines destination atom-bond-angle-dihedral combination
class O_AtomPosition
{
private:
	string		_Name;
	Vector3		_Position;
public:
	O_AtomPosition() { REF_CREATE("O_AtomPosition"); };
	O_AtomPosition(const O_AtomPosition& );
	virtual ~O_AtomPosition(){ REF_DELETE("O_AtomPosition"); };

	string		getName() { return this->_Name;};
	void		setName(const string& s) { this->_Name = s; };
	Vector3		getPosition() { return this->_Position;};
	void		setPosition( const Vector3& pos ) { this->_Position = pos;};

	void		extractAtomPosition(RPMonomer& mon, Matrix& transform);
	void		buildAtomPosition(RPMonomer& mon, const Matrix& transform );
	void		parseFromXml(RPQDomNode& n);
	RPQDomNode	asXml();

};

inline	RPAtomPosition new_RPAtomPosition() {
    return RPAtomPosition(new O_AtomPosition());
}

inline	RPAtomPosition new_RPAtomPosition(RPAtomPosition p) {
    return RPAtomPosition(new O_AtomPosition(*(p.get())));
}



/*! Defines a fragment builder that stores a list atoms and a 
*/
class Dumb_Pass1Coordinates;
typedef	boost::shared_ptr<Dumb_Pass1Coordinates> RPPass1Coordinates;


class Dumb_Pass1Coordinates : public Dumb_FragmentCoordinates,public boost::enable_shared_from_this<Dumb_Pass1Coordinates>
{
private:
	vector<RPAtomPosition>	_AtomPositions;
protected:
	Vector3	getAtomPositionForAtomName(const string& nm);
public:

	Dumb_Pass1Coordinates();
		//! the Cartesian owned by a MonomerFragment
	Dumb_Pass1Coordinates(const Dumb_Pass1Coordinates& zm );
	virtual ~Dumb_Pass1Coordinates();

	RPStringSet	getAllAtomNames();

	vector<RPAtomPosition>::iterator begin_AtomPositions() { return this->_AtomPositions.begin(); };
	vector<RPAtomPosition>::iterator end_AtomPositions() { return this->_AtomPositions.end(); };


	void	addAtomPosition(RPAtomPosition& ap) {this->_AtomPositions.push_back(ap);};

	virtual RPFragmentCoordinates copy();


	virtual	void	extract( RPMonomer mon) ;
		/*! Build the coordinates for the monomer using the first anchor
			that has its atoms defined.
		*/
//	virtual bool	build( RPMonomer& mon );

	virtual	RPStringSet	getTargetAtomNames();

	virtual RPQDomNode	asXml();
	virtual void	parseFromXml(RPQDomNode& n);

	virtual bool	sameConformation(RPFragmentCoordinates& coord);

	virtual int	type() { return cartesianFragmentCoordinates; };

};



inline	RPPass1Coordinates new_RPPass1Coordinates() {
    return RPPass1Coordinates(new Dumb_Pass1Coordinates());
}


inline	RPPass1Coordinates new_RPPass1Coordinates(RPPass1Coordinates&	zm) {
    return RPPass1Coordinates(new Dumb_Pass1Coordinates(*(zm.get())));
}







class	Dumb_FragmentCoordinatesTable;
typedef	boost::shared_ptr<Dumb_FragmentCoordinatesTable>	RPFragmentCoordinatesTable;
//class Dumb_FragmentCoordinatesTable : public boost::enable_shared_from_this<Dumb_FragmentCoordinatesTable>
class Dumb_FragmentCoordinatesTable
{
private:
	string				_Name;
	bool				_Global;
	RPFragmentCoordinates		_Extractor;
	vector<RPFragmentCoordinates>	_Coordinates;
	vector<RPAnchor>		_Anchors;

public:
	Dumb_FragmentCoordinatesTable();
	Dumb_FragmentCoordinatesTable(const Dumb_FragmentCoordinatesTable& zm );
	virtual ~Dumb_FragmentCoordinatesTable() {REF_DELETE("Dumb_FragmentCoordinatesTable");};

	vector<RPFragmentCoordinates>::iterator begin_Coordinates() { return this->_Coordinates.begin(); };
	vector<RPFragmentCoordinates>::iterator end_Coordinates() { return this->_Coordinates.end(); };


	vector<RPAnchor>::iterator	begin_Anchors() { return this->_Anchors.begin();};
	vector<RPAnchor>::iterator	end_Anchors() { return this->_Anchors.end();};
	string	getName()	{return this->_Name;};
	void	setName(string nm) {this->_Name = nm;};

	RPStringSet		getTargetAtomNames() { return this->_Extractor->getTargetAtomNames();};
	RPFragmentCoordinates	getExtractor() { return this->_Extractor; };
	void		setExtractorDefineAnchors(RPFragmentCoordinates& f);

	void	addAnchor(const RPAnchor& a) { this->_Anchors.push_back(a);};

	bool	getGlobal()	{return this->_Global;};
	void	setGlobal(bool nm) {this->_Global = nm;};

	void	parseFromXml(RPQDomNode& node);
	RPQDomNode	asXml(const string& s);

	bool	isConformationAlreadyInTable(const RPFragmentCoordinates& coord );
	
	bool	extractAndAddIfNewConformation(RPMonomer& mon,
			string flags,
			string comment );

//	void	build(RPMonomer& mon);
	int	size()	{return this->_Coordinates.size(); };
	RPFragmentCoordinates getFragmentCoordinates(int i);
	void	addFragmentCoordinates(const RPFragmentCoordinates& b) {this->_Coordinates.push_back(b);};
};


inline	RPFragmentCoordinatesTable new_RPFragmentCoordinatesTable() {
    return RPFragmentCoordinatesTable(new Dumb_FragmentCoordinatesTable());
}


inline	RPFragmentCoordinatesTable new_RPFragmentCoordinatesTable(const RPFragmentCoordinatesTable&	zm) {
    return RPFragmentCoordinatesTable(new Dumb_FragmentCoordinatesTable(*(zm.get())));
}

};

#endif
