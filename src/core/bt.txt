// This file was GENERATED by command:
//     pump.py bt.pmp
// DO NOT EDIT BY HAND!!!

template <typename Pols , typename RT, typename ARG1=void,typename ARG2=void,typename ARG3=void,typename ARG4=void,
          typename ARG5=void,typename ARG6=void,typename ARG7=void,typename ARG8=void,typename ARG9=void,typename ARG10=void,
          typename ARG11=void,typename ARG12=void,typename ARG13=void,typename ARG14=void,typename ARG15=void,typename ARG16=void >
class VariadicFunctoid
    : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15,
                             ARG16)> Type
    Type fptr;
public:
    enum { NumParams = 16 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
          typename ARG15 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
  ARG15 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15)> Type
    Type fptr;
public:
    enum { NumParams = 15 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13,
  ARG14 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14)> Type
    Type fptr;
public:
    enum { NumParams = 14 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13)> Type
    Type fptr;
public:
    enum { NumParams = 13 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12)> Type
    Type fptr;
public:
    enum { NumParams = 12 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11)> Type
    Type fptr;
public:
    enum { NumParams = 11 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10)> Type
    Type fptr;
public:
    enum { NumParams = 10 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9)> Type
    Type fptr;
public:
    enum { NumParams = 9 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8)> Type
    Type fptr;
public:
    enum { NumParams = 8 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7)> Type
    Type fptr;
public:
    enum { NumParams = 7 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)> Type
    Type fptr;
public:
    enum { NumParams = 6 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5)> Type
    Type fptr;
public:
    enum { NumParams = 5 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4)> Type
    Type fptr;
public:
    enum { NumParams = 4 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3)> Type
    Type fptr;
public:
    enum { NumParams = 3 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2)> Type
    Type fptr;
public:
    enum { NumParams = 2 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1 >
class VariadicFunctoid
< Pols ,RT  ,ARG1 >                : public Functoid {
public:
    typedef std::function<RT(ARG1)> Type
    Type fptr;
public:
    enum { NumParams = 1 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT  >
class VariadicFunctoid
< Pols ,RT   >                : public Functoid {
public:
    typedef std::function<RT()> Type
    Type fptr;
public:
    enum { NumParams = 0 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};

template <typename Pols , typename RT, typename ARG1=void,typename ARG2=void,typename ARG3=void,typename ARG4=void,
          typename ARG5=void,typename ARG6=void,typename ARG7=void,typename ARG8=void,typename ARG9=void,typename ARG10=void,
          typename ARG11=void,typename ARG12=void,typename ARG13=void,typename ARG14=void,typename ARG15=void,typename ARG16=void >
class VariadicFunctoid
    : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15,
                             ARG16)> Type
    Type fptr;
public:
    enum { NumParams = 16 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
          typename ARG15 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
  ARG15 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15)> Type
    Type fptr;
public:
    enum { NumParams = 15 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13,
  ARG14 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14)> Type
    Type fptr;
public:
    enum { NumParams = 14 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13)> Type
    Type fptr;
public:
    enum { NumParams = 13 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12)> Type
    Type fptr;
public:
    enum { NumParams = 12 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11)> Type
    Type fptr;
public:
    enum { NumParams = 11 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10)> Type
    Type fptr;
public:
    enum { NumParams = 10 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9)> Type
    Type fptr;
public:
    enum { NumParams = 9 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7,typename ARG8 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8)> Type
    Type fptr;
public:
    enum { NumParams = 8 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
          typename ARG7 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7)> Type
    Type fptr;
public:
    enum { NumParams = 7 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5, ARG6 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)> Type
    Type fptr;
public:
    enum { NumParams = 6 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4, ARG5 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4, ARG5)> Type
    Type fptr;
public:
    enum { NumParams = 5 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3, ARG4 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3, ARG4)> Type
    Type fptr;
public:
    enum { NumParams = 4 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2, ARG3 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2, ARG3)> Type
    Type fptr;
public:
    enum { NumParams = 3 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1,typename ARG2 >
class VariadicFunctoid
< Pols ,RT  ,ARG1, ARG2 >                : public Functoid {
public:
    typedef std::function<RT(ARG1, ARG2)> Type
    Type fptr;
public:
    enum { NumParams = 2 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT ,typename ARG1 >
class VariadicFunctoid
< Pols ,RT  ,ARG1 >                : public Functoid {
public:
    typedef std::function<RT(ARG1)> Type
    Type fptr;
public:
    enum { NumParams = 1 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};
template <typename Pols , typename RT  >
class VariadicFunctoid
< Pols ,RT   >                : public Functoid {
public:
    typedef std::function<RT()> Type
    Type fptr;
public:
    enum { NumParams = 0 };
    VariadicFunctoid(const string& name, Type ptr) : Functoid(name), fptr(ptr) {};


};


