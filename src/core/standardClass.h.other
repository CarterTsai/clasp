#ifndef	_core_standardClass_H
#define _core_standardClass_H



#include <stdio.h>
#include <string>
#include <vector>
#include <set>
#include "foundation.h"
#include "object.h"
#include "holder.h"

namespace core {

SMART(StandardClass);


SMART(StringSet);






SMART(StandardClass );
class StandardClass_O : public MetaClass_O
{
    LISP_META_CLASS(StandardClass);
    LISP_BASE1(MetaClass_O);
    LISP_CLASS(CorePkg,StandardClass_O,"StandardClass");
public:
	void	archiveBase(ArchiveP node);
	void	initialize();
protected:
	MetaClass_sp			_InstanceCoreClass;
public:
	/*! Special creator used when starting up lisp environment */
	static StandardClass_sp create(MetaClass_sp mc);

#if 0 // for now comment out all functions
	static StandardClass_sp create(Lisp_sp e,Symbol_sp name /* , sid instanceClassSID */ );

	/*! ensure-class-using-class - see AOMOP-183 */
	static T_sp create_ensureClassUsingClass( Executable_sp exec,
						  Cons_sp args,
						  Environment_sp env,
						  Lisp_sp lisp);

							      
    /*! Convert a Class list designator to a Cons of classes.
      Accept the following designators:
      nil - Convert to a Cons containing StandardClass.
      A single class - Convert to a Cons containing that Class.
      A cons of classes - return it.
    */
//    static Cons_sp classListDesignator(T_sp baseClassesDesignator, Lisp_sp lisp);

    /*! Identify the core class from the given list of classes.
      Throw an exception if there is not one common core class.
    */
    static BuiltInClass_sp identifyCommonInstanceCoreClass(Cons_sp baseClasses,Lisp_sp lisp);
    /*! Merge SlotSpecifiers from the class definition and the base classes */
    static Cons_sp mergeClassSlots(Cons_sp baseClasses, Cons_sp slotSpecifiers, Lisp_sp lisp);
public:

    /*! Set the CoreClass of the object (the C++ class that every instance will have at its core.
      Set the base classes of the object (all of them have to share the same core).
      Set the slots of the Class by merging all of the slots of the base classes.
    */
//    void setInstanceCoreClassAndBaseClassesAndSlots(T_sp baseClassesDesignator, Cons_sp slotSpecifiers );

public:

	void setInstanceCoreClass(BuiltInClass_sp mc);
	
	/*! The InstanceCoreClass for objects of this class can be any BuiltInClass */
	BuiltInClass_sp getInstanceCoreClass() const;

public:
//	void defineYourSlotsFromBinderArchiveNode(ArchiveP node);
//	uint numberOfSlots();
		/*! Look for the symbol and return an iterator for the slot
		 * otherwise return end()
		 */
//	slotIterator find(Symbol_sp sym);
public:

		/*! Reset the slots */
//	void resetSlots();

	void appendInstanceVariablesFromStandardClass(StandardClass_sp cc);
	void appendInstanceVariablesFromListOfSymbols(Cons_sp variableNames);

	T_sp allocate_newNil();
        void setupAccessors(Cons_sp ss); // { this->_InstanceVariableNames = ss; };
//	Cons_sp getInstanceVariableNames() { return this->_InstanceVariableNames;};
    virtual void describe();
    virtual string dumpInfo();
    virtual string dumpMethods();
    virtual T_sp new_instance(Executable_sp e, Cons_sp args,  Environment_sp environ, Lisp_sp lisp);

#endif

    DEFAULT_CTOR_DTOR(StandardClass_O);
};


class	StandardClassInitializationFunctoid : public Functoid
{
private:
	StandardClass_sp	_StandardClass;	
public:
    virtual string describe() const {return "StandardClassInitializationFunctoid";};
    virtual T_sp invoke(Executable_sp e, Cons_sp args, Environment_sp environ, Lisp_sp lisp )
    {
	T_sp obj = this->_StandardClass->new_instance(e,args,environ,lisp);
	return obj;
    };
    StandardClassInitializationFunctoid(StandardClass_sp c) { this->_StandardClass = c;};
    virtual ~StandardClassInitializationFunctoid() {};
};

};
TRANSLATE(core::StandardClass_O);
#endif //]
