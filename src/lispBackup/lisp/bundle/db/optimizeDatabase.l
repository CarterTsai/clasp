					; fixed code
(include "CANDO/db/jobSetup.l" )
(defun clusterFinderForFragmentCoordinates (fragmentCoordinates )
  (let (clusterFinder coords )
    (setq clusterFinder (ClusterFinder fragmentCoordinates ))
    (setq coords (coordinateArraysAsCons fragmentCoordinates ))
    (foreach c coords 
	     (addCoordinateArray clusterFinder c ()))
    clusterFinder ))

(defun describeClusters (clusterFinder )
  (let (cls singleMemberClusters )
    (setq cls (clustersAsCons clusterFinder ))
    (print (% "Clusters %d ===>" (length cls )))
    (setq singleMemberClusters 0 )
    (foreach c cls 
	     (if (> (clusterSize c )1 )
		 (then 
		  (print (% "Cluster contains %d entries: has radius %lf" (clusterSize c )(clusterRadius c ))))
	       (else 
		(setq singleMemberClusters (+ singleMemberClusters 1 )))))
    (ifTrue (> singleMemberClusters 0 )
	    (print (% "There were %d clusters with one member" singleMemberClusters )))))
(defun renderClusters (clusterFinder fragmentName monomerCoordinates )
  (let (allDl (renderWithBonds clusterFinder monomerCoordinates ))
    allDl ))


(defun simplifyFragmentCoordinates (fragmentCoordinates clusterFinder )
  (let (fragmentName clusters conformation coords )
    (setq fragmentName (getFragmentName fragmentCoordinates ))
    (ifTrue (!= fragmentName "body" )
	    (setq clusters (clustersAsCons clusterFinder ))
	    (clearCoordinateArrays fragmentCoordinates )
	    (foreach cluster clusters 
		     (setq conformation (entryClosestToCenter cluster ))
		     (setq coords (getCoordinateArray conformation ))
		     (addCoordinateArray fragmentCoordinates coords )))))
(defun simplifyMonomerCoordinates (&key (saveClusters true ))
  (let (allMonomerCoordinates count total parts fileName fragmentCoordinates contextString frameDl num clusters dl filePath scaffoldList numScaffolds )
    (setq allMonomerCoordinates (uniqueMonomerCoordinatesAsCons *DATABASE* ))
    (ensure-directories-exist (Path "." "clusters" ))
    (setq count 0 )
    (setq total (length allMonomerCoordinates ))
    (foreach mc allMonomerCoordinates 
	     (print  "=======================================================" )
	     (print  "=======================================================" )
	     (print (% "mc = %s" (getComment mc )))
	     (print (% "index = %d/%d" count total ))
	     (setq count (+ count 1 ))
	     (print  "-------------------------------------------------------" )
	     (setq parts (split (getComment mc )"_." ))
	     (setq fileName (@ parts 2 ))
	     (setq fragmentCoordinates (fragmentCoordinatesAsCons mc ))
	     (setq contextString (getKey (getContext mc )))
	     (setq frameDl (FrameList ))
	     (setName frameDl :top )
	     (foreach fc fragmentCoordinates 
		      (print (% "fc = %s" (getFragmentName fc )))
		      (setq num (numberOfCoordinateArrays fc ))
		      (print (% "    Number of coordinate arrays: %d" num ))
		      (setq clusters (clusterFinderForFragmentCoordinates fc ))
		      (findClusters clusters 0.2 )
		      (describeClusters clusters )
		      (simplifyFragmentCoordinates fc clusters )
		      (when saveClusters 
			(setq dl (renderClusters clusters (getFragmentName fc )mc ))
			(append frameDl dl )))
	     (when saveClusters 
	       (setq filePath (% "./clusters/%s.cxml" fileName ))
	       (print (% "Saving frames to %s" filePath ))
	       (saveArchive frameDl filePath ))
	     (setq scaffoldList (getScaffoldList mc ))
	     (setq numScaffolds (numberOfScaffolds scaffoldList ))
	     (print (% "   Number of scaffolds = %d" numScaffolds )))))


(defun optimizeDatabase (inputDatabase outputDatabase &key (saveClusters true ))
  (print (% "Loading standardDatabase(%s)" inputDatabase ))
  (database inputDatabase )
  (print  "Optimizing database" )
  (simplifyMonomerCoordinates :saveClusters saveClusters )
  (print (% "Saving optimized database to: %s" outputDatabase ))
  (saveArchive *DATABASE* outputDatabase ))
(global *unoptimizedName* (unoptimizedDatabaseName ))
(global *fullName* (fullDatabaseName ))
(optimizeDatabase *unoptimizedName* *fullName* :saveClusters false )