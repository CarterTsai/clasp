					; fixed code
(include "CANDO/db/amideBondTester.l" )
(defClass StartMinimize ()(_ForceField _MolTrainer _FileName _Options _Comment ))
(defMethod initTrainerAndForceField StartMinimize (self trainer forceField options )
  (setq (slot self _ForceField )forceField )
  (setq (slot self _MolTrainer )trainer )
  (setq (slot self _FileName )(asString (getPath (getHeader trainer ))))
  (setq (slot self _Comment )"" )
  (setq (slot self _Options )options )
  self )

(defMethod run StartMinimize (self )
  (let (stage confLip agg amideTester mol minCount goodConformation min ef minOk msg beyondThreshold newState badAmides newStateMessage confLib minimumEnergy )
    (log (% "Working with trainer: %s" (slot self _FileName )))
    (setq stage (TrainerHistoryEntry ))
    (start stage "startMinimize" )
    (setq confLib (getConformationExplorer (slot self _MolTrainer )))
    (setq agg (getMatter confLib ))
    (setq amideTester (AmideBondTester (getMatter confLib )))
    (log "Getting first molecule" )
    (setq mol (firstMolecule agg ))
    (setq minCount 0 )
    (setq goodConformation false )	; Try 10 minimizations to get a good one

    (foreach minCount (Range 0 500 )
	     (print (% "    try [%d]" minCount ))
	     (randomizeAtomPositions mol )
	     (log "About to assign types" )
	     (setq min (Minimizer :matter agg :forceField (slot self _ForceField )))
	     (setq ef (getEnergyFunction min ))	
					;	( prognDebug [ min debugStart ] )
	     (handlerCase (progn
			    (setOptions ef (list :nonbondTerm false ))
			    (minimize min )
			    (setOptions ef (list :nonbondTerm true ))
			    (minimize min )
			    (setOptions ef (list :nonbondTerm false ))
			    (minimize min )
			    (setOptions ef (list :nonbondTerm true ))
			    (log "Enabling nonbond for the last time" )
			    (useDefaultSettings min )
			    (log "Starting minimize" )
			    (minimize min )
			    (log "Done minimize" ))
			  (CandoException (err) (print "Error during minimization - try again")))
	     (setq minimumEnergy (getTotalEnergy ef )) 
	     (setq minOk true )
	     (setq msg "ok" )
	     (log "Checking for minimizer error" )
	     (if (== (status min ) :minimizerError )
		 (then 
		  (print "Minimization failed" )
		  (setq minOk false )
		  (setq msg (statusMessage min )))
	       (else 
		(print "Minimization succeeded" )
		(clearEntries confLib )
		(setMatter confLib agg )))
	     (setq newState "?" )
	     (log "Checking for beyond threshold interactions" )
	     (ifTrue  minOk 
		      (setq beyondThreshold (checkForBeyondThresholdInteractions ef ))
		      (setq goodConformation true )
		      (ifTrue (> beyondThreshold 0 )
			      (print (% "    There are %d beyond threshold interactions" beyondThreshold ))
			      (setComment stage (getMessage ef ))
			      (print  "    Summary: " )
			      (print (% "%s" (getMessage ef )))
			      (setq goodConformation false )
			      (setq minOk false ))
		      (setq badAmides (countBadAmidesInMatter amideTester agg ))
		      (ifTrue (> badAmides 0 )
			      (print (% "    There are %d bad amides" badAmides ))
			      (print (% "    %s" (getMessages amideTester )))
			      (setComment stage (% "There are %d bad amide bonds [cis acyclic amides + trans cyclic amides]" badAmides ))
			      (setq goodConformation false )
			      (setq minOk false ))
		      (ifTrue  minOk 
			       (return-from () )))
	     (setq minCount (+ minCount 1 )))
    (if  goodConformation 
	(then 
	 (log (% "GOOD: Found minimum energy conformation with good geometry after %d tries" minCount ))
	 (setComment stage "Minimized_ok" )
	 (setq newState "min" )
	 (setq newStateMessage "Minimized_ok" ))
      (else 
       (log (% "BAD: Failed to find minimum energy conformation with good geometry after %d tries" minCount ))
       (setq newState "bad" )
       (setq newStateMessage (% "Minimization failed after %d tries" minCount ))))
    (setStateAndMessage (getHeader (slot self _MolTrainer ))newState newStateMessage )
    (log  "Writing state" )
    (finish stage newState )
    (addToHistory (getHistory (getHeader (slot self _MolTrainer )))stage )
    (chem:write (slot self _MolTrainer ))))