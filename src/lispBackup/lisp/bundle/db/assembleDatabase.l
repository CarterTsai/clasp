;; fixed code
(include "CANDO/db/jobSetup.l" )
(include "CANDO/db/trainer.l")



(defun extractMonomerCoordinates (molTrainer )
  (let (db header body fileName constitutionName context constitution topology contextStringSet focusMonomer monomerCoordinates searchDatabase rawContextKey oligomer )
    (setq db *DATABASE* )
    (setq header (getHeader molTrainer ))
    (setq body molTrainer )
    (setq fileName (asString (getPath header )))
    (print (% "========structure: %s" fileName ))
    (log (% "molTrainer====structure: %s" fileName ))
    (setq rawContextKey (getContextKey header ))
    (log (% "loaded contextKey=%s" rawContextKey ))
    (setq oligomer (getData body 'oligomer ))
    (log  "oligomer=" )
    (log (% "%s" (asXmlString oligomer )))
    (setq constitutionName (trainer-header-focus-constitution-name header))
    (print (% "Constitution = %s " constitutionName ))
    (log (% "Constitution = %s" constitutionName ))
    (setq context (getContext header ))	;    print [ "%s" % [ context asXmlString ] ]

    (log (% "%s" (asXmlString context )))
    (setq constitution (monomerConstitutionForName db constitutionName ))
    (ifTrue (== constitution ())
	    (raise (% "Could not find constitution[%s] in candoDatabase!!" constitutionName )))
    (setq topology (getTopologyForContext constitution context ))
    (print (% "Got topology: %s" (getName topology )))
    (log (% "Got topology: %s" (getName topology )))
    (setq contextStringSet (getAllSpecificKeys context ))
    (ifTrue (== (size contextStringSet )0 )
	    (raise "Context doesn't expand to contextKeys, IGNORING" )
	    ;;    print [  "extractCoordinates>>Contexts: \n%s" % [ contextStringSet asXmlString ] ]
	    )
    (setq focusMonomer (trainer-focus-monomer body))
    (setq monomerCoordinates (MonomerCoordinates :context context ))
    (print (% "Setting monomerCoordinates comment: %s" fileName ))
    (setComment monomerCoordinates (% "Extracted from: %s" fileName ))
    (log (% "extractMonomerCoordinates:extract comment=|%s|" (getComment monomerCoordinates )))
    (setq searchDatabase (getConformationExplorer body ))
    (defineFromConformationExplorer monomerCoordinates topology searchDatabase focusMonomer (maximumConformationsInEachMonomerCoordinates )) 
;;    print [ "Extracted coordinates for context: %s" % [ context getKey ] ]
;;    [ body setData "FocusMonomerCoordinates" monomerCoordinates ]
    monomerCoordinates ))

(defun assembleUnsortedDatabase (&key (outputFileName ())(fileNames ()))
  (assert (notNil outputFileName )"You must provide outputFileName" )
  (assert (notNil fileNames )"You must provide fileNames" )
  (let ((databaseOutputFileName outputFileName )(bdb *DATABASE* )job header state mc added )
    (log "About to read filenames" )
    (foreach fn fileNames 
	     (setq job (readTrainer fn ))
	     (setq header (getHeader job ))
	     (setq state (getState header ))
	     (if (or (== state "searching" )(== state "searched" ))
		 (then 
		  (setq mc (extractMonomerCoordinates job ))
		  (setq added (addMonomerCoordinates bdb mc ))
		  (print (% "File(%s) I added %d keys" fn added )))
	       (else 
		(print (% "MolTrainer %s is in the wrong state[%s]" fn state )))))
    (print (% "Writing database to[%s]" databaseOutputFileName ))
    (log "About to write archive" )
    (saveArchive bdb databaseOutputFileName )))
(defun assembleFromJobs (&key (seedDatabaseName ())(outputName ())(jobs ()))
  (assert (notNil seedDatabaseName )"seedDatabaseName must be defined" )
  (assert (notNil jobs )"jobs must be defined" )
  (assert (notNil outputName )"outputName must be defined - outputDatabase name" )
  (database seedDatabaseName )
  (assembleUnsortedDatabase :outputFileName outputName :fileNames jobs ))
(let ((jobs (gatherTrainers *ARGS* ))(seedName (seedDatabaseName ))(outputName (unoptimizedDatabaseName )))
  (assembleFromJobs :seedDatabaseName seedName :jobs jobs :outputName outputName ))
(print "Done" )
(print "  now run db/optimizeDatabase.l" )