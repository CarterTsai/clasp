					; fixed code
(defClass ProcessStates ()(_StateToName _NameToState _NextStateTag )
  (method __init__ (self )
	  (setq (slot self _StateToName )(IntegerKeyObjectDictionary ))
	  (setq (slot self _NameToState )(ObjectDictionary ))
	  (setq (slot self _NextStateTag )1 )
	  (addHardWiredState self "shutdown" (shutdownState self ))
	  (addHardWiredState self "initialize" (initializeState self ))
	  (addHardWiredState self "process" (processState self ))
	  (addHardWiredState self "uploadResults" (uploadResultsState self )))
  (method addHardWiredState (self name tag )
	  (put (slot self _StateToName )tag name )
	  (put (slot self _NameToState )name tag )
	  (setq (slot self _NextStateTag )(max (slot self _NextStateTag )(+ tag 1 ))))
  (method addState (self name )
	  (setq tag (slot self _NextStateTag ))
	  (put (slot self _StateToName )(slot self _NextStateTag )name )
	  (put (slot self _NameToState )name (slot self _NextStateTag ))
	  (setq (slot self _NextStateTag )(+ (slot self _NextStateTag )1 ))
	  tag )

  (method initializeState (self ) 1)

  (method processState (self ) 2)

  (method uploadResultsState (self ) 3)

  (method shutdownState (self ) 4)

  (method stateTagFromName (self name )
	  (assert (contains (slot self _NameToState )name )(% "There is no state named: %s" name ))
	  (get (slot self _NameToState )name ))
  (method stateNameFromTag (self tag )
	  (assert (contains (slot self _StateToName )tag )(% "There is no state tagged: %d" tag ))
	  (get (slot self _StateToName )tag )))
(global *systemProcessStates* (ProcessStates ))
(defun createProcessState (name )
  (addState *systemProcessStates* name ))
(defun shutdownState ()
  (shutdownState *systemProcessStates* ))
(defun processState ()
  (processState *systemProcessStates* ))
(defun uploadResultsState ()
  (uploadResultsState *systemProcessStates* ))
(defun initializeState ()
  (initializeState *systemProcessStates* ))
(defun describeState (s )
  (stateNameFromTag *systemProcessStates* s ))




(defClass OneProcess ()(_Rank _LastHeardFromTime _CurrentState _Running _Data )
  (method __init__ (self rank )
	  (setq (slot self _Rank )rank )
	  (setq (slot self _Running )true )
	  (setq (slot self _CurrentState )())
	  (setLastHeardFromTimeToNow self )
	  (setq (slot self _Data )())
	  self )

  (method setLastHeardFromTimeToNow (self )
	  (setq (slot self _LastHeardFromTime )(PosixTime ))
	  (setToLocalTime (slot self _LastHeardFromTime )))
  (method setState (self stateTag )
	  (setq (slot self _CurrentState )stateTag )
	  (setLastHeardFromTimeToNow self ))
  (method getRank (self )
	  (slot self _Rank ))
  (method getState (self )
	  (slot self _CurrentState ))
  (method getDurationSinceLastHeardFrom (self )
	  (setq now (PosixTime ))
	  (setToLocalTime now )
	  (setq duration (sub now (slot self _LastHeardFromTime )))
	  duration )

  (method setData (self data )
	  (setq (slot self _Data )data ))
  (method getData (self ) (slot self _Data ))
  (method dump (self )
	  (println (% "Process(%d)" (slot self _Rank ))))
  (method shutdown (self )
	  (setq (slot self _Running )false ))
  (method isRunning (self ) (slot self _Running ))
  (method changeState (self newState job )
	  (setState self newState )
	  (println (% "Sending new state(%s) down to process with rank: %d" (describeState newState )(slot self _Rank )))
	  (Send (mpiCommWorld )job (slot self _Rank )newState )
	  (when (== newState (shutdownState ))
	    (setq (slot self _Running )false )  )))
					;
					; [ self slot _ProcessManagerObject ] - an object that is called whenever a OneProcess
					;			  communicates with the farm
					;
					; Subclass method (processData (self process) ) -- process data
					;		  (finish ) -- finished processing data
					;
(defClass ProcessFarm ()(_Processes _ProcessManagerObject _Jobs _Worker )
  (method __init__ (self jobs )
	  (setq (slot self _Processes )(IntegerKeyObjectDictionary ))
	  (setq (slot self _Jobs )jobs )
	  (setq (slot self _Worker )())
	  (println  "Creating processes" )
	  (foreach p (Range 1 (GetSize (mpiCommWorld )))
		   (setq pro (createProcess self p ))
		   (dump pro ))
	  (dumpProcesses self ))
  (method setWorker (self worker )
	  (setq (slot self _Worker )worker ))
  (method getProcess (self processRank )
	  (setq key processRank )
	  (assert (contains (slot self _Processes )key )(% "Could not find process with key: %d" key ))
	  (get (slot self _Processes )key ))

  (method createProcess (self processRank )
	  (setq one (OneProcess processRank ))
	  (setq key processRank )
	  (println (% "Creating process with rank: %d" key ))
	  (put (slot self _Processes )key one )
	  one )
  (method dumpProcesses (self )
	  (println  "Dumping all processes" )
	  (foreach p (valuesAsCons (slot self _Processes ))
		   (dump p )))
  (method waitForProcess (self )
	  (println (% "-------- waiting for communication from processes ------------ processes still running= %d" (processesStillRunning self )))
	  (setq msg (Recv (mpiCommWorld )MPI.ANY_SOURCE MPI.ANY_TAG ))
	  (setq source (GetSource (mpiCommWorld )))
	  (setq stateTag (GetTag (mpiCommWorld )))
	  (setq process (getProcess self source ))
	  (setState process stateTag )
	  (setData process msg )
	  (println (% "Got communication from process %d" source ))
	  process )
  (method processesStillRunning (self )
	  (let ((running 0))
	    (foreach p (valuesAsCons (slot self _Processes ))
		     (when (isRunning p )
		       (setq running (+ running 1 ))))
	    running))

  (method runSingle (self )
	  (setq process (OneProcess 1 ))
	  (foreach job (slot self _Jobs )
		   (setq result (processOneJob (slot self _Worker )job ))
		   (setData process result )
		   (processData self process ))
	  (finish self ))
  (method runMpi (self )
	  (while (> (processesStillRunning self )0 )
	    (dumpProcesses self )
	    (setq process (waitForProcess self ))
	    (when (isNil process )
	      (raise  "Handle timeouts" ))
	    (println (% "Responding to process %d" (getRank process )))
	    (respondToProcess self process )
	    (setq job (nextJob self ))
	    (if (isNil job )
		(then 
		 (changeState process (shutdownState )()))
	      (else 
	       (changeState process (processState )job ))))
	  (println  "Done responding" )
	  (println  "Calling finish method" )
	  (finish self )
	  (println  "The manager is now shutting down, all of the jobs have been carried out" )
	  (println  "and all of the workers have sent us their data" )
	  (println "" )
	  (println "" )
	  (println "Exiting" ))
  (method respondToProcess (self process )
	  (setq state (getState process ))
	  (cond 
	   ((== state (initializeState )) ;E-A
	    ())				  ;E-B

	   ((== state (uploadResultsState )) ;E-A
	    (setq data (getData process ))
	    (processData self process )) ;E-B

	   (true 
	    (raise (% "Manager should never receive state(%s)" (describeState state ))))))
  (method nextJob (self )
	  (println (% "Current jobs = %s" (repr (slot self _Jobs ))))
	  (when (notNil (slot self _Jobs ))
	    (setq job (car (slot self _Jobs )))
	    (setq (slot self _Jobs )(cdr (slot self _Jobs )))
	    (println (% "Returning job %s" (repr job )))
	    (return-from nextJob job ))
	  (println  "Ran out of jobs" )
	  () )

  (method processData (self process )
	  (raise "Subclass must implement processData" ))
  (method finish (self )
	  (println "Subclass can implement finish - by default do nothing" )))
(defClass ParallelFarmWorker ()(_MpiRank _State _Shutdown _Data )
  (method __init__ (self )
	  (setq (slot self _MpiRank )(mpiRank ))
	  (setq (slot self _Shutdown )false )
	  (setq (slot self _State )(initializeState ))
	  (setq (slot self _Data )()))
  (method run (self )
	  (while (not (slot self _Shutdown ))
	    (println (% "Sending state(%s) of worker(%d)" (describeState (slot self _State ))(slot self _MpiRank )))
	    (Send (mpiCommWorld )(slot self _Data )0 (slot self _State ))
	    (println (% "Worker[%d] waiting for new state from manager" (mpiRank )))
	    (setq newData (Recv (mpiCommWorld )0 MPI.ANY_TAG ))
	    (setq stateTag (GetTag (mpiCommWorld )))
	    (setq (slot self _State )stateTag )
	    (println (% "Got the job[%s]" (describeState stateTag )))
	    (respondToStateChange self stateTag newData ))
	  (println  "Waiting for one last message from Manager (that will never come)" )
	  (setq lastGasp (Recv (mpiCommWorld )0 MPI.ANY_TAG ))
	  (println "Never reach here but if I do then I'm shutting down" ))
  (method setState (self s )
	  (setq (slot self _State )s ))
  (method uploadNewStateAndResults (self newState results )
	  (setq (slot self _State )newState )
	  (setq (slot self _Data )results ))
  (method shutdown (self )
	  (setq (slot self _Shutdown )true ))
  (method respondToStateChange (self newState data )
	  (cond 
	   ((== newState (processState )) ;E-A
	    (setq hits (processOneJob self data ))
	    (uploadNewStateAndResults self (uploadResultsState )hits ))	;E-B

	   ((== newState (shutdownState )) ;E-A
	    (shutdown self ))		   ;E-B

	   (true 
	    (println (% "Illegal state: %s" (describeState newState )))
	    (shutdown self )))))



(defun processFarm.mainLoop (&key manager worker )
  (if (== (mpiRank )0 )
      (then 
       (assert (notNil manager )"You must specify the manager" )
       (assert (notNil worker )"You must specify the worker" )
       (println (% "mpiEnabled = %d" (repr (mpiEnabled ))))
       (if (mpiEnabled )
	   (then 
	    (println  "Starting [ manager runMpi] " )
	    (runMpi manager ))
	 (else 
	  (println  "Starting [ manager runSingle] " )
	  (setWorker manager worker )
	  (runSingle manager ))))
    (else 
     (assert (notNil worker )"You must specify the worker" )
     (run worker ))))