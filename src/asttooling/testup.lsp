
(defun generate-nested-unwind-protect (n)
  (if (zerop n)
      (if (zerop (random 2))
          '(return-from test 42)
          '33)
      `(unwind-protect
            ,(generate-nested-unwind-protect (1- n))
         (decf n))))



(defmacro test (n)
  `(block test
     (let ((n ,n))
       ,(generate-nested-unwind-protect n)
       (assert (zerop n)))))



(test 20)



;;(format t "Result ~a~%" (BLOCK TEST (LET ((N 1)) (UNWIND-PROTECT (RETURN-FROM TEST 42) (setq N (- N 1))) (if (not (zerop n)) (print "n is not zero")))))

(CL:BLOCK TEST (CL:LET ((N 100)) (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT (CL:UNWIND-PROTECT 33 (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:DECF N)) (CL:ASSERT (CL:ZEROP N))))



(print "Hello")
