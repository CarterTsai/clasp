(defun keyword-everything (tree)
  (mapcar #'(lambda (l) (mapcar #'(lambda (x) (intern (core:lispify-name x) :keyword)) l ) ) tree ))


(defun testk (tree)
  (mapcar #'(lambda (l) l)   tree))

(setq *print-circle* nil)

;;
;; traversal matchers
;;
(print (keyword-everything '(
                      ( "ArraySubscriptExpr" "hasBase" "Expr" #|InnerMatcher|# )
                      ( "ArraySubscriptExpr" "hasIndex" "Expr" #|InnerMatcher|# )
                      ( "ArrayTypeLoc" "hasElementTypeLoc" "TypeLoc" )
                      ( "ArrayType" "hasElementType" "Type" )
                      ( "AtomicTypeLoc" "hasValueTypeLoc" "TypeLoc" )
                      ( "AtomicType" "hasValueType" "Type" )
                      ( "AutoType" "hasDeducedType" "Type" )
                      ( "BinaryOperator" "hasEitherOperand" "Expr" #|InnerMatcher|# )
                      ( "BinaryOperator" "hasLHS" "Expr" #|InnerMatcher|# )
                      ( "BinaryOperator" "hasRHS" "Expr" #|InnerMatcher|# )
                      ( "BlockPointerTypeLoc" "pointeeLoc" "TypeLoc" )
                      ( "BlockPointerType" "pointee" "Type" )
                      ( "CXXConstructExpr" "hasAnyArgument" "Expr" #|InnerMatcher|# )
                      ( "CXXConstructExpr" "hasArgument" "unsigned-n" "Expr" #|InnerMatcher|# )
                      ( "CXXConstructExpr" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "CXXConstructorDecl" "forEachConstructorInitializer" "CXXCtorInitializer" #|InnerMatcher|# )
                      ( "CXXConstructorDecl" "hasAnyConstructorInitializer" "CXXCtorInitializer" #|InnerMatcher|# )
                      ( "CXXCtorInitializer" "forField" "FieldDecl" #|InnerMatcher|# )
                      ( "CXXCtorInitializer" "withInitializer" "Expr" #|InnerMatcher|# )
                      ( "CXXMemberCallExpr" "on" "Expr" #|InnerMatcher|# )
                      ( "CXXMemberCallExpr" "onImplicitObjectArgument" "Expr" #|InnerMatcher|# )
                      ( "CXXMemberCallExpr" "thisPointerType" "Decl" #|InnerMatcher|# )
                      ( "CXXMethodDecl" "ofClass" "CXXRecordDecl" #|InnerMatcher|# )
                      ( "CXXRecordDecl" "hasMethod" "CXXMethodDecl" #|InnerMatcher|# )
                      ( "CXXRecordDecl" "isDerivedFrom" "NamedDecl" #|Base|# )
                      ( "CXXRecordDecl" "isSameOrDerivedFrom" "NamedDecl" #|Base|# )
                      ( "CallExpr" "callee" "Decl" #|InnerMatcher|# )
                      ( "CallExpr" "hasAnyArgument" "Expr" #|InnerMatcher|# )
                      ( "CallExpr" "hasArgument" "unsigned-n" "Expr" #|InnerMatcher|# )
                      ( "CallExpr" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "CaseStmt" "hasCaseConstant" "Expr" #|InnerMatcher|# )
                      ( "CastExpr" "hasSourceExpression" "Expr" #|InnerMatcher|# )
                      ( "ClassTemplateSpecializationDecl" "hasAnyTemplateArgument" "TemplateArgument" #|InnerMatcher|# )
                      ( "ClassTemplateSpecializationDecl" "hasTemplateArgument" "unsigned-n" "TemplateArgument" #|InnerMatcher|# )
                      ( "ComplexTypeLoc" "hasElementTypeLoc" "TypeLoc" )
                      ( "ComplexType" "hasElementType" "Type" )
                      ( "CompoundStmt" "hasAnySubstatement" "Stmt" #|InnerMatcher|# )
                      ( "ConditionalOperator" "hasCondition" "Expr" #|InnerMatcher|# )
                      ( "ConditionalOperator" "hasFalseExpression" "Expr" #|InnerMatcher|# )
                      ( "ConditionalOperator" "hasTrueExpression" "Expr" #|InnerMatcher|# )
                      ( "DeclRefExpr" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "DeclRefExpr" "throughUsingDecl" "UsingShadowDecl" #|InnerMatcher|# )
                      ( "DeclRefExpr" "to" "Decl" #|InnerMatcher|# )
                      ( "DeclStmt" "containsDeclaration" "unsigned-n" "Decl" #|InnerMatcher|# )
                      ( "DeclStmt" "hasSingleDecl" "Decl" #|InnerMatcher|# )
                      ( "DeclaratorDecl" "hasTypeLoc" "TypeLoc" #|Inner|# )
                      ( "Decl" "hasDeclContext" "Decl" #|InnerMatcher|# )
                      ( "DoStmt" "hasBody" "Stmt" #|InnerMatcher|# )
                      ( "DoStmt" "hasCondition" "Expr" #|InnerMatcher|# )
                      ( "ElaboratedType" "hasQualifier" "NestedNameSpecifier" #|InnerMatcher|# )
                      ( "ElaboratedType" "namesType" "QualType" #|InnerMatcher|# )
                      ( "EnumType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "ExplicitCastExpr" "hasDestinationType" "QualType" #|InnerMatcher|# )
                      ( "Expr" "hasType" "Decl" #|InnerMatcher|# )
                      ( "Expr" "ignoringImpCasts" "Expr" #|InnerMatcher|# )
                      ( "Expr" "ignoringParenCasts" "Expr" #|InnerMatcher|# )
                      ( "Expr" "ignoringParenImpCasts" "Expr" #|InnerMatcher|# )
                      ( "ForStmt" "hasBody" "Stmt" #|InnerMatcher|# )
                      ( "ForStmt" "hasCondition" "Expr" #|InnerMatcher|# )
                      ( "ForStmt" "hasIncrement" "Stmt" #|InnerMatcher|# )
                      ( "ForStmt" "hasLoopInit" "Stmt" #|InnerMatcher|# )
                      ( "FunctionDecl" "hasAnyParameter" "ParmVarDecl" #|InnerMatcher|# )
                      ( "FunctionDecl" "hasParameter" "unsigned-n" "ParmVarDecl" #|InnerMatcher|# )
                      ( "FunctionDecl" "returns" "QualType" #|InnerMatcher|# )
                      ( "IfStmt" "hasCondition" "Expr" #|InnerMatcher|# )
                      ( "IfStmt" "hasConditionVariableStatement" "DeclStmt" #|InnerMatcher|# )
                      ( "ImplicitCastExpr" "hasImplicitDestinationType" "QualType" #|InnerMatcher|# )
                      ( "InjectedClassNameType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "LabelStmt" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "MemberExpr" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "MemberExpr" "hasObjectExpression" "Expr" #|InnerMatcher|# )
                      ( "MemberExpr" "member" "ValueDecl" #|InnerMatcher|# )
                      ( "MemberPointerTypeLoc" "pointeeLoc" "TypeLoc" )
                      ( "MemberPointerType" "pointee" "Type" )
                      ( "NestedNameSpecifierLoc" "hasPrefix" "NestedNameSpecifierLoc" #|InnerMatcher|# )
                      ( "NestedNameSpecifierLoc" "loc" "NestedNameSpecifier" #|InnerMatcher|# )
                      ( "NestedNameSpecifierLoc" "specifiesTypeLoc" "TypeLoc" #|InnerMatcher|# )
                      ( "NestedNameSpecifier" "hasPrefix" "NestedNameSpecifier" #|InnerMatcher|# )
                      ( "NestedNameSpecifier" "specifiesNamespace" "NamespaceDecl" #|InnerMatcher|# )
                      ( "NestedNameSpecifier" "specifiesType" "QualType" #|InnerMatcher|# )
                      ( "ParenType" "innerType" "Type" )
                      ( "PointerTypeLoc" "pointeeLoc" "TypeLoc" )
                      ( "PointerType" "pointee" "Type" )
                      ( "QualType" "hasCanonicalType" "QualType" #|InnerMatcher|# )
                      ( "QualType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "QualType" "pointsTo" "Decl" #|InnerMatcher|# )
                      ( "QualType" "references" "Decl" #|InnerMatcher|# )
                      ( "RecordType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "ReferenceTypeLoc" "pointeeLoc" "TypeLoc" )
                      ( "ReferenceType" "pointee" "Type" )
                      ( "Stmt" "alignOfExpr" "UnaryExprOrTypeTraitExpr" #|InnerMatcher|# )
                      ( "Stmt" "sizeOfExpr" "UnaryExprOrTypeTraitExpr" #|InnerMatcher|# )
                      ( "SwitchStmt" "forEachSwitchCase" "SwitchCase" #|InnerMatcher|# )
                      ( "TagType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "TemplateArgument" "refersToDeclaration" "Decl" #|InnerMatcher|# )
                      ( "TemplateArgument" "refersToType" "QualType" #|InnerMatcher|# )
                      ( "TemplateSpecializationType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "TemplateTypeParmType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "*" "findAll" "*" #|Matcher|# )
                      ( "TypeLoc" "loc" "QualType" #|InnerMatcher|# )
                      ( "TypedefType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "UnaryExprOrTypeTraitExpr" "hasArgumentOfType" "QualType" #|InnerMatcher|# )
                      ( "UnaryOperator" "hasUnaryOperand" "Expr" #|InnerMatcher|# )
                      ( "UnresolvedUsingType" "hasDeclaration" "Decl" #|InnerMatcher|# )
                      ( "UsingDecl" "hasAnyUsingShadowDecl" "UsingShadowDecl" #|InnerMatcher|# )
                      ( "UsingShadowDecl" "hasTargetDecl" "NamedDecl" #|InnerMatcher|# )
                      ( "ValueDecl" "hasType" "Decl" #|InnerMatcher|# )
                      ( "VarDecl" "hasInitializer" "Expr" #|InnerMatcher|# )
                      ( "VariableArrayType" "hasSizeExpr" "Expr" #|InnerMatcher|# )
                      ( "WhileStmt" "hasBody" "Stmt" #|InnerMatcher|# )
                      ( "WhileStmt" "hasCondition" "Expr" #|InnerMatcher|# )
                      )))


(setq *print-circle* nil)
(print (keyword-everything '(
                             ( "CXXCtorInitializer" "ctorInitializer" "CXXCtorInitializer")
                             ( "Decl" "accessSpecDecl" "AccessSpecDecl")
                             ( "Decl" "classTemplateDecl" "ClassTemplateDecl")
                             ( "Decl" "classTemplateSpecializationDecl" "ClassTemplateSpecializationDecl")
                             ( "Decl" "constructorDecl" "CXXConstructorDecl")
                             ( "Decl" "decl" "Decl")
                             ( "Decl" "declaratorDecl" "DeclaratorDecl")
                             ( "Decl" "destructorDecl" "CXXDestructorDecl")
                             ( "Decl" "enumConstantDecl" "EnumConstantDecl")
                             ( "Decl" "enumDecl" "EnumDecl")
                             ( "Decl" "fieldDecl" "FieldDecl")
                             ( "Decl" "friendDecl" "FriendDecl")
                             ( "Decl" "functionDecl" "FunctionDecl")
                             ( "Decl" "functionTemplateDecl" "FunctionTemplateDecl")
                             ( "Decl" "methodDecl" "CXXMethodDecl")
                             ( "Decl" "namedDecl" "NamedDecl")
                             ( "Decl" "namespaceDecl" "NamespaceDecl")
                             ( "Decl" "parmVarDecl" "ParmVarDecl")
                             ( "Decl" "recordDecl" "CXXRecordDecl")
                             ( "Decl" "unresolvedUsingValueDecl" "UnresolvedUsingValueDecl")
                             ( "Decl" "usingDecl" "UsingDecl")
                             ( "Decl" "varDecl" "VarDecl")
                             ( "NestedNameSpecifierLoc" "nestedNameSpecifierLoc" "NestedNameSpecifierLoc")
                             ( "NestedNameSpecifier" "nestedNameSpecifier" "NestedNameSpecifier")
                             ( "QualType" "qualType" "QualType")
                             ( "Stmt" "arraySubscriptExpr" "ArraySubscriptExpr")
                             ( "Stmt" "asmStmt" "AsmStmt")
                             ( "Stmt" "binaryOperator" "BinaryOperator")
                             ( "Stmt" "bindTemporaryExpr" "CXXBindTemporaryExpr")
                             ( "Stmt" "boolLiteral" "CXXBoolLiteralExpr")
                             ( "Stmt" "breakStmt" "BreakStmt")
                             ( "Stmt" "cStyleCastExpr" "CStyleCastExpr")
                             ( "Stmt" "callExpr" "CallExpr")
                             ("Stmt" "caseStmt" "CaseStmt")
                             ("Stmt" "castExpr" "CastExpr")
                             ("Stmt" "catchStmt" "CXXCatchStmt")
                             ("Stmt" "characterLiteral" "CharacterLiteral")
                             ( "Stmt" "compoundLiteralExpr" "CompoundLiteralExpr")
                             ( "Stmt" "compoundStmt" "CompoundStmt")
                             ( "Stmt" "conditionalOperator" "ConditionalOperator")
                             ( "Stmt" "constCastExpr" "CXXConstCastExpr")
                             ( "Stmt" "constructExpr" "CXXConstructExpr")
                             ( "Stmt" "continueStmt" "ContinueStmt")
                             ( "Stmt" "declRefExpr" "DeclRefExpr")
                             ( "Stmt" "declStmt" "DeclStmt")
                             ( "Stmt" "defaultArgExpr" "CXXDefaultArgExpr")
                             ( "Stmt" "defaultStmt" "DefaultStmt")
                             ( "Stmt" "deleteExpr" "CXXDeleteExpr")
                             ( "Stmt" "doStmt" "DoStmt")
                             ( "Stmt" "dynamicCastExpr" "CXXDynamicCastExpr")
                             ( "Stmt" "explicitCastExpr" "ExplicitCastExpr")
                             ( "Stmt" "expr" "Expr")
                             ( "Stmt" "floatLiteral" "FloatingLiteral")
                             ( "Stmt" "forRangeStmt" "CXXForRangeStmt")
                             ( "Stmt" "forStmt" "ForStmt")
                             ( "Stmt" "functionalCastExpr" "CXXFunctionalCastExpr")
                             ( "Stmt" "gotoStmt" "GotoStmt")
                             ( "Stmt" "ifStmt" "IfStmt")
                             ( "Stmt" "implicitCastExpr" "ImplicitCastExpr")
                             ( "Stmt" "initListExpr" "InitListExpr")
                             ( "Stmt" "integerLiteral" "IntegerLiteral")
                             ( "Stmt" "labelStmt" "LabelStmt")
                             ( "Stmt" "lambdaExpr" "LambdaExpr")
                             ( "Stmt" "materializeTemporaryExpr" "MaterializeTemporaryExpr")
                             ( "Stmt" "memberCallExpr" "CXXMemberCallExpr")
                             ( "Stmt" "memberExpr" "MemberExpr")
                             ( "Stmt" "newExpr" "CXXNewExpr")
                             ( "Stmt" "nullPtrLiteralExpr" "CXXNullPtrLiteralExpr")
                             ( "Stmt" "nullStmt" "NullStmt")
                             ( "Stmt" "operatorCallExpr" "CXXOperatorCallExpr")
                             ( "Stmt" "reinterpretCastExpr" "CXXReinterpretCastExpr")
                             ( "Stmt" "returnStmt" "ReturnStmt")
                             ( "Stmt" "staticCastExpr" "CXXStaticCastExpr")
                             ( "Stmt" "stmt" "Stmt")
                             ( "Stmt" "stringLiteral" "StringLiteral")
                             ( "Stmt" "switchCase" "SwitchCase")
                             ( "Stmt" "switchStmt" "SwitchStmt")
                             ( "Stmt" "temporaryObjectExpr" "CXXTemporaryObjectExpr")
                             ( "Stmt" "thisExpr" "CXXThisExpr")
                             ( "Stmt" "throwExpr" "CXXThrowExpr")
                             ( "Stmt" "tryStmt" "CXXTryStmt")
                             ( "Stmt" "unaryExprOrTypeTraitExpr" "UnaryExprOrTypeTraitExpr")
                             ( "Stmt" "unaryOperator" "UnaryOperator")
                             ( "Stmt" "unresolvedConstructExpr" "CXXUnresolvedConstructExpr")
                             ( "Stmt" "userDefinedLiteral" "UserDefinedLiteral")
                             ( "Stmt" "whileStmt" "WhileStmt")
                             ( "TypeLoc" "typeLoc" "TypeLoc")
                             ( "Type" "arrayType" "ArrayType")
                             ( "Type" "atomicType" "AtomicType")
                             ( "Type" "autoType" "AutoType")
                             ( "Type" "blockPointerType" "BlockPointerType")
                             ( "Type" "builtinType" "BuiltinType")
                             ( "Type" "complexType" "ComplexType")
                             ( "Type" "constantArrayType" "ConstantArrayType")
                             ( "Type" "dependentSizedArrayType" "DependentSizedArrayType")
                             ( "Type" "elaboratedType" "ElaboratedType")
                             ( "Type" "functionType" "FunctionType")
                             ( "Type" "incompleteArrayType" "IncompleteArrayType")
                             ( "Type" "lValueReferenceType" "LValueReferenceType")
                             ( "Type" "memberPointerType" "MemberPointerType")
                             ( "Type" "parenType" "ParenType")
                             ( "Type" "pointerType" "PointerType")
                             ( "Type" "rValueReferenceType" "RValueReferenceType")
                             ( "Type" "recordType" "RecordType")
                             ( "Type" "referenceType" "ReferenceType")
                             ( "Type" "templateSpecializationType" "TemplateSpecializationType")
                             ( "Type" "type" "Type")
                             ( "Type" "typedefType" "TypedefType")
                             ( "Type" "unaryTransformType" "UnaryTransformType")
                             ( "Type" "variableArrayType" "VariableArrayType")
                             )))



(setq *print-circle* nil)
(print (keyword-everything '(
 
                             ("*" "allOf" "*" "..." "*")
                             ("*" "anyOf" "*" "..." "*")
                             ("*" "anything" )
                             ("*" "unless" "*" #|Inner|#)
                             ("BinaryOperator" "hasOperatorName" "string-name")
                             ("CXXBoolLiteral" "equals" "valuet-value")
                             ("CXXConstructExpr" "argumentCountIs" "unsigned-n")
                             ("CXXConstructorDecl" "isImplicit" )
                             ("CXXCtorInitializer" "isWritten" )
                             ("CXXMethodDecl" "hasOverloadedOperatorName" "stringref-name")
                             ("CXXMethodDecl" "isConst" )
                             ("CXXMethodDecl" "isOverride" )
                             ("CXXMethodDecl" "isVirtual" )
                             ("CXXOperatorCallExpr" "hasOverloadedOperatorName" "stringref-name")
                             ("CXXRecordDecl" "isDerivedFrom" "stringref-basename")
                             ("CXXRecordDecl" "isExplicitTemplateSpecialization" )
                             ("CXXRecordDecl" "isSameOrDerivedFrom" "stringref-basename")
                             ("CXXRecordDecl" "isTemplateInstantiation" )
                             ("CallExpr" "argumentCountIs" "unsigned-n")
                             ("CharacterLiteral" "equals" "valuet-value")
                             ("CompoundStmt" "statementCountIs" "unsigned-n")
                             ("ConstantArrayType" "hasSize" "unsigned-n")
                             ("DeclStmt" "declCountIs" "unsigned-n")
                             ("Decl" "equalsBoundNode" "string-ID")
                             ("Decl" "equalsNode" "Decl*-Other")
                             ("Decl" "isPrivate" )
                             ("Decl" "isProtected" )
                             ("Decl" "isPublic" )
                             ("FloatingLiteral" "equals" "valuet-value")
                             ("FunctionDecl" "isDefinition" )
                             ("FunctionDecl" "isExplicitTemplateSpecialization" )
                             ("FunctionDecl" "isExternC" )
                             ("FunctionDecl" "isTemplateInstantiation" )
                             ("FunctionDecl" "parameterCountIs" "unsigned-n")
                             ("IntegerLiteral" "equals" "valuet-value")
                             ("MemberExpr" "isArrow" )
                             ("NamedDecl" "hasName" "string-name")
                             ("NamedDecl" "matchesName" "string-Regexp")
                             ("QualType" "asString" "string-name")
                             ("QualType" "equalsBoundNode" "string-ID")
                             ("QualType" "hasLocalQualifiers" )
                             ("QualType" "isConstQualified" )
                             ("QualType" "isInteger" )
                             ("Stmt" "equalsBoundNode" "string-ID")
                             ("Stmt" "equalsNode" "Stmt*-Other")
                             ("TagDecl" "isDefinition" )
                             ("Type" "equalsBoundNode" "string-ID")
                             ("UnaryExprOrTypeTraitExpr" "ofKind" "UnaryExprOrTypeTrait-Kind")
                             ("UnaryOperator" "hasOperatorName" "string-name")
                             ("VarDecl" "isDefinition" )
                             ("VarDecl" "isExplicitTemplateSpecialization" )
                             ("VarDecl" "isTemplateInstantiation" )
                             )
                           ))
