#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(LLVMContext);
class LLVMContext_O : public core::ExternalObject_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::LLVMContext,LLVMContext_O,"LLVM-CONTEXT",core::ExternalObject_O);
    typedef llvm::LLVMContext WrappedType;
    typedef llvm::LLVMContext* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

protected:
    PointerToWrappedType _ptr;
public:
    virtual void* externalObject()
    {
        return this->_ptr;
    };

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
static LLVMContext_sp get_global_context(core::Lisp_sp lisp);
;
LLVMContext_O(core::MetaClass_sp const& mc) : Base(mc), _ptr(NULL)  {};
~LLVMContext_O() {if (_ptr != NULL ) {/* delete _ptr;*/ _ptr = NULL;};}
 }; // LLVMContext_O
 }; // llvmo
TRANSLATE(llvmo::LLVMContext_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,LLVMContext_O);

void LLVMContext_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<LLVMContext_O>(_lisp,core::make_class_name_init)
;
defInPackage(LlvmoPkg,"get-global-context",&LLVMContext_O::get_global_context,_lisp);

};

	   void LLVMContext_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
LLVMContext_sp LLVMContext_O::get_global_context(core::Lisp_sp lisp) 
{_F(lisp);
    LLVMContext_sp context = RP_Create<LLVMContext_O>(lisp);
    context->_ptr = &(llvm::getGlobalContext());
    llvm::LLVMContext& lc = llvm::getGlobalContext();
    ASSERT(context->_ptr == &lc );
    return context;
}
;
}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(Module);
class Module_O : public core::ExternalObject_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::Module,Module_O,"MODULE",core::ExternalObject_O);
    typedef llvm::Module WrappedType;
    typedef llvm::Module* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

protected:
    PointerToWrappedType _ptr;
public:
    virtual void* externalObject()
    {
        return this->_ptr;
    };

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
Module_O(core::MetaClass_sp const& mc) : Base(mc), _ptr(NULL)  {};
~Module_O() {if (_ptr != NULL ) {/* delete _ptr;*/ _ptr = NULL;};}
    DECLARE_INIT();
 }; // Module_O
 }; // llvmo
TRANSLATE(llvmo::Module_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,Module_O);

void Module_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<Module_O>(_lisp,core::make_class_name_init)
        .initArgs("(self name context)")
;
};

	   void Module_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
core::T_sp Module_O::__init__(core::Executable_sp exec, core::Cons_sp args, core::Environment_sp env, core::Lisp_sp lisp)

{_OF();
ARGUMENT_SC_(name);
ARGUMENT_SC_(context);
    string name = env->lookup(_sym_name)->as<core::Str_O>()->get();
    LLVMContext_sp context = env->lookup(_sym_context)->as<LLVMContext_O>();
    llvm::LLVMContext& lc = llvm::getGlobalContext();
    ASSERT(&lc == context->wrapped());
    this->_ptr = new llvm::Module(name,*(context->wrapped()));
    return _lisp->onil();
}}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(Builder);
class Builder_O : public core::ExternalObject_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::IRBuilder<>,Builder_O,"BUILDER",core::ExternalObject_O);
    typedef llvm::IRBuilder<> WrappedType;
    typedef llvm::IRBuilder<>* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

protected:
    PointerToWrappedType _ptr;
public:
    virtual void* externalObject()
    {
        return this->_ptr;
    };

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
Builder_O(core::MetaClass_sp const& mc) : Base(mc), _ptr(NULL)  {};
~Builder_O() {if (_ptr != NULL ) {/* delete _ptr;*/ _ptr = NULL;};}
    DECLARE_INIT();
 }; // Builder_O
 }; // llvmo
TRANSLATE(llvmo::Builder_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,Builder_O);

void Builder_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<Builder_O>(_lisp,core::make_class_name_init)
        .initArgs("(self context)")
.def("CreateFAdd", &llvm::IRBuilder<>::CreateFAdd)

;
};

	   void Builder_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
core::T_sp Builder_O::__init__(core::Executable_sp exec, core::Cons_sp args, core::Environment_sp env, core::Lisp_sp lisp)

{_OF();
ARGUMENT_SC_(context);
    LLVMContext_sp context = env->lookup(_sym_context)->as<LLVMContext_O>();
    llvm::LLVMContext& lc = llvm::getGlobalContext();
    ASSERT(&lc == context->wrapped());
    this->_ptr = new llvm::IRBuilder<>(*(context->wrapped()));
    return _lisp->onil();
}
}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(APFloat);
class APFloat_O : public core::ExternalObject_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::APFloat,APFloat_O,"APFLOAT",core::ExternalObject_O);
    typedef llvm::APFloat WrappedType;
    typedef llvm::APFloat* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

protected:
    PointerToWrappedType _ptr;
public:
    virtual void* externalObject()
    {
        return this->_ptr;
    };

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
APFloat_O(core::MetaClass_sp const& mc) : Base(mc), _ptr(NULL)  {};
~APFloat_O() {if (_ptr != NULL ) {/* delete _ptr;*/ _ptr = NULL;};}
    DECLARE_INIT();
 }; // APFloat_O
 }; // llvmo
TRANSLATE(llvmo::APFloat_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,APFloat_O);

void APFloat_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<APFloat_O>(_lisp,core::make_class_name_init)
        .initArgs("(self value)")
;
};

	   void APFloat_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
core::T_sp APFloat_O::__init__(core::Executable_sp exec, core::Cons_sp args, core::Environment_sp env, core::Lisp_sp lisp)

{_OF();
    ARGUMENT_SC_(value);
    double value = env->lookup(_sym_value)->as<core::Double_float_O>()->get();
    this->_ptr = new llvm::APFloat(value);
    return _lisp->onil();    
}}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(Value);
class Value_O : public core::ExternalObject_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::Value,Value_O,"VALUE",core::ExternalObject_O);
    typedef llvm::Value WrappedType;
    typedef llvm::Value* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

protected:
    PointerToWrappedType _ptr;
public:
    virtual void* externalObject()
    {
        return this->_ptr;
    };

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
static Value_sp create(llvm::Value* ptr, core::Lisp_sp lisp);
;
Value_O(core::MetaClass_sp const& mc) : Base(mc), _ptr(NULL)  {};
~Value_O() {if (_ptr != NULL ) {/* delete _ptr;*/ _ptr = NULL;};}
 }; // Value_O
 }; // llvmo
TRANSLATE(llvmo::Value_O);
/* from_object translators */

template <>
struct from_object<llvm::Value*>
{
    typedef llvm::Value* ExpectedType;
    typedef llvm::Value* DeclareType;
    static DeclareType convert(core::T_sp object)
    
{
    llvmo::Value_sp ov = object->as<llvmo::Value_O>();
    return ov->wrapped();
}
};
;
/* to_object translators */

template <>
struct to_object<llvm::Value*>
{
    static core::T_sp convert(core::Lisp_sp lisp, llvm::Value* ptr)
    
{_F(lisp);
    llvmo::Value_sp val = llvmo::Value_O::create(ptr,_lisp);
    return val;
}

};
;

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,Value_O);

void Value_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<Value_O>(_lisp,core::make_class_name_init)
;
};

	   void Value_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
Value_sp Value_O::create(llvm::Value* ptr, core::Lisp_sp lisp) 
{_F(lisp);
    Value_sp val = RP_Create<Value_O>(_lisp);
    val->set_wrapped(ptr);
    return val;
}
;
}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(User);
class User_O : public Value_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::User,User_O,"USER",Value_O);
    typedef llvm::User WrappedType;
    typedef llvm::User* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
User_O(core::MetaClass_sp const& mc) : Base(mc) {};
~User_O() {}
 }; // User_O
 }; // llvmo
TRANSLATE(llvmo::User_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,User_O);

void User_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<User_O>(_lisp,core::make_class_name_init)
;
};

	   void User_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(Constant);
class Constant_O : public User_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::Constant,Constant_O,"CONSTANT",User_O);
    typedef llvm::Constant WrappedType;
    typedef llvm::Constant* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
Constant_O(core::MetaClass_sp const& mc) : Base(mc) {};
~Constant_O() {}
 }; // Constant_O
 }; // llvmo
TRANSLATE(llvmo::Constant_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,Constant_O);

void Constant_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<Constant_O>(_lisp,core::make_class_name_init)
;
};

	   void Constant_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
}

#endif // CODE_STUFF
#ifdef HEADER_STUFF

namespace llvmo
{
FORWARD(ConstantFP);
class ConstantFP_O : public Constant_O
{
    LISP_EXTERNAL_CLASS(LlvmoPkg,llvm::ConstantFP,ConstantFP_O,"CONSTANTFP",Constant_O);
    typedef llvm::ConstantFP WrappedType;
    typedef llvm::ConstantFP* PointerToWrappedType;
    typedef PointerToWrappedType ExternalType;

public:
    PointerToWrappedType wrapped() { return dynamic_cast<PointerToWrappedType>(this->_ptr);};
    void set_wrapped(PointerToWrappedType ptr)
    {
/*        if (this->_ptr != NULL ) delete this->_ptr; */
        this->_ptr = ptr;
    }
static ConstantFP_sp get(LLVMContext_sp context, APFloat_sp apfloat, core::Lisp_sp lisp);
;
ConstantFP_O(core::MetaClass_sp const& mc) : Base(mc) {};
~ConstantFP_O() {}
 }; // ConstantFP_O
 }; // llvmo
TRANSLATE(llvmo::ConstantFP_O);
/* from_object translators */
/* to_object translators */

#endif // HEADER_STUFF
#ifdef EXPOSE_STUFF

namespace llvmo
{
EXPOSE_CLASS(llvmo,ConstantFP_O);

void ConstantFP_O::exposeCando(core::Lisp_sp lisp)
{_F(lisp);
    core::externalClass_<ConstantFP_O>(_lisp,core::make_class_name_init)
;
defInPackage(LlvmoPkg,"constantfp-get",&ConstantFP_O::get,_lisp);

};

	   void ConstantFP_O::exposePython(core::Lisp_sp lisp)
	   {_F(lisp);
	       IMPLEMENT_ME();
           };
}; // llvmo
#endif // EXPOSE_STUFF
#ifdef CODE_STUFF
namespace llvmo
{
ConstantFP_sp ConstantFP_O::get(LLVMContext_sp context, APFloat_sp apfloat, core::Lisp_sp lisp) 
{_F(lisp);
    ConstantFP_sp cfp = RP_Create<ConstantFP_O>(_lisp);
    cfp->set_wrapped(llvm::ConstantFP::get(*context->wrapped(),*apfloat->wrapped()));
    return cfp;
}

;
}

#endif // CODE_STUFF
#undef HEADER_STUFF
#undef EXPOSE_STUFF
#undef CODE_STUFF
