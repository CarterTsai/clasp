; ModuleID = '/Users/meister/Development/cando/src/tests/core/dwarf0.lsp'

@":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp" = private unnamed_addr constant [59 x i8] c"/Users/meister/Development/cando/src/tests/core/dwarf0.lsp\00"
@":::global-str-nil" = private unnamed_addr constant [4 x i8] c"nil\00"
@load-time-value-vector = private global { i32*, {}* }* null
@":::global-str-COMPILER::FORM" = private unnamed_addr constant [15 x i8] c"COMPILER::FORM\00"
@":::global-str-repl" = private unnamed_addr constant [5 x i8] c"repl\00"
@":::global-str-( *FSET ( QUOTE FOO ) ( FUNCTION ( LAMBDA-BLOCK FOO ( X ) ( DECLARE ( C-GLOBAL )" = private unnamed_addr constant [81 x i8] c"( *FSET ( QUOTE FOO ) ( FUNCTION ( LAMBDA-BLOCK FOO ( X ) ( DECLARE ( C-GLOBAL )\00"
@":::symbol-name-FOO" = private unnamed_addr constant [4 x i8] c"FOO\00"
@":::package-name-CORE" = private unnamed_addr constant [5 x i8] c"CORE\00"
@":::global-str-COMPILER::CODE" = private unnamed_addr constant [15 x i8] c"COMPILER::CODE\00"
@":::global-str-FOO" = private unnamed_addr constant [4 x i8] c"FOO\00"
@":::global-str-( BLOCK FOO ( ( LET ( ( Y ( + X 10 ) ) ) ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( P" = private unnamed_addr constant [81 x i8] c"( BLOCK FOO ( ( LET ( ( Y ( + X 10 ) ) ) ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( P\00"
@":::global-str-( ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( PRINT ( + 3 43 ) ) ( PRINT \22two\22 ) ( PRI" = private unnamed_addr constant [81 x i8] c"( ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( PRINT ( + 3 43 ) ) ( PRINT \22two\22 ) ( PRI\00"
@":::symbol-name-T" = private unnamed_addr constant [2 x i8] c"T\00"
@constant-array = private constant [1 x i32] [i32 1]
@":::symbol-name-Y" = private unnamed_addr constant [2 x i8] c"Y\00"
@constant-array1 = private constant [1 x i32] [i32 5]
@":::global-str-( + X 10 )" = private unnamed_addr constant [11 x i8] c"( + X 10 )\00"
@":::symbol-name-+" = private unnamed_addr constant [2 x i8] c"+\00"
@_ZTIN4core10ReturnFromE = external constant i8
@":::global-str-( PRINT ( + 3 4 ) )" = private unnamed_addr constant [20 x i8] c"( PRINT ( + 3 4 ) )\00"
@":::global-str-( + 3 4 )" = private unnamed_addr constant [10 x i8] c"( + 3 4 )\00"
@":::symbol-name-PRINT" = private unnamed_addr constant [6 x i8] c"PRINT\00"
@":::global-str-( DEBUG \22xxx\22 )" = private unnamed_addr constant [16 x i8] c"( DEBUG \22xxx\22 )\00"
@":::str" = private unnamed_addr constant [4 x i8] c"xxx\00"
@":::symbol-name-DEBUG" = private unnamed_addr constant [6 x i8] c"DEBUG\00"
@":::global-str-( PRINT ( + 3 43 ) )" = private unnamed_addr constant [21 x i8] c"( PRINT ( + 3 43 ) )\00"
@":::global-str-( + 3 43 )" = private unnamed_addr constant [11 x i8] c"( + 3 43 )\00"
@":::global-str-( PRINT \22two\22 )" = private unnamed_addr constant [16 x i8] c"( PRINT \22two\22 )\00"
@":::str2" = private unnamed_addr constant [4 x i8] c"two\00"

declare void @newTsp({ i32*, {}* }*) nounwind

declare void @resetTsp({ i32*, {}* }*) nounwind

declare void @makeUnboundTsp({ i32*, {}* }*) nounwind

declare void @sp_copyTsp({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @mv_copyTsp({ i32*, {}*, i32 }*, { i32*, {}* }*) nounwind

declare void @destructTsp({ i32*, {}* }*) nounwind

declare i32 @compareTsp({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @newTmv({ i32*, {}*, i32 }*) nounwind

declare void @resetTmv({ i32*, {}*, i32 }*) nounwind

declare void @copyTmv({ i32*, {}*, i32 }*, { i32*, {}*, i32 }*) nounwind

declare void @destructTmv({ i32*, {}*, i32 }*) nounwind

declare void @newAFsp({ i32*, {}* }*) nounwind

declare void @newAFsp_ValueFrameOfSize({ i32*, {}* }*, i32) nounwind

declare void @resetAFsp({ i32*, {}* }*) nounwind

declare void @copyAFsp({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @destructAFsp({ i32*, {}* }*) nounwind

declare void @sp_copyTmvOrSlice({ i32*, {}* }*, { i32*, {}*, i32 }*) nounwind

declare void @mv_copyTmvOrSlice({ i32*, {}*, i32 }*, { i32*, {}*, i32 }*) nounwind

declare i32 @isNilTsp({ i32*, {}* }*) nounwind

declare i32 @isTrueTsp({ i32*, {}* }*) nounwind

declare i32 @isBoundTsp({ i32*, {}* }*) nounwind

declare void @internSymbol_tsp({ i32*, {}* }*, i8*, i8*) nounwind

declare void @makeSymbol_tsp({ i32*, {}* }*, i8*) nounwind

declare void @internSymbol_symsp({ i32*, i32* }*, i8*, i8*) nounwind

declare void @makeSymbol_symsp({ i32*, i32* }*, i8*) nounwind

declare void @sp_makeNil({ i32*, {}* }*) nounwind

declare void @mv_makeNil({ i32*, {}*, i32 }*) nounwind

declare void @makeT({ i32*, {}* }*) nounwind

declare void @makeCons({ i32*, {}* }*, { i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @makeFixnum({ i32*, {}* }*, i32) nounwind

declare void @makeCharacter({ i32*, {}* }*, i32) nounwind

declare void @makeBignum({ i32*, {}* }*, i8*) nounwind

declare void @makeShortFloat({ i32*, {}* }*, double) nounwind

declare void @makeSingleFloat({ i32*, {}* }*, double) nounwind

declare void @makeDoubleFloat({ i32*, {}* }*, double) nounwind

declare void @makeLongFloat({ i32*, {}* }*, double) nounwind

declare void @makeString({ i32*, {}* }*, i8*) nounwind

declare void @sp_makeCompiledFunction({ i32*, {}* }*, void ({ i32*, {}*, i32 }*, { i32*, {}* }*)*, { i32*, {}* }*, { i32*, {}* }*)

declare void @mv_makeCompiledFunction({ i32*, {}*, i32 }*, void ({ i32*, {}*, i32 }*, { i32*, {}* }*)*, { i32*, {}* }*, { i32*, {}* }*)

declare void @fillRestTarget({ i32*, {}* }*, { i32*, {}* }*, i32, i8*)

declare void @sp_symbolValueRead({ i32*, {}* }*, { i32*, i32* }*) nounwind

declare void @mv_symbolValueRead({ i32*, {}*, i32 }*, { i32*, i32* }*) nounwind

declare void @sp_symbolValueReadOrUnbound({ i32*, {}* }*, { i32*, i32* }*) nounwind

declare void @mv_symbolValueReadOrUnbound({ i32*, {}*, i32 }*, { i32*, i32* }*) nounwind

declare { i32*, {}* }* @symbolValueReference({ i32*, i32* }*) nounwind

declare { i32*, {}* }* @lexicalValueReference(i32, i32, { i32*, {}* }*) nounwind

declare void @sp_lexicalValueRead({ i32*, {}* }*, i32, i32, { i32*, {}* }*) nounwind

declare void @mv_lexicalValueRead({ i32*, {}*, i32 }*, i32, i32, { i32*, {}* }*) nounwind

declare void @sp_symbolFunctionRead({ i32*, {}* }*, { i32*, i32* }*) nounwind

declare void @mv_symbolFunctionRead({ i32*, {}*, i32 }*, { i32*, i32* }*) nounwind

declare void @setfSymbolFunctionRead({ i32*, {}* }*, { i32*, i32* }*) nounwind

declare void @sp_lexicalFunctionRead({ i32*, {}* }*, i32, i32, { i32*, {}* }*) nounwind

declare void @mv_lexicalFunctionRead({ i32*, {}*, i32 }*, i32, i32, { i32*, {}* }*) nounwind

declare void @makeValueFrame({ i32*, {}* }*, i32) nounwind

declare void @makeValueFrameFromReversedCons({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @setParentOfActivationFrame({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @attachDebuggingInfoToValueFrame({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare { i32*, {}* }* @valueFrameReference({ i32*, {}* }*, i32) nounwind

declare void @makeFunctionFrame({ i32*, {}* }*, i32, { i32*, {}* }*)

declare { i32*, {}* }* @functionFrameReference({ i32*, {}* }*, i32)

declare void @sp_prependMultipleValues({ i32*, {}* }*, { i32*, {}*, i32 }*)

declare void @mv_prependMultipleValues({ i32*, {}*, i32 }*, { i32*, {}*, i32 }*)

declare void @invokePossibleMultipleValueFunction({ i32*, {}*, i32 }*, { i32*, {}* }*, { i32*, {}* }*)

declare void @sp_invokePossibleMultipleValueSymbolFunction({ i32*, {}* }*, { i32*, i32* }*, { i32*, {}* }*)

declare void @mv_invokePossibleMultipleValueSymbolFunction({ i32*, {}*, i32 }*, { i32*, i32* }*, { i32*, {}* }*)

declare void @sp_invokePossibleMultipleValueLexicalFunction({ i32*, {}* }*, i32, i32, { i32*, {}* }*)

declare void @mv_invokePossibleMultipleValueLexicalFunction({ i32*, {}*, i32 }*, i32, i32, { i32*, {}* }*)

declare void @invokeLlvmFunction({ i32*, {}*, i32 }*, void ({ i32*, {}*, i32 }*, { i32*, {}* }*)*, { i32*, {}* }*)

declare { i32*, {}* }* @activationFrameNil() nounwind

declare i32 @activationFrameSize({ i32*, {}* }*) nounwind

declare { i32*, {}* }* @activationFrameParentRef({ i32*, {}* }*) nounwind

declare void @throwTooManyArgumentsException(i8*, { i32*, {}* }*, i32, i32)

declare void @throwNotEnoughArgumentsException(i8*, { i32*, {}* }*, i32, i32)

declare void @throwIfExcessKeywordArguments(i8*, { i32*, {}* }*, i32)

declare i32 @kw_allowOtherKeywords(i32, { i32*, {}* }*, i32) nounwind

declare i32 @kw_trackFirstUnexpectedKeyword(i32, i32) nounwind

declare void @kw_throwIfBadKeywordArgument(i32, i32, { i32*, {}* }*)

declare void @kw_throwIfNotKeyword({ i32*, {}* }*)

declare void @gdb() nounwind

declare void @debugInvoke() nounwind

declare void @debugInspectActivationFrame({ i32*, {}* }*) nounwind

declare void @debugInspectObject_sp({ i32*, {}* }*) nounwind

declare void @debugInspectObject_mv({ i32*, {}*, i32 }*) nounwind

declare void @debugPointer(i8*) nounwind

declare void @debugPrintObject(i8*, { i32*, {}* }*) nounwind

declare void @debugPrintI32(i32) nounwind

declare void @lowLevelTrace(i32) nounwind

declare void @singleStepCallback() nounwind

declare i32 @trace_enterFunctionScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterBlockScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterLetScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterLetSTARScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterFletScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterLabelsScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterCallScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterCatchScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare i32 @trace_enterUnwindProtectScope(i8*, i32, i32, { i32*, {}* }*, i8*) nounwind

declare void @trace_setActivationFrameForLexicalScope(i32, { i32*, {}* }*) nounwind

declare void @trace_exitFunctionScope(i32) nounwind

declare void @trace_exitBlockScope(i32) nounwind

declare void @trace_exitLetScope(i32) nounwind

declare void @trace_exitLetSTARScope(i32) nounwind

declare void @trace_exitFletScope(i32) nounwind

declare void @trace_exitLabelsScope(i32) nounwind

declare void @trace_exitCallScope(i32) nounwind

declare void @trace_exitCatchScope(i32) nounwind

declare void @trace_exitUnwindProtectScope(i32) nounwind

declare void @throwCatchThrow({ i32*, {}* }*, { i32*, {}*, i32 }*) noreturn

declare void @throwReturnFrom(i32, { i32*, {}*, i32 }*) noreturn

declare void @catchStoreTag({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @sp_catchIfTagMatchesStoreResultElseRethrow({ i32*, {}* }*, { i32*, {}* }*, i8*)

declare void @mv_catchIfTagMatchesStoreResultElseRethrow({ i32*, {}*, i32 }*, { i32*, {}* }*, i8*)

declare void @catchUnwind({ i32*, {}* }*) nounwind

declare void @sp_blockHandleReturnFrom({ i32*, {}* }*, i8*)

declare void @mv_blockHandleReturnFrom({ i32*, {}*, i32 }*, i8*)

declare void @throw_Go(i32, i32) noreturn

declare i32 @tagbodyGoIndexElseRethrow(i8*)

declare void @throwIllegalSwitchValue(i32, i32) noreturn

declare void @cando_terminate(i8*, i32, i32, i8*) nounwind

declare i32 @__gxx_personality_v0(...) nounwind

declare i8* @__cxa_begin_catch(i8*) nounwind

declare void @__cxa_end_catch()

declare void @__cxa_rethrow()

declare i32 @llvm.eh.typeid.for(i8*) nounwind readnone

declare void @_Unwind_Resume(i8*) nounwind

declare void @getLoadTimeValueArray({ i32*, {}* }**, i8*, i32, i32) nounwind

declare void @sp_copyLoadTimeValue({ i32*, {}* }*, { i32*, {}* }**, i32) nounwind

declare void @mv_copyLoadTimeValue({ i32*, {}*, i32 }*, { i32*, {}* }**, i32) nounwind

declare { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }**, i32) nounwind

declare { i32*, i32* }* @loadTimeSymbolPushAndGetReference({ i32*, {}* }**, i32) nounwind

declare { i32*, {}* }* @loadTimeValueReference({ i32*, {}* }**, i32) nounwind

declare { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }**, i32) nounwind

declare void @sp_getLoadTimeValue({ i32*, {}* }*, { i32*, {}* }**, i32) nounwind

declare void @mv_getLoadTimeValue({ i32*, {}*, i32 }*, { i32*, {}* }**, i32) nounwind

declare void @ltv_makeCons({ i32*, {}* }*) nounwind

declare void @ltv_makeSourceCodeCons({ i32*, {}* }*, i8*, i32, i32) nounwind

declare void @ltv_makeArrayObjects({ i32*, {}* }*, { i32*, {}* }*, i32, i32*) nounwind

declare void @ltv_makeHashTable({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @rplaca({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @rplacd({ i32*, {}* }*, { i32*, {}* }*) nounwind

declare void @ltv_initializeArrayObjectsRowMajorArefOrder({ i32*, {}* }*, { i32*, {}* }**, i32*) nounwind

declare void @ltv_initializeHashTable({ i32*, {}* }*, i32, { i32*, {}* }**, i32*) nounwind

declare void @saveValues({ i32*, {}* }*, { i32*, {}*, i32 }*) nounwind

declare void @loadValues({ i32*, {}*, i32 }*, { i32*, {}* }*) nounwind

define private void @___loadTimeDataInitializer({ i32*, {}*, i32 }* %result-ptr, { i32*, {}* }* %activation-frame-ptr) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %array-element-type = alloca { i32*, {}* }
  %":::alloca-end" = alloca i32, i32 0
  store i32 0, i32* %ehselector.slot
  call void @newTsp({ i32*, {}* }* %array-element-type)
  %":::new-end" = alloca i32, i32 0
  %":::setup-end" = alloca i32, i32 0
  %trace-FN = call i32 @trace_enterFunctionScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 0, i32 0, { i32*, {}* }* %activation-frame-ptr, i8* getelementptr inbounds ([4 x i8]* @":::global-str-nil", i32 0, i32 0))
  %0 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 0)
  call void @sp_makeNil({ i32*, {}* }* %0)
  %1 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 1)
  call void @makeT({ i32*, {}* }* %1)
  %2 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 2)
  call void @internSymbol_tsp({ i32*, {}* }* %2, i8* getelementptr inbounds ([4 x i8]* @":::symbol-name-FOO", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %3 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 3)
  call void @internSymbol_tsp({ i32*, {}* }* %3, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-T", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %array-element-type, { i32*, {}* }** @load-time-value-vector, i32 3)
  %4 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 4)
  call void @ltv_makeArrayObjects({ i32*, {}* }* %4, { i32*, {}* }* %array-element-type, i32 1, i32* getelementptr inbounds ([1 x i32]* @constant-array, i32 0, i32 0))
  %5 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 5)
  call void @internSymbol_tsp({ i32*, {}* }* %5, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-Y", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0))
  %6 = call { i32*, {}* }* @loadTimeValueReference({ i32*, {}* }** @load-time-value-vector, i32 4)
  call void @ltv_initializeArrayObjectsRowMajorArefOrder({ i32*, {}* }* %6, { i32*, {}* }** @load-time-value-vector, i32* getelementptr inbounds ([1 x i32]* @constant-array1, i32 0, i32 0))
  %7 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 6), !dbg !5
  call void @makeFixnum({ i32*, {}* }* %7, i32 10), !dbg !5
  %8 = call { i32*, i32* }* @loadTimeSymbolPushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 0), !dbg !5
  call void @internSymbol_symsp({ i32*, i32* }* %8, i8* getelementptr inbounds ([2 x i8]* @":::symbol-name-+", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0)), !dbg !5
  %9 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 7), !dbg !5
  call void @makeFixnum({ i32*, {}* }* %9, i32 3), !dbg !5
  %10 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 8), !dbg !5
  call void @makeFixnum({ i32*, {}* }* %10, i32 4), !dbg !5
  %11 = call { i32*, i32* }* @loadTimeSymbolPushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 1), !dbg !5
  call void @internSymbol_symsp({ i32*, i32* }* %11, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-PRINT", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0)), !dbg !5
  %12 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 9), !dbg !5
  call void @makeString({ i32*, {}* }* %12, i8* getelementptr inbounds ([4 x i8]* @":::str", i32 0, i32 0)), !dbg !5
  %13 = call { i32*, i32* }* @loadTimeSymbolPushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 2), !dbg !5
  call void @internSymbol_symsp({ i32*, i32* }* %13, i8* getelementptr inbounds ([6 x i8]* @":::symbol-name-DEBUG", i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @":::package-name-CORE", i32 0, i32 0)), !dbg !5
  %14 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 10), !dbg !5
  call void @makeFixnum({ i32*, {}* }* %14, i32 43), !dbg !5
  %15 = call { i32*, {}* }* @loadTimeValuePushAndGetReference({ i32*, {}* }** @load-time-value-vector, i32 11), !dbg !5
  call void @makeString({ i32*, {}* }* %15, i8* getelementptr inbounds ([4 x i8]* @":::str2", i32 0, i32 0)), !dbg !5
}

define private void @repl({ i32*, {}*, i32 }* %result-ptr, { i32*, {}* }* %activation-frame-ptr) {
entry:
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %call-args = alloca { i32*, {}* }
  %":::alloca-end" = alloca i32, i32 0
  store i32 0, i32* %ehselector.slot
  call void @newAFsp({ i32*, {}* }* %call-args)
  %":::new-end" = alloca i32, i32 0
  %":::setup-end" = alloca i32, i32 0
  %trace-FN = call i32 @trace_enterFunctionScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 1, i32 1, { i32*, {}* }* %activation-frame-ptr, i8* getelementptr inbounds ([15 x i8]* @":::global-str-COMPILER::FORM", i32 0, i32 0))
  br label %"(TRY-6265621).top"

"(TRY-6265621).top":                              ; preds = %entry
  %trace-Call = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 2, i32 4, { i32*, {}* }* %call-args, i8* getelementptr inbounds ([81 x i8]* @":::global-str-( *FSET ( QUOTE FOO ) ( FUNCTION ( LAMBDA-BLOCK FOO ( X ) ( DECLARE ( C-GLOBAL )", i32 0, i32 0))
  call void @makeValueFrame({ i32*, {}* }* %call-args, i32 3)
  %0 = call { i32*, {}* }* @activationFrameNil()
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args, { i32*, {}* }* %0)
  %call-args-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args, i32 0)
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args-ref-0, { i32*, {}* }** @load-time-value-vector, i32 2)
  %call-args-ref-1 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args, i32 1)
}

define private void @FOO({ i32*, {}*, i32 }* %result-ptr, { i32*, {}* }* %activation-frame-ptr) {
"(TRY-6265621).entry":
  %exn.slot = alloca i8*, !dbg !5
  %ehselector.slot = alloca i32, !dbg !5
  %lambda-args-1- = alloca { i32*, {}* }, !dbg !5
  %LET = alloca { i32*, {}* }, !dbg !5
  %call-args = alloca { i32*, {}* }, !dbg !5
  %call-args4 = alloca { i32*, {}* }, !dbg !5
  %call-args6 = alloca { i32*, {}* }, !dbg !5
  %call-args9 = alloca { i32*, {}* }, !dbg !5
  %call-args11 = alloca { i32*, {}* }, !dbg !5
  %call-args13 = alloca { i32*, {}* }, !dbg !5
  %call-args17 = alloca { i32*, {}* }, !dbg !5
  %":::alloca-end" = alloca i32, i32 0, !dbg !5
  store i32 0, i32* %ehselector.slot, !dbg !5
  call void @newAFsp({ i32*, {}* }* %lambda-args-1-), !dbg !5
  call void @newAFsp({ i32*, {}* }* %LET), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args4), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args6), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args9), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args11), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args13), !dbg !5
  call void @newAFsp({ i32*, {}* }* %call-args17), !dbg !5
  %":::new-end" = alloca i32, i32 0, !dbg !5
  %":::setup-end" = alloca i32, i32 0, !dbg !5
  %trace-FN = call i32 @trace_enterFunctionScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 2, i32 4, { i32*, {}* }* %activation-frame-ptr, i8* getelementptr inbounds ([15 x i8]* @":::global-str-COMPILER::CODE", i32 0, i32 0)), !dbg !5
  %given-num-args = call i32 @activationFrameSize({ i32*, {}* }* %activation-frame-ptr), !dbg !5
  %correct-num-args = icmp ne i32 %given-num-args, 1, !dbg !5
  br i1 %correct-num-args, label %"(TRY-6265621).error", label %"(TRY-6265621).continue3", !dbg !5

"(TRY-6265621).error":                            ; preds = %"(TRY-6265621).entry"
  %enough-args = icmp slt i32 %given-num-args, 1, !dbg !5
  br i1 %enough-args, label %"(TRY-6265621).error1", label %"(TRY-6265621).continue", !dbg !5

"(TRY-6265621).error1":                           ; preds = %"(TRY-6265621).error"
  invoke void @throwNotEnoughArgumentsException(i8* getelementptr inbounds ([4 x i8]* @":::global-str-FOO", i32 0, i32 0), { i32*, {}* }* %activation-frame-ptr, i32 %given-num-args, i32 1)
          to label %"(TRY-6265621).normal-dest" unwind label %"(TRY-6265621).func-cleanup-landing-pad", !dbg !5

"(TRY-6265621).normal-dest":                      ; preds = %"(TRY-6265621).error1"
  unreachable, !dbg !5

"(TRY-6265621).continue":                         ; preds = %"(TRY-6265621).error"
  invoke void @throwTooManyArgumentsException(i8* getelementptr inbounds ([4 x i8]* @":::global-str-FOO", i32 0, i32 0), { i32*, {}* }* %activation-frame-ptr, i32 %given-num-args, i32 1)
          to label %"(TRY-6265621).normal-dest2" unwind label %"(TRY-6265621).func-cleanup-landing-pad", !dbg !5

"(TRY-6265621).normal-dest2":                     ; preds = %"(TRY-6265621).continue"
  unreachable, !dbg !5

"(TRY-6265621).continue3":                        ; preds = %"(TRY-6265621).entry"
  call void @copyAFsp({ i32*, {}* }* %lambda-args-1-, { i32*, {}* }* %activation-frame-ptr), !dbg !5
  br label %"(TRY-6593232).top", !dbg !5

"(TRY-6593232).top":                              ; preds = %"(TRY-6265621).continue3"
  br label %"(TRY-6593232).block-FOO-start", !dbg !5

"(TRY-6593232).block-FOO-start":                  ; preds = %"(TRY-6593232).top"
  br label %"(TRY-6656962).top", !dbg !5

"(TRY-6656962).top":                              ; preds = %"(TRY-6593232).block-FOO-start"
  %trace-Block = call i32 @trace_enterBlockScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 2, i32 4, { i32*, {}* }* %lambda-args-1-, i8* getelementptr inbounds ([81 x i8]* @":::global-str-( BLOCK FOO ( ( LET ( ( Y ( + X 10 ) ) ) ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( P", i32 0, i32 0)), !dbg !5
  br label %"(TRY-6773038).top", !dbg !5

"(TRY-6773038).top":                              ; preds = %"(TRY-6656962).top"
  br label %"(TRY-6773038).LET-start", !dbg !5

"(TRY-6773038).LET-start":                        ; preds = %"(TRY-6773038).top"
  %trace-Let = call i32 @trace_enterLetScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 2, i32 4, { i32*, {}* }* %LET, i8* getelementptr inbounds ([81 x i8]* @":::global-str-( ( PRINT ( + 3 4 ) ) ( DEBUG \22xxx\22 ) ( PRINT ( + 3 43 ) ) ( PRINT \22two\22 ) ( PRI", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %LET, i32 1), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %LET, { i32*, {}* }* %lambda-args-1-), !dbg !5
  %0 = call { i32*, {}* }* @loadTimeValueReference({ i32*, {}* }** @load-time-value-vector, i32 4)
  call void @attachDebuggingInfoToValueFrame({ i32*, {}* }* %LET, { i32*, {}* }* %0)
  %1 = call { i32*, {}* }* @lexicalValueReference(i32 0, i32 0, { i32*, {}* }* %LET)
  br label %"(TRY-7164122).top", !dbg !5

"(TRY-7164122).top":                              ; preds = %"(TRY-6773038).LET-start"
  %trace-Call = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 2, i32 13, { i32*, {}* }* %call-args, i8* getelementptr inbounds ([11 x i8]* @":::global-str-( + X 10 )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args, i32 2), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args, { i32*, {}* }* %lambda-args-1-), !dbg !5
  %call-args-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args, i32 0), !dbg !5
  call void @sp_lexicalValueRead({ i32*, {}* }* %call-args-ref-0, i32 0, i32 0, { i32*, {}* }* %lambda-args-1-), !dbg !5
  %call-args-ref-1 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args, i32 1), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args-ref-1, { i32*, {}* }** @load-time-value-vector, i32 6), !dbg !5
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call, { i32*, {}* }* %call-args), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->+" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 0), !dbg !5
  invoke void @sp_invokePossibleMultipleValueSymbolFunction({ i32*, {}* }* %1, { i32*, i32* }* %"SYMBOL->+", { i32*, {}* }* %call-args)
          to label %"(TRY-7164122).normal-dest" unwind label %"(TRY-7164122).landing-pad", !dbg !5

"(TRY-7164122).normal-dest":                      ; preds = %"(TRY-7164122).top"
  br label %"(TRY-7164122).normal-cleanup", !dbg !5

"(TRY-7164122).normal-cleanup":                   ; preds = %"(TRY-7164122).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call), !dbg !5
  br label %"(TRY-7164122).try-cont", !dbg !5

"(TRY-7164122).landing-pad":                      ; preds = %"(TRY-7164122).top"
  %2 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %3 = extractvalue { i8*, i32 } %2, 0, !dbg !5
  store i8* %3, i8** %exn.slot, !dbg !5
  %4 = extractvalue { i8*, i32 } %2, 1, !dbg !5
  store i32 %4, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-7164122).dispatch-header", !dbg !5

"(TRY-7164122).dispatch-header":                  ; preds = %"(TRY-7164122).landing-pad"
  call void @trace_exitCallScope(i32 %trace-Call), !dbg !5
  br label %"(TRY-6773038).dispatch-header", !dbg !5

"(TRY-7164122).try-cont":                         ; preds = %"(TRY-7164122).normal-cleanup"
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Let, { i32*, {}* }* %LET), !dbg !5
  call void @singleStepCallback(), !dbg !5
  br label %"(TRY-7436174).top", !dbg !5

"(TRY-7436174).top":                              ; preds = %"(TRY-7164122).try-cont"
  %trace-Call5 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 3, i32 6, { i32*, {}* }* %call-args4, i8* getelementptr inbounds ([20 x i8]* @":::global-str-( PRINT ( + 3 4 ) )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args4, i32 1), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args4, { i32*, {}* }* %LET), !dbg !5
  %call-args4-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args4, i32 0), !dbg !5
  br label %"(TRY-7569653).top", !dbg !5

"(TRY-7569653).top":                              ; preds = %"(TRY-7436174).top"
  %trace-Call7 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 3, i32 13, { i32*, {}* }* %call-args6, i8* getelementptr inbounds ([10 x i8]* @":::global-str-( + 3 4 )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args6, i32 2), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args6, { i32*, {}* }* %LET), !dbg !5
  %call-args6-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args6, i32 0), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args6-ref-0, { i32*, {}* }** @load-time-value-vector, i32 7), !dbg !5
  %call-args6-ref-1 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args6, i32 1), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args6-ref-1, { i32*, {}* }** @load-time-value-vector, i32 8), !dbg !5
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call7, { i32*, {}* }* %call-args6), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->+8" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 0), !dbg !5
  invoke void @sp_invokePossibleMultipleValueSymbolFunction({ i32*, {}* }* %call-args4-ref-0, { i32*, i32* }* %"SYMBOL->+8", { i32*, {}* }* %call-args6)
          to label %"(TRY-7569653).normal-dest" unwind label %"(TRY-7569653).landing-pad", !dbg !5

"(TRY-7569653).normal-dest":                      ; preds = %"(TRY-7569653).top"
  br label %"(TRY-7569653).normal-cleanup", !dbg !5

"(TRY-7569653).normal-cleanup":                   ; preds = %"(TRY-7569653).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call7), !dbg !5
  br label %"(TRY-7569653).try-cont", !dbg !5

"(TRY-7569653).landing-pad":                      ; preds = %"(TRY-7569653).top"
  %5 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %6 = extractvalue { i8*, i32 } %5, 0, !dbg !5
  store i8* %6, i8** %exn.slot, !dbg !5
  %7 = extractvalue { i8*, i32 } %5, 1, !dbg !5
  store i32 %7, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-7569653).dispatch-header", !dbg !5

"(TRY-7569653).dispatch-header":                  ; preds = %"(TRY-7569653).landing-pad"
  call void @trace_exitCallScope(i32 %trace-Call7), !dbg !5
  br label %"(TRY-7436174).dispatch-header", !dbg !5

"(TRY-7569653).try-cont":                         ; preds = %"(TRY-7569653).normal-cleanup"
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call5, { i32*, {}* }* %call-args4), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->PRINT" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 1), !dbg !5
  invoke void @mv_invokePossibleMultipleValueSymbolFunction({ i32*, {}*, i32 }* %result-ptr, { i32*, i32* }* %"SYMBOL->PRINT", { i32*, {}* }* %call-args4)
          to label %"(TRY-7436174).normal-dest" unwind label %"(TRY-7436174).landing-pad", !dbg !5

"(TRY-7436174).normal-dest":                      ; preds = %"(TRY-7569653).try-cont"
  br label %"(TRY-7436174).normal-cleanup", !dbg !5

"(TRY-7436174).normal-cleanup":                   ; preds = %"(TRY-7436174).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call5), !dbg !5
  br label %"(TRY-7436174).try-cont", !dbg !5

"(TRY-7436174).landing-pad":                      ; preds = %"(TRY-7569653).try-cont"
  %8 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %9 = extractvalue { i8*, i32 } %8, 0, !dbg !5
  store i8* %9, i8** %exn.slot, !dbg !5
  %10 = extractvalue { i8*, i32 } %8, 1, !dbg !5
  store i32 %10, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-7436174).dispatch-header", !dbg !5

"(TRY-7436174).dispatch-header":                  ; preds = %"(TRY-7436174).landing-pad", %"(TRY-7569653).dispatch-header"
  call void @trace_exitCallScope(i32 %trace-Call5), !dbg !5
  br label %"(TRY-6773038).dispatch-header", !dbg !5

"(TRY-7436174).try-cont":                         ; preds = %"(TRY-7436174).normal-cleanup"
  br label %"(TRY-7908146).top", !dbg !5

"(TRY-7908146).top":                              ; preds = %"(TRY-7436174).try-cont"
  %trace-Call10 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 4, i32 6, { i32*, {}* }* %call-args9, i8* getelementptr inbounds ([16 x i8]* @":::global-str-( DEBUG \22xxx\22 )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args9, i32 1), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args9, { i32*, {}* }* %LET), !dbg !5
  %call-args9-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args9, i32 0), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args9-ref-0, { i32*, {}* }** @load-time-value-vector, i32 9), !dbg !5
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call10, { i32*, {}* }* %call-args9), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->DEBUG" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 2), !dbg !5
  invoke void @mv_invokePossibleMultipleValueSymbolFunction({ i32*, {}*, i32 }* %result-ptr, { i32*, i32* }* %"SYMBOL->DEBUG", { i32*, {}* }* %call-args9)
          to label %"(TRY-7908146).normal-dest" unwind label %"(TRY-7908146).landing-pad", !dbg !5

"(TRY-7908146).normal-dest":                      ; preds = %"(TRY-7908146).top"
  br label %"(TRY-7908146).normal-cleanup", !dbg !5

"(TRY-7908146).normal-cleanup":                   ; preds = %"(TRY-7908146).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call10), !dbg !5
  br label %"(TRY-7908146).try-cont", !dbg !5

"(TRY-7908146).landing-pad":                      ; preds = %"(TRY-7908146).top"
  %11 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %12 = extractvalue { i8*, i32 } %11, 0, !dbg !5
  store i8* %12, i8** %exn.slot, !dbg !5
  %13 = extractvalue { i8*, i32 } %11, 1, !dbg !5
  store i32 %13, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-7908146).dispatch-header", !dbg !5

"(TRY-7908146).dispatch-header":                  ; preds = %"(TRY-7908146).landing-pad"
  call void @trace_exitCallScope(i32 %trace-Call10), !dbg !5
  br label %"(TRY-6773038).dispatch-header", !dbg !5

"(TRY-7908146).try-cont":                         ; preds = %"(TRY-7908146).normal-cleanup"
  br label %"(TRY-8155530).top", !dbg !5

"(TRY-8155530).top":                              ; preds = %"(TRY-7908146).try-cont"
  %trace-Call12 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 5, i32 6, { i32*, {}* }* %call-args11, i8* getelementptr inbounds ([21 x i8]* @":::global-str-( PRINT ( + 3 43 ) )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args11, i32 1), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args11, { i32*, {}* }* %LET), !dbg !5
  %call-args11-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args11, i32 0), !dbg !5
  br label %"(TRY-8289001).top", !dbg !5

"(TRY-8289001).top":                              ; preds = %"(TRY-8155530).top"
  %trace-Call14 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 5, i32 13, { i32*, {}* }* %call-args13, i8* getelementptr inbounds ([11 x i8]* @":::global-str-( + 3 43 )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args13, i32 2), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args13, { i32*, {}* }* %LET), !dbg !5
  %call-args13-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args13, i32 0), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args13-ref-0, { i32*, {}* }** @load-time-value-vector, i32 7), !dbg !5
  %call-args13-ref-1 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args13, i32 1), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args13-ref-1, { i32*, {}* }** @load-time-value-vector, i32 10), !dbg !5
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call14, { i32*, {}* }* %call-args13), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->+15" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 0), !dbg !5
  invoke void @sp_invokePossibleMultipleValueSymbolFunction({ i32*, {}* }* %call-args11-ref-0, { i32*, i32* }* %"SYMBOL->+15", { i32*, {}* }* %call-args13)
          to label %"(TRY-8289001).normal-dest" unwind label %"(TRY-8289001).landing-pad", !dbg !5

"(TRY-8289001).normal-dest":                      ; preds = %"(TRY-8289001).top"
  br label %"(TRY-8289001).normal-cleanup", !dbg !5

"(TRY-8289001).normal-cleanup":                   ; preds = %"(TRY-8289001).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call14), !dbg !5
  br label %"(TRY-8289001).try-cont", !dbg !5

"(TRY-8289001).landing-pad":                      ; preds = %"(TRY-8289001).top"
  %14 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %15 = extractvalue { i8*, i32 } %14, 0, !dbg !5
  store i8* %15, i8** %exn.slot, !dbg !5
  %16 = extractvalue { i8*, i32 } %14, 1, !dbg !5
  store i32 %16, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-8289001).dispatch-header", !dbg !5

"(TRY-8289001).dispatch-header":                  ; preds = %"(TRY-8289001).landing-pad"
  call void @trace_exitCallScope(i32 %trace-Call14), !dbg !5
  br label %"(TRY-8155530).dispatch-header", !dbg !5

"(TRY-8289001).try-cont":                         ; preds = %"(TRY-8289001).normal-cleanup"
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call12, { i32*, {}* }* %call-args11), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->PRINT16" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 1), !dbg !5
  invoke void @mv_invokePossibleMultipleValueSymbolFunction({ i32*, {}*, i32 }* %result-ptr, { i32*, i32* }* %"SYMBOL->PRINT16", { i32*, {}* }* %call-args11)
          to label %"(TRY-8155530).normal-dest" unwind label %"(TRY-8155530).landing-pad", !dbg !5

"(TRY-8155530).normal-dest":                      ; preds = %"(TRY-8289001).try-cont"
  br label %"(TRY-8155530).normal-cleanup", !dbg !5

"(TRY-8155530).normal-cleanup":                   ; preds = %"(TRY-8155530).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call12), !dbg !5
  br label %"(TRY-8155530).try-cont", !dbg !5

"(TRY-8155530).landing-pad":                      ; preds = %"(TRY-8289001).try-cont"
  %17 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %18 = extractvalue { i8*, i32 } %17, 0, !dbg !5
  store i8* %18, i8** %exn.slot, !dbg !5
  %19 = extractvalue { i8*, i32 } %17, 1, !dbg !5
  store i32 %19, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-8155530).dispatch-header", !dbg !5

"(TRY-8155530).dispatch-header":                  ; preds = %"(TRY-8155530).landing-pad", %"(TRY-8289001).dispatch-header"
  call void @trace_exitCallScope(i32 %trace-Call12), !dbg !5
  br label %"(TRY-6773038).dispatch-header", !dbg !5

"(TRY-8155530).try-cont":                         ; preds = %"(TRY-8155530).normal-cleanup"
  br label %"(TRY-8578043).top", !dbg !5

"(TRY-8578043).top":                              ; preds = %"(TRY-8155530).try-cont"
  %trace-Call18 = call i32 @trace_enterCallScope(i8* getelementptr inbounds ([59 x i8]* @":::global-str-/Users/meister/Development/cando/src/tests/core/dwarf0.lsp", i32 0, i32 0), i32 6, i32 6, { i32*, {}* }* %call-args17, i8* getelementptr inbounds ([16 x i8]* @":::global-str-( PRINT \22two\22 )", i32 0, i32 0)), !dbg !5
  call void @makeValueFrame({ i32*, {}* }* %call-args17, i32 1), !dbg !5
  call void @setParentOfActivationFrame({ i32*, {}* }* %call-args17, { i32*, {}* }* %LET), !dbg !5
  %call-args17-ref-0 = call { i32*, {}* }* @valueFrameReference({ i32*, {}* }* %call-args17, i32 0), !dbg !5
  call void @sp_copyLoadTimeValue({ i32*, {}* }* %call-args17-ref-0, { i32*, {}* }** @load-time-value-vector, i32 11), !dbg !5
  call void @trace_setActivationFrameForLexicalScope(i32 %trace-Call18, { i32*, {}* }* %call-args17), !dbg !5
  call void @singleStepCallback(), !dbg !5
  %"SYMBOL->PRINT19" = call { i32*, i32* }* @loadTimeSymbolReference({ i32*, {}* }** @load-time-value-vector, i32 1), !dbg !5
  invoke void @mv_invokePossibleMultipleValueSymbolFunction({ i32*, {}*, i32 }* %result-ptr, { i32*, i32* }* %"SYMBOL->PRINT19", { i32*, {}* }* %call-args17)
          to label %"(TRY-8578043).normal-dest" unwind label %"(TRY-8578043).landing-pad", !dbg !5

"(TRY-8578043).normal-dest":                      ; preds = %"(TRY-8578043).top"
  br label %"(TRY-8578043).normal-cleanup", !dbg !5

"(TRY-8578043).normal-cleanup":                   ; preds = %"(TRY-8578043).normal-dest"
  call void @trace_exitCallScope(i32 %trace-Call18), !dbg !5
  br label %"(TRY-8578043).try-cont", !dbg !5

"(TRY-8578043).landing-pad":                      ; preds = %"(TRY-8578043).top"
  %20 = landingpad { i8*, i32 } personality i32 (...)* @__gxx_personality_v0
          cleanup
          catch i8* @_ZTIN4core10ReturnFromE, !dbg !5
  %21 = extractvalue { i8*, i32 } %20, 0, !dbg !5
  store i8* %21, i8** %exn.slot, !dbg !5
  %22 = extractvalue { i8*, i32 } %20, 1, !dbg !5
  store i32 %22, i32* %ehselector.slot, !dbg !5
  br label %"(TRY-8578043).dispatch-header", !dbg !5

"(TRY-8578043).dispatch-header":                  ; preds = %"(TRY-8578043).landing-pad"
  call void @trace_exitCallScope(i32 %trace-Call18), !dbg !5
  br label %"(TRY-6773038).dispatch-header", !dbg !5

"(TRY-8578043).try-cont":                         ; preds = %"(TRY-8578043).normal-cleanup"
}

!llvm.dbg.cu = !{!0}

!0 = metadata !{i32 786449, i32 0, i32 32768, metadata !"dwarf0.lsp", metadata !"/Users/meister/Development/cando/src/tests/core", metadata !"brcl Common Lisp compiler", i1 true, i1 false, metadata !"-v", i32 1, metadata !1, metadata !2, metadata !3, metadata !4} ; [ DW_TAG_compile_unit ] [/Users/meister/Development/cando/src/tests/core/dwarf0.lsp] [DW_LANG_lo_user]
!1 = metadata !{i32 786468}                       ; [ DW_TAG_base_type ] [line 0, size 0, align 0, offset 0]
!2 = metadata !{i32 786468}                       ; [ DW_TAG_base_type ] [line 0, size 0, align 0, offset 0]
!3 = metadata !{i32 786468}                       ; [ DW_TAG_base_type ] [line 0, size 0, align 0, offset 0]
!4 = metadata !{i32 786468}                       ; [ DW_TAG_base_type ] [line 0, size 0, align 0, offset 0]
!5 = metadata !{i32 2, i32 4, metadata !6, null}
!6 = metadata !{i32 786478, i32 0, metadata !7, metadata !"repl", metadata !"repl", metadata !"repl", metadata !7, i32 2, metadata !8, i1 true, i1 true, i32 0, i32 0, null, i32 0, i1 false, void ({ i32*, {}*, i32 }*, { i32*, {}* }*)* @repl, null, null, metadata !11, i32 2} ; [ DW_TAG_subprogram ] [line 2] [local] [def] [repl]
!7 = metadata !{i32 786473, metadata !"dwarf0.lsp", metadata !"/Users/meister/Development/cando/src/tests/core", null} ; [ DW_TAG_file_type ]
!8 = metadata !{i32 786453, i32 0, metadata !"", i32 0, i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !9, i32 0, i32 0} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!9 = metadata !{metadata !10}
!10 = metadata !{i32 786468, null, metadata !"int", null, i32 0, i64 32, i64 32, i64 0, i32 0, i32 13} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed_fixed]
!11 = metadata !{metadata !12}
!12 = metadata !{i32 786468}                      ; [ DW_TAG_base_type ] [line 0, size 0, align 0, offset 0]
